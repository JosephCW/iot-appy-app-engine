
c:/Users/s519653/Documents/IoT/Projects/lubdub/target/1.4.2/photon/lubdub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003794  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a37b0  080a37b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a37b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080a37bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000638  2000006c  2000006c  0003006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a3828  080a3828  00023828  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a3850  080a3850  00023850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000c8016  00000000  00000000  00023854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001201a  00000000  00000000  000eb86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015aa1  00000000  00000000  000fd884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002178  00000000  00000000  00113325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003488  00000000  00000000  0011549d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029671  00000000  00000000  00118925  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00029e3b  00000000  00000000  00141f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a984a  00000000  00000000  0016bdd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000bf60  00000000  00000000  0021561c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f96d 	bl	80a330c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f972 	bl	80a3322 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a37bc 	.word	0x080a37bc
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200006a4 	.word	0x200006a4
 80a0058:	200006a4 	.word	0x200006a4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa21 	bl	80a14a4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3770 	.word	0x080a3770
 80a0084:	080a37b0 	.word	0x080a37b0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f85f 	bl	80a0150 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b9c7 	b.w	80a1428 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 be53 	b.w	80a0d44 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 be59 	b.w	80a0d54 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int beatAvg;
int timeLastBtnPress;

const int btn = A0;
// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
 80a00b6:	f001 fdb9 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f001 fd9b 	bl	80a1bf8 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
 80a00c2:	f001 fdb3 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a00c6:	491c      	ldr	r1, [pc, #112]	; (80a0138 <setup+0x84>)
 80a00c8:	f000 ffd4 	bl	80a1074 <_ZN5Print7printlnEPKc>
  pinMode(btn, INPUT_PULLUP);
 80a00cc:	2102      	movs	r1, #2
 80a00ce:	200a      	movs	r0, #10
 80a00d0:	f001 fff4 	bl	80a20bc <pinMode>
  timeLastBtnPress = Time.now();
 80a00d4:	f001 f934 	bl	80a1340 <_ZN9TimeClass3nowEv>
 80a00d8:	4b18      	ldr	r3, [pc, #96]	; (80a013c <setup+0x88>)
 80a00da:	6018      	str	r0, [r3, #0]
  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a00dc:	f002 f84c 	bl	80a2178 <_Z19__fetch_global_Wirev>
 80a00e0:	2357      	movs	r3, #87	; 0x57
 80a00e2:	4601      	mov	r1, r0
 80a00e4:	4a16      	ldr	r2, [pc, #88]	; (80a0140 <setup+0x8c>)
 80a00e6:	4817      	ldr	r0, [pc, #92]	; (80a0144 <setup+0x90>)
 80a00e8:	f000 fac4 	bl	80a0674 <_ZN8MAX301055beginER7TwoWiremh>
 80a00ec:	b928      	cbnz	r0, 80a00fa <setup+0x46>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
 80a00ee:	f001 fd9d 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a00f2:	4915      	ldr	r1, [pc, #84]	; (80a0148 <setup+0x94>)
 80a00f4:	f000 ffbe 	bl	80a1074 <_ZN5Print7printlnEPKc>
 80a00f8:	e7fe      	b.n	80a00f8 <setup+0x44>
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
 80a00fa:	f001 fd97 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a00fe:	4913      	ldr	r1, [pc, #76]	; (80a014c <setup+0x98>)
 80a0100:	f000 ffb8 	bl	80a1074 <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
 80a0104:	f240 129b 	movw	r2, #411	; 0x19b
 80a0108:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a010c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0110:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a0114:	480b      	ldr	r0, [pc, #44]	; (80a0144 <setup+0x90>)
 80a0116:	2303      	movs	r3, #3
 80a0118:	2204      	movs	r2, #4
 80a011a:	211f      	movs	r1, #31
 80a011c:	f000 fb69 	bl	80a07f2 <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
 80a0120:	210a      	movs	r1, #10
 80a0122:	4808      	ldr	r0, [pc, #32]	; (80a0144 <setup+0x90>)
 80a0124:	f000 fad5 	bl	80a06d2 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0128:	4806      	ldr	r0, [pc, #24]	; (80a0144 <setup+0x90>)
 80a012a:	2100      	movs	r1, #0
}
 80a012c:	b005      	add	sp, #20
 80a012e:	f85d eb04 	ldr.w	lr, [sp], #4
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0132:	f000 bad8 	b.w	80a06e6 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
 80a0136:	bf00      	nop
 80a0138:	080a33e0 	.word	0x080a33e0
 80a013c:	200000b4 	.word	0x200000b4
 80a0140:	00061a80 	.word	0x00061a80
 80a0144:	20000078 	.word	0x20000078
 80a0148:	080a33f0 	.word	0x080a33f0
 80a014c:	080a3424 	.word	0x080a3424

080a0150 <loop>:
}

// // loop() runs over and over again, as quickly as it can execute.
 void loop() {
 80a0150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  long irValue = particleSensor.getIR();
 80a0154:	485e      	ldr	r0, [pc, #376]	; (80a02d0 <loop+0x180>)
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
}

// // loop() runs over and over again, as quickly as it can execute.
 void loop() {
 80a0156:	b088      	sub	sp, #32
  long irValue = particleSensor.getIR();
 80a0158:	f000 fa74 	bl	80a0644 <_ZN8MAX301055getIREv>
 80a015c:	4606      	mov	r6, r0
  if (checkForBeat(irValue) == true)
 80a015e:	f000 f929 	bl	80a03b4 <_Z12checkForBeatl>
 80a0162:	4d5c      	ldr	r5, [pc, #368]	; (80a02d4 <loop+0x184>)
 80a0164:	4f5c      	ldr	r7, [pc, #368]	; (80a02d8 <loop+0x188>)
 80a0166:	2800      	cmp	r0, #0
 80a0168:	d041      	beq.n	80a01ee <loop+0x9e>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a016a:	f000 fc2d 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
 80a016e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80a030c <loop+0x1bc>
 80a0172:	f8d8 3000 	ldr.w	r3, [r8]
 80a0176:	1ac4      	subs	r4, r0, r3
 80a0178:	f000 fc26 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
 80a017c:	f8c8 0000 	str.w	r0, [r8]

    beatsPerMinute = 60 / (delta / 1000.0);
 80a0180:	4620      	mov	r0, r4
 80a0182:	f002 fabd 	bl	80a2700 <__aeabi_i2d>
 80a0186:	2200      	movs	r2, #0
 80a0188:	4b54      	ldr	r3, [pc, #336]	; (80a02dc <loop+0x18c>)
 80a018a:	f002 fc49 	bl	80a2a20 <__aeabi_ddiv>
 80a018e:	4602      	mov	r2, r0
 80a0190:	460b      	mov	r3, r1
 80a0192:	2000      	movs	r0, #0
 80a0194:	4952      	ldr	r1, [pc, #328]	; (80a02e0 <loop+0x190>)
 80a0196:	f002 fc43 	bl	80a2a20 <__aeabi_ddiv>
 80a019a:	f002 fe0f 	bl	80a2dbc <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a019e:	4951      	ldr	r1, [pc, #324]	; (80a02e4 <loop+0x194>)
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
 80a01a0:	4681      	mov	r9, r0
 80a01a2:	6028      	str	r0, [r5, #0]

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a01a4:	f002 fea8 	bl	80a2ef8 <__aeabi_fcmplt>
 80a01a8:	b308      	cbz	r0, 80a01ee <loop+0x9e>
 80a01aa:	494f      	ldr	r1, [pc, #316]	; (80a02e8 <loop+0x198>)
 80a01ac:	4648      	mov	r0, r9
 80a01ae:	f002 fec1 	bl	80a2f34 <__aeabi_fcmpgt>
 80a01b2:	b1e0      	cbz	r0, 80a01ee <loop+0x9e>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
 80a01b4:	4648      	mov	r0, r9
 80a01b6:	f002 fec7 	bl	80a2f48 <__aeabi_f2uiz>
 80a01ba:	f8df a154 	ldr.w	sl, [pc, #340]	; 80a0310 <loop+0x1c0>
 80a01be:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80a0314 <loop+0x1c4>
 80a01c2:	f89a 4000 	ldrb.w	r4, [sl]
 80a01c6:	f808 0004 	strb.w	r0, [r8, r4]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01ca:	f898 2000 	ldrb.w	r2, [r8]
 80a01ce:	f898 3001 	ldrb.w	r3, [r8, #1]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01d2:	3401      	adds	r4, #1

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01d4:	4413      	add	r3, r2
 80a01d6:	f898 2002 	ldrb.w	r2, [r8, #2]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01da:	f004 0403 	and.w	r4, r4, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01de:	4413      	add	r3, r2
 80a01e0:	f898 2003 	ldrb.w	r2, [r8, #3]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01e4:	f88a 4000 	strb.w	r4, [sl]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01e8:	4413      	add	r3, r2
 80a01ea:	109b      	asrs	r3, r3, #2
 80a01ec:	603b      	str	r3, [r7, #0]
    }
  }

  Serial.print("IR=");
 80a01ee:	f001 fd1d 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a01f2:	493e      	ldr	r1, [pc, #248]	; (80a02ec <loop+0x19c>)
 80a01f4:	f000 ff2b 	bl	80a104e <_ZN5Print5printEPKc>
  Serial.print(irValue);
 80a01f8:	f001 fd18 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a01fc:	220a      	movs	r2, #10
 80a01fe:	4631      	mov	r1, r6
 80a0200:	f000 ff6e 	bl	80a10e0 <_ZN5Print5printEli>
  Serial.print(", BPM=");
 80a0204:	f001 fd12 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a0208:	4939      	ldr	r1, [pc, #228]	; (80a02f0 <loop+0x1a0>)
 80a020a:	f000 ff20 	bl	80a104e <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
 80a020e:	f001 fd0d 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a0212:	4604      	mov	r4, r0
 80a0214:	6828      	ldr	r0, [r5, #0]
 80a0216:	f002 fa85 	bl	80a2724 <__aeabi_f2d>
 80a021a:	2302      	movs	r3, #2
 80a021c:	4602      	mov	r2, r0
 80a021e:	9300      	str	r3, [sp, #0]
 80a0220:	4620      	mov	r0, r4
 80a0222:	460b      	mov	r3, r1
 80a0224:	f001 f82e 	bl	80a1284 <_ZN5Print5printEdi>
  Serial.print(", Avg BPM=");
 80a0228:	f001 fd00 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a022c:	4931      	ldr	r1, [pc, #196]	; (80a02f4 <loop+0x1a4>)
 80a022e:	f000 ff0e 	bl	80a104e <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
 80a0232:	f001 fcfb 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a0236:	220a      	movs	r2, #10
 80a0238:	6839      	ldr	r1, [r7, #0]
 80a023a:	f000 ff73 	bl	80a1124 <_ZN5Print5printEii>

  if (irValue < 50000)
 80a023e:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a0242:	429e      	cmp	r6, r3
 80a0244:	dc04      	bgt.n	80a0250 <loop+0x100>
    Serial.print(" No finger?");
 80a0246:	f001 fcf1 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a024a:	492b      	ldr	r1, [pc, #172]	; (80a02f8 <loop+0x1a8>)
 80a024c:	f000 feff 	bl	80a104e <_ZN5Print5printEPKc>

  if (!digitalRead(btn) && Time.now() > timeLastBtnPress) {
 80a0250:	200a      	movs	r0, #10
 80a0252:	f001 ff44 	bl	80a20de <digitalRead>
 80a0256:	bb28      	cbnz	r0, 80a02a4 <loop+0x154>
 80a0258:	f001 f872 	bl	80a1340 <_ZN9TimeClass3nowEv>
 80a025c:	4c27      	ldr	r4, [pc, #156]	; (80a02fc <loop+0x1ac>)
 80a025e:	6823      	ldr	r3, [r4, #0]
 80a0260:	4298      	cmp	r0, r3
 80a0262:	dd1f      	ble.n	80a02a4 <loop+0x154>
    timeLastBtnPress = Time.now();
 80a0264:	f001 f86c 	bl	80a1340 <_ZN9TimeClass3nowEv>
    Particle.publish("heartRateGCP", String(beatsPerMinute), PRIVATE);
 80a0268:	2206      	movs	r2, #6

  if (irValue < 50000)
    Serial.print(" No finger?");

  if (!digitalRead(btn) && Time.now() > timeLastBtnPress) {
    timeLastBtnPress = Time.now();
 80a026a:	6020      	str	r0, [r4, #0]
    Particle.publish("heartRateGCP", String(beatsPerMinute), PRIVATE);
 80a026c:	6829      	ldr	r1, [r5, #0]
 80a026e:	a804      	add	r0, sp, #16
 80a0270:	f000 feb0 	bl	80a0fd4 <_ZN6StringC1Efi>
 80a0274:	4b22      	ldr	r3, [pc, #136]	; (80a0300 <loop+0x1b0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0276:	9a04      	ldr	r2, [sp, #16]
 80a0278:	781b      	ldrb	r3, [r3, #0]
 80a027a:	4922      	ldr	r1, [pc, #136]	; (80a0304 <loop+0x1b4>)
 80a027c:	f88d 3000 	strb.w	r3, [sp]
 80a0280:	a802      	add	r0, sp, #8
 80a0282:	233c      	movs	r3, #60	; 0x3c
 80a0284:	f001 fa7c 	bl	80a1780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0288:	9c03      	ldr	r4, [sp, #12]
 80a028a:	b11c      	cbz	r4, 80a0294 <loop+0x144>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a028c:	6863      	ldr	r3, [r4, #4]
 80a028e:	3b01      	subs	r3, #1
 80a0290:	6063      	str	r3, [r4, #4]
 80a0292:	b173      	cbz	r3, 80a02b2 <loop+0x162>
 80a0294:	a804      	add	r0, sp, #16
 80a0296:	f000 fe45 	bl	80a0f24 <_ZN6StringD1Ev>
    Serial.println("Publishing to Particle Cloud");
 80a029a:	f001 fcc7 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a029e:	491a      	ldr	r1, [pc, #104]	; (80a0308 <loop+0x1b8>)
 80a02a0:	f000 fee8 	bl	80a1074 <_ZN5Print7printlnEPKc>
  }
  Serial.println();
 80a02a4:	f001 fcc2 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a02a8:	f000 fed8 	bl	80a105c <_ZN5Print7printlnEv>
 80a02ac:	b008      	add	sp, #32
 80a02ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        {
          _M_dispose();
 80a02b2:	6823      	ldr	r3, [r4, #0]
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	689b      	ldr	r3, [r3, #8]
 80a02b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02ba:	68a3      	ldr	r3, [r4, #8]
 80a02bc:	3b01      	subs	r3, #1
 80a02be:	60a3      	str	r3, [r4, #8]
 80a02c0:	2b00      	cmp	r3, #0
 80a02c2:	d1e7      	bne.n	80a0294 <loop+0x144>
            _M_destroy();
 80a02c4:	6823      	ldr	r3, [r4, #0]
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	68db      	ldr	r3, [r3, #12]
 80a02ca:	4798      	blx	r3
 80a02cc:	e7e2      	b.n	80a0294 <loop+0x144>
 80a02ce:	bf00      	nop
 80a02d0:	20000078 	.word	0x20000078
 80a02d4:	200000c0 	.word	0x200000c0
 80a02d8:	20000070 	.word	0x20000070
 80a02dc:	408f4000 	.word	0x408f4000
 80a02e0:	404e0000 	.word	0x404e0000
 80a02e4:	437f0000 	.word	0x437f0000
 80a02e8:	41a00000 	.word	0x41a00000
 80a02ec:	080a3460 	.word	0x080a3460
 80a02f0:	080a3464 	.word	0x080a3464
 80a02f4:	080a346b 	.word	0x080a346b
 80a02f8:	080a3476 	.word	0x080a3476
 80a02fc:	200000b4 	.word	0x200000b4
 80a0300:	20000074 	.word	0x20000074
 80a0304:	080a349f 	.word	0x080a349f
 80a0308:	080a3482 	.word	0x080a3482
 80a030c:	200000b8 	.word	0x200000b8
 80a0310:	200000c4 	.word	0x200000c4
 80a0314:	200000bc 	.word	0x200000bc

080a0318 <_GLOBAL__sub_I_particleSensor>:
 80a0318:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a031a:	4b05      	ldr	r3, [pc, #20]	; (80a0330 <_GLOBAL__sub_I_particleSensor+0x18>)
 80a031c:	2201      	movs	r2, #1
 80a031e:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0320:	f000 fb1a 	bl	80a0958 <HAL_Pin_Map>
 80a0324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
 80a0328:	4802      	ldr	r0, [pc, #8]	; (80a0334 <_GLOBAL__sub_I_particleSensor+0x1c>)
 80a032a:	f000 b8ad 	b.w	80a0488 <_ZN8MAX30105C1Ev>
 80a032e:	bf00      	nop
 80a0330:	20000074 	.word	0x20000074
 80a0334:	20000078 	.word	0x20000078

080a0338 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
 80a0338:	6803      	ldr	r3, [r0, #0]
 80a033a:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
 80a033e:	eb03 1321 	add.w	r3, r3, r1, asr #4
 80a0342:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
 80a0344:	f343 30cf 	sbfx	r0, r3, #15, #16
 80a0348:	4770      	bx	lr
	...

080a034c <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a034c:	4916      	ldr	r1, [pc, #88]	; (80a03a8 <_Z16lowPassFIRFilters+0x5c>)
  return (*p >> 15);
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
 80a034e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0350:	460e      	mov	r6, r1
  cbuf[offset] = din;
 80a0352:	4d16      	ldr	r5, [pc, #88]	; (80a03ac <_Z16lowPassFIRFilters+0x60>)

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a0354:	4f16      	ldr	r7, [pc, #88]	; (80a03b0 <_Z16lowPassFIRFilters+0x64>)
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a0356:	782b      	ldrb	r3, [r5, #0]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 80a0358:	f1a3 020b 	sub.w	r2, r3, #11
 80a035c:	f002 021f 	and.w	r2, r2, #31
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a0360:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a0364:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a0368:	f1a3 0e16 	sub.w	lr, r3, #22
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a036c:	0300      	lsls	r0, r0, #12
 80a036e:	2200      	movs	r2, #0

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a0370:	eb0e 0102 	add.w	r1, lr, r2
 80a0374:	1a9c      	subs	r4, r3, r2
 80a0376:	f001 011f 	and.w	r1, r1, #31
 80a037a:	f004 041f 	and.w	r4, r4, #31
 80a037e:	f836 c011 	ldrh.w	ip, [r6, r1, lsl #1]
 80a0382:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80a0386:	f937 4012 	ldrsh.w	r4, [r7, r2, lsl #1]
 80a038a:	4461      	add	r1, ip
 80a038c:	3201      	adds	r2, #1
 80a038e:	b209      	sxth	r1, r1
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a0390:	2a0b      	cmp	r2, #11
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a0392:	fb04 0001 	mla	r0, r4, r1, r0
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a0396:	d1eb      	bne.n	80a0370 <_Z16lowPassFIRFilters+0x24>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
 80a0398:	3301      	adds	r3, #1
 80a039a:	f003 031f 	and.w	r3, r3, #31
 80a039e:	702b      	strb	r3, [r5, #0]

  return(z >> 15);
}
 80a03a0:	f340 30cf 	sbfx	r0, r0, #15, #16
 80a03a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a03a6:	bf00      	nop
 80a03a8:	200000d6 	.word	0x200000d6
 80a03ac:	20000116 	.word	0x20000116
 80a03b0:	080a34ac 	.word	0x080a34ac

080a03b4 <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
 80a03b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a03b6:	4d29      	ldr	r5, [pc, #164]	; (80a045c <_Z12checkForBeatl+0xa8>)
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a03b8:	b282      	uxth	r2, r0
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a03ba:	4c29      	ldr	r4, [pc, #164]	; (80a0460 <_Z12checkForBeatl+0xac>)
 80a03bc:	882b      	ldrh	r3, [r5, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a03be:	4611      	mov	r1, r2
 80a03c0:	4828      	ldr	r0, [pc, #160]	; (80a0464 <_Z12checkForBeatl+0xb0>)
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a03c2:	8023      	strh	r3, [r4, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a03c4:	f7ff ffb8 	bl	80a0338 <_Z18averageDCEstimatorPlt>
 80a03c8:	4b27      	ldr	r3, [pc, #156]	; (80a0468 <_Z12checkForBeatl+0xb4>)
 80a03ca:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a03cc:	1a10      	subs	r0, r2, r0
 80a03ce:	b200      	sxth	r0, r0
 80a03d0:	f7ff ffbc 	bl	80a034c <_Z16lowPassFIRFilters>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a03d4:	f9b4 2000 	ldrsh.w	r2, [r4]
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a03d8:	8028      	strh	r0, [r5, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a03da:	2a00      	cmp	r2, #0
 80a03dc:	4c23      	ldr	r4, [pc, #140]	; (80a046c <_Z12checkForBeatl+0xb8>)
 80a03de:	4924      	ldr	r1, [pc, #144]	; (80a0470 <_Z12checkForBeatl+0xbc>)
 80a03e0:	da1a      	bge.n	80a0418 <_Z12checkForBeatl+0x64>
 80a03e2:	0403      	lsls	r3, r0, #16
 80a03e4:	d418      	bmi.n	80a0418 <_Z12checkForBeatl+0x64>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a03e6:	4e23      	ldr	r6, [pc, #140]	; (80a0474 <_Z12checkForBeatl+0xc0>)
 80a03e8:	4d23      	ldr	r5, [pc, #140]	; (80a0478 <_Z12checkForBeatl+0xc4>)
 80a03ea:	f9b6 3000 	ldrsh.w	r3, [r6]
    IR_AC_Min = IR_AC_Signal_min;
 80a03ee:	4f23      	ldr	r7, [pc, #140]	; (80a047c <_Z12checkForBeatl+0xc8>)

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a03f0:	802b      	strh	r3, [r5, #0]
    IR_AC_Min = IR_AC_Signal_min;
 80a03f2:	4d23      	ldr	r5, [pc, #140]	; (80a0480 <_Z12checkForBeatl+0xcc>)
 80a03f4:	f9b5 5000 	ldrsh.w	r5, [r5]
 80a03f8:	803d      	strh	r5, [r7, #0]
    positiveEdge = 1;
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a03fa:	1b5b      	subs	r3, r3, r5
 80a03fc:	f240 35d2 	movw	r5, #978	; 0x3d2
 80a0400:	3b15      	subs	r3, #21
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a0402:	2701      	movs	r7, #1
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0404:	42ab      	cmp	r3, r5
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a0406:	8027      	strh	r7, [r4, #0]
    negativeEdge = 0;
 80a0408:	f04f 0700 	mov.w	r7, #0
 80a040c:	800f      	strh	r7, [r1, #0]
    IR_AC_Signal_max = 0;
 80a040e:	8037      	strh	r7, [r6, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0410:	bf8c      	ite	hi
 80a0412:	2300      	movhi	r3, #0
 80a0414:	2301      	movls	r3, #1
 80a0416:	e000      	b.n	80a041a <_Z12checkForBeatl+0x66>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
 80a0418:	2300      	movs	r3, #0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 80a041a:	2a00      	cmp	r2, #0
 80a041c:	dd07      	ble.n	80a042e <_Z12checkForBeatl+0x7a>
 80a041e:	2800      	cmp	r0, #0
 80a0420:	dc05      	bgt.n	80a042e <_Z12checkForBeatl+0x7a>
  {
    positiveEdge = 0;
    negativeEdge = 1;
 80a0422:	2601      	movs	r6, #1
 80a0424:	800e      	strh	r6, [r1, #0]
    IR_AC_Signal_min = 0;
 80a0426:	4e16      	ldr	r6, [pc, #88]	; (80a0480 <_Z12checkForBeatl+0xcc>)
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
  {
    positiveEdge = 0;
 80a0428:	2500      	movs	r5, #0
 80a042a:	8025      	strh	r5, [r4, #0]
    negativeEdge = 1;
    IR_AC_Signal_min = 0;
 80a042c:	8035      	strh	r5, [r6, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 80a042e:	f9b4 4000 	ldrsh.w	r4, [r4]
 80a0432:	4290      	cmp	r0, r2
 80a0434:	bfd4      	ite	le
 80a0436:	2400      	movle	r4, #0
 80a0438:	f004 0401 	andgt.w	r4, r4, #1
 80a043c:	b10c      	cbz	r4, 80a0442 <_Z12checkForBeatl+0x8e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 80a043e:	4c0d      	ldr	r4, [pc, #52]	; (80a0474 <_Z12checkForBeatl+0xc0>)
 80a0440:	8020      	strh	r0, [r4, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 80a0442:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a0446:	4290      	cmp	r0, r2
 80a0448:	bfac      	ite	ge
 80a044a:	2200      	movge	r2, #0
 80a044c:	f001 0201 	andlt.w	r2, r1, #1
 80a0450:	b10a      	cbz	r2, 80a0456 <_Z12checkForBeatl+0xa2>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 80a0452:	4a0b      	ldr	r2, [pc, #44]	; (80a0480 <_Z12checkForBeatl+0xcc>)
 80a0454:	8010      	strh	r0, [r2, #0]
  }
  
  return(beatDetected);
}
 80a0456:	4618      	mov	r0, r3
 80a0458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a045a:	bf00      	nop
 80a045c:	200000d4 	.word	0x200000d4
 80a0460:	200000d2 	.word	0x200000d2
 80a0464:	200000cc 	.word	0x200000cc
 80a0468:	200000c6 	.word	0x200000c6
 80a046c:	20000118 	.word	0x20000118
 80a0470:	200000c8 	.word	0x200000c8
 80a0474:	2000011a 	.word	0x2000011a
 80a0478:	20000002 	.word	0x20000002
 80a047c:	20000000 	.word	0x20000000
 80a0480:	200000d0 	.word	0x200000d0

080a0484 <_GLOBAL__sub_I_IR_AC_Max>:
 80a0484:	f000 ba68 	b.w	80a0958 <HAL_Pin_Map>

080a0488 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a0488:	4770      	bx	lr

080a048a <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a048a:	b570      	push	{r4, r5, r6, lr}
 80a048c:	4604      	mov	r4, r0
 80a048e:	4616      	mov	r6, r2
 80a0490:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a0492:	6800      	ldr	r0, [r0, #0]
 80a0494:	f001 fd1b 	bl	80a1ece <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0498:	6820      	ldr	r0, [r4, #0]
 80a049a:	4631      	mov	r1, r6
 80a049c:	6803      	ldr	r3, [r0, #0]
 80a049e:	689b      	ldr	r3, [r3, #8]
 80a04a0:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a04a2:	2100      	movs	r1, #0
 80a04a4:	6820      	ldr	r0, [r4, #0]
 80a04a6:	f001 fd19 	bl	80a1edc <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a04aa:	2201      	movs	r2, #1
 80a04ac:	4629      	mov	r1, r5
 80a04ae:	6820      	ldr	r0, [r4, #0]
 80a04b0:	f001 fd05 	bl	80a1ebe <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
 80a04b4:	6820      	ldr	r0, [r4, #0]
 80a04b6:	6803      	ldr	r3, [r0, #0]
 80a04b8:	691b      	ldr	r3, [r3, #16]
 80a04ba:	4798      	blx	r3
 80a04bc:	b120      	cbz	r0, 80a04c8 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a04be:	6820      	ldr	r0, [r4, #0]
 80a04c0:	6803      	ldr	r3, [r0, #0]
 80a04c2:	695b      	ldr	r3, [r3, #20]
 80a04c4:	4798      	blx	r3
 80a04c6:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a04c8:	bd70      	pop	{r4, r5, r6, pc}

080a04ca <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a04ca:	2204      	movs	r2, #4
 80a04cc:	7901      	ldrb	r1, [r0, #4]
 80a04ce:	f7ff bfdc 	b.w	80a048a <_ZN8MAX3010513readRegister8Ehh>

080a04d2 <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a04d2:	2206      	movs	r2, #6
 80a04d4:	7901      	ldrb	r1, [r0, #4]
 80a04d6:	f7ff bfd8 	b.w	80a048a <_ZN8MAX3010513readRegister8Ehh>

080a04da <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
 80a04da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a04de:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
 80a04e0:	f7ff fff7 	bl	80a04d2 <_ZN8MAX3010514getReadPointerEv>
 80a04e4:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	f7ff ffef 	bl	80a04ca <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
 80a04ec:	4285      	cmp	r5, r0
 80a04ee:	f000 808e 	beq.w	80a060e <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04f2:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a04f4:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a04f8:	6820      	ldr	r0, [r4, #0]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a04fa:	bf48      	it	mi
 80a04fc:	3720      	addmi	r7, #32

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a04fe:	7966      	ldrb	r6, [r4, #5]

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0500:	f001 fce9 	bl	80a1ed6 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a0504:	6820      	ldr	r0, [r4, #0]
 80a0506:	2107      	movs	r1, #7
 80a0508:	6803      	ldr	r3, [r0, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a050a:	437e      	muls	r6, r7

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
    _i2cPort->write(MAX30105_FIFODATA);
 80a050c:	689b      	ldr	r3, [r3, #8]
 80a050e:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a0510:	6820      	ldr	r0, [r4, #0]
 80a0512:	f001 fce7 	bl	80a1ee4 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0516:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a051a:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a051e:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
 80a0522:	2e00      	cmp	r6, #0
 80a0524:	dd74      	ble.n	80a0610 <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
 80a0526:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0528:	bfc9      	itett	gt
 80a052a:	7965      	ldrbgt	r5, [r4, #5]
 80a052c:	4635      	movle	r5, r6
 80a052e:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a0532:	fb98 f3f5 	sdivgt	r3, r8, r5
 80a0536:	bfc8      	it	gt
 80a0538:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a053a:	2157      	movs	r1, #87	; 0x57
 80a053c:	462a      	mov	r2, r5
 80a053e:	6820      	ldr	r0, [r4, #0]
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
 80a0540:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a0542:	f001 fcbf 	bl	80a1ec4 <_ZN7TwoWire11requestFromEii>
      
      while (toGet > 0)
 80a0546:	2d00      	cmp	r5, #0
 80a0548:	ddeb      	ble.n	80a0522 <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a054a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a054e:	6820      	ldr	r0, [r4, #0]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a0550:	3301      	adds	r3, #1
 80a0552:	f003 0303 	and.w	r3, r3, #3
 80a0556:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a055a:	6803      	ldr	r3, [r0, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a055c:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a0560:	695b      	ldr	r3, [r3, #20]
 80a0562:	4798      	blx	r3
 80a0564:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a0568:	6820      	ldr	r0, [r4, #0]
 80a056a:	6803      	ldr	r3, [r0, #0]
 80a056c:	695b      	ldr	r3, [r3, #20]
 80a056e:	4798      	blx	r3
 80a0570:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a0574:	6820      	ldr	r0, [r4, #0]
 80a0576:	6803      	ldr	r3, [r0, #0]
 80a0578:	695b      	ldr	r3, [r3, #20]
 80a057a:	4798      	blx	r3
 80a057c:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a0580:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0584:	9a01      	ldr	r2, [sp, #4]
 80a0586:	3302      	adds	r3, #2
 80a0588:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a058c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
 80a0590:	7963      	ldrb	r3, [r4, #5]
 80a0592:	2b01      	cmp	r3, #1
 80a0594:	d919      	bls.n	80a05ca <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a0596:	6820      	ldr	r0, [r4, #0]
 80a0598:	6803      	ldr	r3, [r0, #0]
 80a059a:	695b      	ldr	r3, [r3, #20]
 80a059c:	4798      	blx	r3
 80a059e:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a05a2:	6820      	ldr	r0, [r4, #0]
 80a05a4:	6803      	ldr	r3, [r0, #0]
 80a05a6:	695b      	ldr	r3, [r3, #20]
 80a05a8:	4798      	blx	r3
 80a05aa:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a05ae:	6820      	ldr	r0, [r4, #0]
 80a05b0:	6803      	ldr	r3, [r0, #0]
 80a05b2:	695b      	ldr	r3, [r3, #20]
 80a05b4:	4798      	blx	r3
 80a05b6:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
 80a05ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a05be:	9a01      	ldr	r2, [sp, #4]
 80a05c0:	3306      	adds	r3, #6
 80a05c2:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a05c6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
 80a05ca:	7963      	ldrb	r3, [r4, #5]
 80a05cc:	2b02      	cmp	r3, #2
 80a05ce:	d919      	bls.n	80a0604 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a05d0:	6820      	ldr	r0, [r4, #0]
 80a05d2:	6803      	ldr	r3, [r0, #0]
 80a05d4:	695b      	ldr	r3, [r3, #20]
 80a05d6:	4798      	blx	r3
 80a05d8:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a05dc:	6820      	ldr	r0, [r4, #0]
 80a05de:	6803      	ldr	r3, [r0, #0]
 80a05e0:	695b      	ldr	r3, [r3, #20]
 80a05e2:	4798      	blx	r3
 80a05e4:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a05e8:	6820      	ldr	r0, [r4, #0]
 80a05ea:	6803      	ldr	r3, [r0, #0]
 80a05ec:	695b      	ldr	r3, [r3, #20]
 80a05ee:	4798      	blx	r3
 80a05f0:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
 80a05f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a05f8:	9a01      	ldr	r2, [sp, #4]
 80a05fa:	330a      	adds	r3, #10
 80a05fc:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a0600:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
 80a0604:	7963      	ldrb	r3, [r4, #5]
 80a0606:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a060a:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
 80a060c:	e79b      	b.n	80a0546 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
 80a060e:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
 80a0610:	b2b8      	uxth	r0, r7
 80a0612:	b003      	add	sp, #12
 80a0614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0618 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
 80a0618:	b570      	push	{r4, r5, r6, lr}
 80a061a:	4605      	mov	r5, r0
 80a061c:	460e      	mov	r6, r1
 80a061e:	f000 f9d3 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
 80a0622:	4604      	mov	r4, r0
 80a0624:	f000 f9d0 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a0628:	1b00      	subs	r0, r0, r4
 80a062a:	42b0      	cmp	r0, r6
 80a062c:	d808      	bhi.n	80a0640 <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
 80a062e:	4628      	mov	r0, r5
 80a0630:	f7ff ff53 	bl	80a04da <_ZN8MAX301055checkEv>
 80a0634:	2801      	cmp	r0, #1
 80a0636:	d004      	beq.n	80a0642 <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
 80a0638:	2001      	movs	r0, #1
 80a063a:	f000 fe93 	bl	80a1364 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
 80a063e:	e7f1      	b.n	80a0624 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a0640:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
 80a0642:	bd70      	pop	{r4, r5, r6, pc}

080a0644 <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a0644:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a0646:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a0648:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a064a:	f7ff ffe5 	bl	80a0618 <_ZN8MAX301059safeCheckEh>
 80a064e:	b120      	cbz	r0, 80a065a <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a0650:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0654:	3306      	adds	r3, #6
 80a0656:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
 80a065a:	bd10      	pop	{r4, pc}

080a065c <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a065c:	22ff      	movs	r2, #255	; 0xff
 80a065e:	7901      	ldrb	r1, [r0, #4]
 80a0660:	f7ff bf13 	b.w	80a048a <_ZN8MAX3010513readRegister8Ehh>

080a0664 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
 80a0664:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a0666:	22fe      	movs	r2, #254	; 0xfe
 80a0668:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
 80a066a:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a066c:	f7ff ff0d 	bl	80a048a <_ZN8MAX3010513readRegister8Ehh>
 80a0670:	71a0      	strb	r0, [r4, #6]
 80a0672:	bd10      	pop	{r4, pc}

080a0674 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a0674:	b570      	push	{r4, r5, r6, lr}
 80a0676:	4604      	mov	r4, r0
 80a0678:	4616      	mov	r6, r2
 80a067a:	461d      	mov	r5, r3
 80a067c:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a067e:	6021      	str	r1, [r4, #0]

  _i2cPort->begin();
 80a0680:	f001 fc0e 	bl	80a1ea0 <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a0684:	4631      	mov	r1, r6
 80a0686:	6820      	ldr	r0, [r4, #0]
 80a0688:	f001 fc06 	bl	80a1e98 <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
 80a068c:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a068e:	4620      	mov	r0, r4
 80a0690:	f7ff ffe4 	bl	80a065c <_ZN8MAX3010510readPartIDEv>
 80a0694:	2815      	cmp	r0, #21
 80a0696:	d104      	bne.n	80a06a2 <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
 80a0698:	4620      	mov	r0, r4
 80a069a:	f7ff ffe3 	bl	80a0664 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
 80a069e:	2001      	movs	r0, #1
 80a06a0:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 80a06a2:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
 80a06a4:	bd70      	pop	{r4, r5, r6, pc}

080a06a6 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a06a6:	b570      	push	{r4, r5, r6, lr}
 80a06a8:	4604      	mov	r4, r0
 80a06aa:	4616      	mov	r6, r2
 80a06ac:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a06ae:	6800      	ldr	r0, [r0, #0]
 80a06b0:	f001 fc0d 	bl	80a1ece <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a06b4:	6820      	ldr	r0, [r4, #0]
 80a06b6:	4631      	mov	r1, r6
 80a06b8:	6803      	ldr	r3, [r0, #0]
 80a06ba:	689b      	ldr	r3, [r3, #8]
 80a06bc:	4798      	blx	r3
  _i2cPort->write(value);
 80a06be:	6820      	ldr	r0, [r4, #0]
 80a06c0:	4629      	mov	r1, r5
 80a06c2:	6803      	ldr	r3, [r0, #0]
 80a06c4:	689a      	ldr	r2, [r3, #8]
 80a06c6:	4790      	blx	r2
  _i2cPort->endTransmission();
 80a06c8:	6820      	ldr	r0, [r4, #0]
}
 80a06ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
 80a06ce:	f001 bc09 	b.w	80a1ee4 <_ZN7TwoWire15endTransmissionEv>

080a06d2 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a06d2:	460b      	mov	r3, r1
 80a06d4:	220c      	movs	r2, #12
 80a06d6:	7901      	ldrb	r1, [r0, #4]
 80a06d8:	f7ff bfe5 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a06dc <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a06dc:	460b      	mov	r3, r1
 80a06de:	220d      	movs	r2, #13
 80a06e0:	7901      	ldrb	r1, [r0, #4]
 80a06e2:	f7ff bfe0 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a06e6 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a06e6:	460b      	mov	r3, r1
 80a06e8:	220e      	movs	r2, #14
 80a06ea:	7901      	ldrb	r1, [r0, #4]
 80a06ec:	f7ff bfdb 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a06f0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a06f0:	460b      	mov	r3, r1
 80a06f2:	2210      	movs	r2, #16
 80a06f4:	7901      	ldrb	r1, [r0, #4]
 80a06f6:	f7ff bfd6 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a06fa <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
 80a06fa:	b510      	push	{r4, lr}
 80a06fc:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a06fe:	7901      	ldrb	r1, [r0, #4]
 80a0700:	2300      	movs	r3, #0
 80a0702:	2204      	movs	r2, #4
 80a0704:	f7ff ffcf 	bl	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a0708:	7921      	ldrb	r1, [r4, #4]
 80a070a:	4620      	mov	r0, r4
 80a070c:	2300      	movs	r3, #0
 80a070e:	2205      	movs	r2, #5
 80a0710:	f7ff ffc9 	bl	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0714:	7921      	ldrb	r1, [r4, #4]
 80a0716:	4620      	mov	r0, r4
}
 80a0718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a071c:	2300      	movs	r3, #0
 80a071e:	2206      	movs	r2, #6
 80a0720:	f7ff bfc1 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a0724 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a0724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0728:	460e      	mov	r6, r1
 80a072a:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a072c:	460a      	mov	r2, r1
 80a072e:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a0730:	4604      	mov	r4, r0
 80a0732:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a0734:	f7ff fea9 	bl	80a048a <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0738:	4028      	ands	r0, r5
 80a073a:	ea47 0300 	orr.w	r3, r7, r0
 80a073e:	4632      	mov	r2, r6
 80a0740:	7921      	ldrb	r1, [r4, #4]
 80a0742:	4620      	mov	r0, r4
}
 80a0744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0748:	f7ff bfad 	b.w	80a06a6 <_ZN8MAX3010514writeRegister8Ehhh>

080a074c <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a074c:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a074e:	22bf      	movs	r2, #191	; 0xbf
 80a0750:	2340      	movs	r3, #64	; 0x40
 80a0752:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a0754:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a0756:	f7ff ffe5 	bl	80a0724 <_ZN8MAX301057bitMaskEhhh>
 80a075a:	f000 f935 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
 80a075e:	4605      	mov	r5, r0
 80a0760:	f000 f932 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a0764:	1b40      	subs	r0, r0, r5
 80a0766:	2863      	cmp	r0, #99	; 0x63
 80a0768:	d80a      	bhi.n	80a0780 <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a076a:	2209      	movs	r2, #9
 80a076c:	7921      	ldrb	r1, [r4, #4]
 80a076e:	4620      	mov	r0, r4
 80a0770:	f7ff fe8b 	bl	80a048a <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a0774:	0643      	lsls	r3, r0, #25
 80a0776:	d503      	bpl.n	80a0780 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a0778:	2001      	movs	r0, #1
 80a077a:	f000 fdf3 	bl	80a1364 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a077e:	e7ef      	b.n	80a0760 <_ZN8MAX301059softResetEv+0x14>
 80a0780:	bd38      	pop	{r3, r4, r5, pc}

080a0782 <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a0782:	460b      	mov	r3, r1
 80a0784:	22f8      	movs	r2, #248	; 0xf8
 80a0786:	2109      	movs	r1, #9
 80a0788:	f7ff bfcc 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a078c <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a078c:	460b      	mov	r3, r1
 80a078e:	229f      	movs	r2, #159	; 0x9f
 80a0790:	210a      	movs	r1, #10
 80a0792:	f7ff bfc7 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a0796 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a0796:	460b      	mov	r3, r1
 80a0798:	22e3      	movs	r2, #227	; 0xe3
 80a079a:	210a      	movs	r1, #10
 80a079c:	f7ff bfc2 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a07a0 <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a07a0:	460b      	mov	r3, r1
 80a07a2:	22fc      	movs	r2, #252	; 0xfc
 80a07a4:	210a      	movs	r1, #10
 80a07a6:	f7ff bfbd 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a07aa <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a07aa:	460b      	mov	r3, r1
 80a07ac:	221f      	movs	r2, #31
 80a07ae:	2108      	movs	r1, #8
 80a07b0:	f7ff bfb8 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a07b4 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a07b4:	2310      	movs	r3, #16
 80a07b6:	22ef      	movs	r2, #239	; 0xef
 80a07b8:	2108      	movs	r1, #8
 80a07ba:	f7ff bfb3 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>

080a07be <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
 80a07be:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a07c0:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
 80a07c2:	2903      	cmp	r1, #3
 80a07c4:	d814      	bhi.n	80a07f0 <_ZN8MAX3010510enableSlotEhh+0x32>
 80a07c6:	e8df f001 	tbb	[pc, r1]
 80a07ca:	0402      	.short	0x0402
 80a07cc:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a07ce:	22f8      	movs	r2, #248	; 0xf8
 80a07d0:	e003      	b.n	80a07da <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a07d2:	011b      	lsls	r3, r3, #4
 80a07d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07d8:	228f      	movs	r2, #143	; 0x8f
 80a07da:	2111      	movs	r1, #17
 80a07dc:	e006      	b.n	80a07ec <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a07de:	22f8      	movs	r2, #248	; 0xf8
 80a07e0:	e003      	b.n	80a07ea <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a07e2:	011b      	lsls	r3, r3, #4
 80a07e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a07e8:	228f      	movs	r2, #143	; 0x8f
 80a07ea:	2112      	movs	r1, #18
 80a07ec:	f7ff bf9a 	b.w	80a0724 <_ZN8MAX301057bitMaskEhhh>
 80a07f0:	4770      	bx	lr

080a07f2 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a07f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a07f6:	4616      	mov	r6, r2
 80a07f8:	ad08      	add	r5, sp, #32
 80a07fa:	4604      	mov	r4, r0
 80a07fc:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
 80a0800:	4688      	mov	r8, r1
 80a0802:	461f      	mov	r7, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a0804:	f7ff ffa2 	bl	80a074c <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a0808:	2e01      	cmp	r6, #1
 80a080a:	d101      	bne.n	80a0810 <_ZN8MAX301055setupEhhhiii+0x1e>
 80a080c:	2100      	movs	r1, #0
 80a080e:	e012      	b.n	80a0836 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a0810:	2e02      	cmp	r6, #2
 80a0812:	d101      	bne.n	80a0818 <_ZN8MAX301055setupEhhhiii+0x26>
 80a0814:	2120      	movs	r1, #32
 80a0816:	e00e      	b.n	80a0836 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a0818:	2e04      	cmp	r6, #4
 80a081a:	d101      	bne.n	80a0820 <_ZN8MAX301055setupEhhhiii+0x2e>
 80a081c:	2140      	movs	r1, #64	; 0x40
 80a081e:	e00a      	b.n	80a0836 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a0820:	2e08      	cmp	r6, #8
 80a0822:	d101      	bne.n	80a0828 <_ZN8MAX301055setupEhhhiii+0x36>
 80a0824:	2160      	movs	r1, #96	; 0x60
 80a0826:	e006      	b.n	80a0836 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a0828:	2e10      	cmp	r6, #16
 80a082a:	d101      	bne.n	80a0830 <_ZN8MAX301055setupEhhhiii+0x3e>
 80a082c:	2180      	movs	r1, #128	; 0x80
 80a082e:	e002      	b.n	80a0836 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a0830:	2e20      	cmp	r6, #32
 80a0832:	d1f3      	bne.n	80a081c <_ZN8MAX301055setupEhhhiii+0x2a>
 80a0834:	21a0      	movs	r1, #160	; 0xa0
 80a0836:	4620      	mov	r0, r4
 80a0838:	f7ff ffb7 	bl	80a07aa <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a083c:	4620      	mov	r0, r4
 80a083e:	f7ff ffb9 	bl	80a07b4 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a0842:	2f03      	cmp	r7, #3
 80a0844:	d101      	bne.n	80a084a <_ZN8MAX301055setupEhhhiii+0x58>
 80a0846:	2107      	movs	r1, #7
 80a0848:	e003      	b.n	80a0852 <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a084a:	2f02      	cmp	r7, #2
 80a084c:	bf0c      	ite	eq
 80a084e:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a0850:	2102      	movne	r1, #2
 80a0852:	4620      	mov	r0, r4
 80a0854:	f7ff ff95 	bl	80a0782 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a0858:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a085c:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a085e:	da01      	bge.n	80a0864 <_ZN8MAX301055setupEhhhiii+0x72>
 80a0860:	2100      	movs	r1, #0
 80a0862:	e00b      	b.n	80a087c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a0864:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a0868:	da01      	bge.n	80a086e <_ZN8MAX301055setupEhhhiii+0x7c>
 80a086a:	2120      	movs	r1, #32
 80a086c:	e006      	b.n	80a087c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a086e:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a0872:	da01      	bge.n	80a0878 <_ZN8MAX301055setupEhhhiii+0x86>
 80a0874:	2140      	movs	r1, #64	; 0x40
 80a0876:	e001      	b.n	80a087c <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a0878:	d1f2      	bne.n	80a0860 <_ZN8MAX301055setupEhhhiii+0x6e>
 80a087a:	2160      	movs	r1, #96	; 0x60
 80a087c:	4620      	mov	r0, r4
 80a087e:	f7ff ff85 	bl	80a078c <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a0882:	2d63      	cmp	r5, #99	; 0x63
 80a0884:	dc01      	bgt.n	80a088a <_ZN8MAX301055setupEhhhiii+0x98>
 80a0886:	2100      	movs	r1, #0
 80a0888:	e01e      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a088a:	2dc7      	cmp	r5, #199	; 0xc7
 80a088c:	dc01      	bgt.n	80a0892 <_ZN8MAX301055setupEhhhiii+0xa0>
 80a088e:	2104      	movs	r1, #4
 80a0890:	e01a      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a0892:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 80a0896:	da01      	bge.n	80a089c <_ZN8MAX301055setupEhhhiii+0xaa>
 80a0898:	2108      	movs	r1, #8
 80a089a:	e015      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a089c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 80a08a0:	da01      	bge.n	80a08a6 <_ZN8MAX301055setupEhhhiii+0xb4>
 80a08a2:	210c      	movs	r1, #12
 80a08a4:	e010      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a08a6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80a08aa:	da01      	bge.n	80a08b0 <_ZN8MAX301055setupEhhhiii+0xbe>
 80a08ac:	2110      	movs	r1, #16
 80a08ae:	e00b      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a08b0:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80a08b4:	da01      	bge.n	80a08ba <_ZN8MAX301055setupEhhhiii+0xc8>
 80a08b6:	2114      	movs	r1, #20
 80a08b8:	e006      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a08ba:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 80a08be:	da01      	bge.n	80a08c4 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a08c0:	2118      	movs	r1, #24
 80a08c2:	e001      	b.n	80a08c8 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a08c4:	d1df      	bne.n	80a0886 <_ZN8MAX301055setupEhhhiii+0x94>
 80a08c6:	211c      	movs	r1, #28
 80a08c8:	4620      	mov	r0, r4
 80a08ca:	f7ff ff64 	bl	80a0796 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a08ce:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a08d2:	dc01      	bgt.n	80a08d8 <_ZN8MAX301055setupEhhhiii+0xe6>
 80a08d4:	2100      	movs	r1, #0
 80a08d6:	e00e      	b.n	80a08f6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a08d8:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a08dc:	dc01      	bgt.n	80a08e2 <_ZN8MAX301055setupEhhhiii+0xf0>
 80a08de:	2101      	movs	r1, #1
 80a08e0:	e009      	b.n	80a08f6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a08e2:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a08e6:	dc01      	bgt.n	80a08ec <_ZN8MAX301055setupEhhhiii+0xfa>
 80a08e8:	2102      	movs	r1, #2
 80a08ea:	e004      	b.n	80a08f6 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a08ec:	f240 139b 	movw	r3, #411	; 0x19b
 80a08f0:	4599      	cmp	r9, r3
 80a08f2:	d1ef      	bne.n	80a08d4 <_ZN8MAX301055setupEhhhiii+0xe2>
 80a08f4:	2103      	movs	r1, #3
 80a08f6:	4620      	mov	r0, r4
 80a08f8:	f7ff ff52 	bl	80a07a0 <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
 80a08fc:	4641      	mov	r1, r8
 80a08fe:	4620      	mov	r0, r4
 80a0900:	f7ff fee7 	bl	80a06d2 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a0904:	4641      	mov	r1, r8
 80a0906:	4620      	mov	r0, r4
 80a0908:	f7ff fee8 	bl	80a06dc <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a090c:	4641      	mov	r1, r8
 80a090e:	4620      	mov	r0, r4
 80a0910:	f7ff fee9 	bl	80a06e6 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a0914:	4641      	mov	r1, r8
 80a0916:	4620      	mov	r0, r4
 80a0918:	f7ff feea 	bl	80a06f0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
 80a091c:	2201      	movs	r2, #1
 80a091e:	4611      	mov	r1, r2
 80a0920:	4620      	mov	r0, r4
 80a0922:	f7ff ff4c 	bl	80a07be <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a0926:	2f01      	cmp	r7, #1
 80a0928:	d90c      	bls.n	80a0944 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a092a:	2320      	movs	r3, #32
 80a092c:	228f      	movs	r2, #143	; 0x8f
 80a092e:	2111      	movs	r1, #17
 80a0930:	4620      	mov	r0, r4
 80a0932:	f7ff fef7 	bl	80a0724 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a0936:	2f02      	cmp	r7, #2
 80a0938:	d004      	beq.n	80a0944 <_ZN8MAX301055setupEhhhiii+0x152>
 80a093a:	2203      	movs	r2, #3
 80a093c:	4611      	mov	r1, r2
 80a093e:	4620      	mov	r0, r4
 80a0940:	f7ff ff3d 	bl	80a07be <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a0944:	4620      	mov	r0, r4
}
 80a0946:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a094a:	f7ff bed6 	b.w	80a06fa <_ZN8MAX301059clearFIFOEv>

080a094e <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
 80a094e:	f000 b803 	b.w	80a0958 <HAL_Pin_Map>

080a0952 <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
 80a0952:	f000 b801 	b.w	80a0958 <HAL_Pin_Map>
	...

080a0958 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <HAL_Pin_Map+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	681b      	ldr	r3, [r3, #0]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601b0 	.word	0x080601b0

080a0968 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <HAL_Pin_Mode+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	689b      	ldr	r3, [r3, #8]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601b0 	.word	0x080601b0

080a0978 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <HAL_Get_Pin_Mode+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	68db      	ldr	r3, [r3, #12]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601b0 	.word	0x080601b0

080a0988 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <HAL_GPIO_Read+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	695b      	ldr	r3, [r3, #20]
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601b0 	.word	0x080601b0

080a0998 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <HAL_SPI_Init+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	69db      	ldr	r3, [r3, #28]
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601b4 	.word	0x080601b4

080a09a8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <HAL_SPI_Is_Enabled+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6a1b      	ldr	r3, [r3, #32]
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601b4 	.word	0x080601b4

080a09b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <HAL_RNG_GetRandomNumber+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	685b      	ldr	r3, [r3, #4]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	0806019c 	.word	0x0806019c

080a09c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	695b      	ldr	r3, [r3, #20]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	0806019c 	.word	0x0806019c

080a09d8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <HAL_RTC_Get_UnixTime+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	69db      	ldr	r3, [r3, #28]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	0806019c 	.word	0x0806019c

080a09e8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <HAL_RTC_Time_Is_Valid+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	0806019c 	.word	0x0806019c

080a09f8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <os_mutex_create+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601d0 	.word	0x080601d0

080a0a08 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <HAL_USART_Init+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	699b      	ldr	r3, [r3, #24]
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601c4 	.word	0x080601c4

080a0a18 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <HAL_USART_Write_Data+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601c4 	.word	0x080601c4

080a0a28 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <HAL_USART_Available_Data+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601c4 	.word	0x080601c4

080a0a38 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_USART_Read_Data+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601c4 	.word	0x080601c4

080a0a48 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_USART_Peek_Data+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601c4 	.word	0x080601c4

080a0a58 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_USART_Flush_Data+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601c4 	.word	0x080601c4

080a0a68 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_USART_Is_Enabled+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601c4 	.word	0x080601c4

080a0a78 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601c4 	.word	0x080601c4

080a0a88 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <HAL_I2C_Set_Speed+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601ac 	.word	0x080601ac

080a0a98 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <HAL_I2C_Begin+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601ac 	.word	0x080601ac

080a0aa8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <HAL_I2C_Request_Data+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601ac 	.word	0x080601ac

080a0ab8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <HAL_I2C_Begin_Transmission+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601ac 	.word	0x080601ac

080a0ac8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <HAL_I2C_End_Transmission+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601ac 	.word	0x080601ac

080a0ad8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <HAL_I2C_Write_Data+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601ac 	.word	0x080601ac

080a0ae8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <HAL_I2C_Available_Data+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601ac 	.word	0x080601ac

080a0af8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <HAL_I2C_Read_Data+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601ac 	.word	0x080601ac

080a0b08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <HAL_I2C_Peek_Data+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601ac 	.word	0x080601ac

080a0b18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <HAL_I2C_Flush_Data+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601ac 	.word	0x080601ac

080a0b28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <HAL_I2C_Is_Enabled+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601ac 	.word	0x080601ac

080a0b38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b03      	ldr	r3, [pc, #12]	; (80a0b48 <HAL_I2C_Init+0x10>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b42:	9301      	str	r3, [sp, #4]
 80a0b44:	bd08      	pop	{r3, pc}
 80a0b46:	0000      	.short	0x0000
 80a0b48:	080601ac 	.word	0x080601ac

080a0b4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <HAL_USB_USART_Init+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	681b      	ldr	r3, [r3, #0]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601d8 	.word	0x080601d8

080a0b5c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <HAL_USB_USART_Begin+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	685b      	ldr	r3, [r3, #4]
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601d8 	.word	0x080601d8

080a0b6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <HAL_USB_USART_Available_Data+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	691b      	ldr	r3, [r3, #16]
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601d8 	.word	0x080601d8

080a0b7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	695b      	ldr	r3, [r3, #20]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601d8 	.word	0x080601d8

080a0b8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_USB_USART_Receive_Data+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	699b      	ldr	r3, [r3, #24]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601d8 	.word	0x080601d8

080a0b9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <HAL_USB_USART_Send_Data+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	69db      	ldr	r3, [r3, #28]
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601d8 	.word	0x080601d8

080a0bac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <HAL_USB_USART_Flush_Data+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	6a1b      	ldr	r3, [r3, #32]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601d8 	.word	0x080601d8

080a0bbc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <inet_gethostbyname+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601c0 	.word	0x080601c0

080a0bcc <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <system_mode+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	681b      	ldr	r3, [r3, #0]
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601a4 	.word	0x080601a4

080a0bdc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <set_system_mode+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	685b      	ldr	r3, [r3, #4]
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601a4 	.word	0x080601a4

080a0bec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <system_delay_ms+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	695b      	ldr	r3, [r3, #20]
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601a4 	.word	0x080601a4

080a0bfc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <application_thread_current+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601a4 	.word	0x080601a4

080a0c0c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <application_thread_invoke+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601a4 	.word	0x080601a4

080a0c1c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <system_thread_get_state+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601a4 	.word	0x080601a4

080a0c2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b03      	ldr	r3, [pc, #12]	; (80a0c3c <system_ctrl_set_app_request_handler+0x10>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0c36:	9301      	str	r3, [sp, #4]
 80a0c38:	bd08      	pop	{r3, pc}
 80a0c3a:	0000      	.short	0x0000
 80a0c3c:	080601a4 	.word	0x080601a4

080a0c40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b03      	ldr	r3, [pc, #12]	; (80a0c50 <system_ctrl_set_result+0x10>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0c4a:	9301      	str	r3, [sp, #4]
 80a0c4c:	bd08      	pop	{r3, pc}
 80a0c4e:	0000      	.short	0x0000
 80a0c50:	080601a4 	.word	0x080601a4

080a0c54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <network_connect+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	685b      	ldr	r3, [r3, #4]
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601c8 	.word	0x080601c8

080a0c64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <network_connecting+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	689b      	ldr	r3, [r3, #8]
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601c8 	.word	0x080601c8

080a0c74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <network_disconnect+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	68db      	ldr	r3, [r3, #12]
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601c8 	.word	0x080601c8

080a0c84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <network_ready+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	691b      	ldr	r3, [r3, #16]
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080601c8 	.word	0x080601c8

080a0c94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <network_on+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	695b      	ldr	r3, [r3, #20]
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080601c8 	.word	0x080601c8

080a0ca4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <network_off+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	699b      	ldr	r3, [r3, #24]
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080601c8 	.word	0x080601c8

080a0cb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <network_listen+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	69db      	ldr	r3, [r3, #28]
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080601c8 	.word	0x080601c8

080a0cc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <network_listening+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	6a1b      	ldr	r3, [r3, #32]
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601c8 	.word	0x080601c8

080a0cd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <network_set_listen_timeout+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601c8 	.word	0x080601c8

080a0ce4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <network_get_listen_timeout+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601c8 	.word	0x080601c8

080a0cf4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <spark_process+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	689b      	ldr	r3, [r3, #8]
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080601cc 	.word	0x080601cc

080a0d04 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <spark_cloud_flag_connected+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	695b      	ldr	r3, [r3, #20]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601cc 	.word	0x080601cc

080a0d14 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <spark_send_event+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	6a1b      	ldr	r3, [r3, #32]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601cc 	.word	0x080601cc

080a0d24 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <spark_sync_time_pending+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601cc 	.word	0x080601cc

080a0d34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601cc 	.word	0x080601cc

080a0d44 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <malloc+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	681b      	ldr	r3, [r3, #0]
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601a0 	.word	0x080601a0

080a0d54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <free+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	685b      	ldr	r3, [r3, #4]
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601a0 	.word	0x080601a0

080a0d64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <realloc+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	689b      	ldr	r3, [r3, #8]
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601a0 	.word	0x080601a0

080a0d74 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <abort+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601a0 	.word	0x080601a0

080a0d84 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <_malloc_r+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601a0 	.word	0x080601a0

080a0d94 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0d94:	4770      	bx	lr

080a0d96 <_ZN8SPIClassD0Ev>:
 80a0d96:	b510      	push	{r4, lr}
 80a0d98:	4604      	mov	r4, r0
 80a0d9a:	2110      	movs	r1, #16
 80a0d9c:	f001 fa11 	bl	80a21c2 <_ZdlPvj>
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	bd10      	pop	{r4, pc}

080a0da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0da4:	b570      	push	{r4, r5, r6, lr}
 80a0da6:	4604      	mov	r4, r0
 80a0da8:	460e      	mov	r6, r1
 80a0daa:	4b07      	ldr	r3, [pc, #28]	; (80a0dc8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0dac:	2500      	movs	r5, #0
 80a0dae:	6003      	str	r3, [r0, #0]
 80a0db0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0db4:	f7ff fe20 	bl	80a09f8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0db8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0dba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0dbc:	f7ff fdec 	bl	80a0998 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0dc0:	60a5      	str	r5, [r4, #8]
}
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	bd70      	pop	{r4, r5, r6, pc}
 80a0dc6:	bf00      	nop
 80a0dc8:	080a34cc 	.word	0x080a34cc

080a0dcc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0dcc:	7900      	ldrb	r0, [r0, #4]
 80a0dce:	f7ff bdeb 	b.w	80a09a8 <HAL_SPI_Is_Enabled>
	...

080a0dd4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0dd8:	4b03      	ldr	r3, [pc, #12]	; (80a0de8 <_GLOBAL__sub_I_System+0x14>)
 80a0dda:	2000      	movs	r0, #0
 80a0ddc:	7018      	strb	r0, [r3, #0]
 80a0dde:	8058      	strh	r0, [r3, #2]
 80a0de0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0de2:	f7ff befb 	b.w	80a0bdc <set_system_mode>
 80a0de6:	bf00      	nop
 80a0de8:	2000011c 	.word	0x2000011c

080a0dec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0dec:	b510      	push	{r4, lr}
 80a0dee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0df0:	f002 fae3 	bl	80a33ba <strlen>
 80a0df4:	3801      	subs	r0, #1
 80a0df6:	1823      	adds	r3, r4, r0
 80a0df8:	4620      	mov	r0, r4
	while(i<j){
 80a0dfa:	4298      	cmp	r0, r3
 80a0dfc:	d206      	bcs.n	80a0e0c <_Z11str_reversePc+0x20>
		c = *i;
 80a0dfe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0e00:	7819      	ldrb	r1, [r3, #0]
 80a0e02:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0e06:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a0e0a:	e7f6      	b.n	80a0dfa <_Z11str_reversePc+0xe>
 80a0e0c:	bd10      	pop	{r4, pc}

080a0e0e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0e0e:	b570      	push	{r4, r5, r6, lr}
 80a0e10:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0e12:	1e91      	subs	r1, r2, #2
 80a0e14:	2922      	cmp	r1, #34	; 0x22
 80a0e16:	d820      	bhi.n	80a0e5a <ultoa+0x4c>
 80a0e18:	4625      	mov	r5, r4
 80a0e1a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0e1c:	b910      	cbnz	r0, 80a0e24 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0e1e:	4423      	add	r3, r4
            *ptr++ = '0';
 80a0e20:	2230      	movs	r2, #48	; 0x30
 80a0e22:	e00e      	b.n	80a0e42 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0e24:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0e28:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0e2c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0e2e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a0e30:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a0e34:	bf94      	ite	ls
 80a0e36:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a0e38:	3157      	addhi	r1, #87	; 0x57
 80a0e3a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a0e3e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0e40:	e7eb      	b.n	80a0e1a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0e42:	4299      	cmp	r1, r3
 80a0e44:	d202      	bcs.n	80a0e4c <ultoa+0x3e>
            *ptr++ = '0';
 80a0e46:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0e4a:	e7fa      	b.n	80a0e42 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a0e4c:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a0e4e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a0e50:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a0e52:	f7ff ffcb 	bl	80a0dec <_Z11str_reversePc>
	return buffer;
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a0e5a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a0e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e60 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a0e60:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e64:	4680      	mov	r8, r0
 80a0e66:	460d      	mov	r5, r1
 80a0e68:	4617      	mov	r7, r2
 80a0e6a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a0e6c:	2200      	movs	r2, #0
 80a0e6e:	2300      	movs	r3, #0
 80a0e70:	4640      	mov	r0, r8
 80a0e72:	4629      	mov	r1, r5
 80a0e74:	f001 ff1c 	bl	80a2cb0 <__aeabi_dcmplt>
 80a0e78:	b120      	cbz	r0, 80a0e84 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a0e7a:	232d      	movs	r3, #45	; 0x2d
 80a0e7c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a0e7e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a0e82:	3601      	adds	r6, #1
 80a0e84:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a0e86:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a0e88:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a0e8a:	b2d9      	uxtb	r1, r3
 80a0e8c:	428f      	cmp	r7, r1
 80a0e8e:	d902      	bls.n	80a0e96 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a0e90:	4354      	muls	r4, r2
 80a0e92:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a0e94:	e7f9      	b.n	80a0e8a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a0e96:	4620      	mov	r0, r4
 80a0e98:	f001 fc32 	bl	80a2700 <__aeabi_i2d>
 80a0e9c:	4642      	mov	r2, r8
 80a0e9e:	462b      	mov	r3, r5
 80a0ea0:	f001 fc94 	bl	80a27cc <__aeabi_dmul>
 80a0ea4:	4682      	mov	sl, r0
 80a0ea6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a0ea8:	f002 f886 	bl	80a2fb8 <__aeabi_d2ulz>
 80a0eac:	4680      	mov	r8, r0
 80a0eae:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a0eb0:	f001 fc56 	bl	80a2760 <__aeabi_ul2d>
 80a0eb4:	4602      	mov	r2, r0
 80a0eb6:	460b      	mov	r3, r1
 80a0eb8:	4650      	mov	r0, sl
 80a0eba:	4659      	mov	r1, fp
 80a0ebc:	f001 fad2 	bl	80a2464 <__aeabi_dsub>
 80a0ec0:	2200      	movs	r2, #0
 80a0ec2:	4b17      	ldr	r3, [pc, #92]	; (80a0f20 <_Z4dtoadhPc+0xc0>)
 80a0ec4:	f001 ff08 	bl	80a2cd8 <__aeabi_dcmpge>
 80a0ec8:	b118      	cbz	r0, 80a0ed2 <_Z4dtoadhPc+0x72>
        fixed++;
 80a0eca:	f118 0801 	adds.w	r8, r8, #1
 80a0ece:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a0ed2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a0ed4:	4622      	mov	r2, r4
 80a0ed6:	462b      	mov	r3, r5
 80a0ed8:	4640      	mov	r0, r8
 80a0eda:	4649      	mov	r1, r9
 80a0edc:	f002 f854 	bl	80a2f88 <__aeabi_uldivmod>
 80a0ee0:	2301      	movs	r3, #1
 80a0ee2:	220a      	movs	r2, #10
 80a0ee4:	4631      	mov	r1, r6
 80a0ee6:	f7ff ff92 	bl	80a0e0e <ultoa>
    if (prec) {
 80a0eea:	b1af      	cbz	r7, 80a0f18 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a0eec:	4630      	mov	r0, r6
 80a0eee:	f002 fa64 	bl	80a33ba <strlen>
        *sout++ = '.';
 80a0ef2:	232e      	movs	r3, #46	; 0x2e
 80a0ef4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a0ef6:	3001      	adds	r0, #1
 80a0ef8:	4406      	add	r6, r0
 80a0efa:	4622      	mov	r2, r4
 80a0efc:	462b      	mov	r3, r5
 80a0efe:	4640      	mov	r0, r8
 80a0f00:	4649      	mov	r1, r9
 80a0f02:	f002 f841 	bl	80a2f88 <__aeabi_uldivmod>
 80a0f06:	463b      	mov	r3, r7
 80a0f08:	4610      	mov	r0, r2
 80a0f0a:	4631      	mov	r1, r6
 80a0f0c:	220a      	movs	r2, #10
    }
}
 80a0f0e:	b001      	add	sp, #4
 80a0f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a0f14:	f7ff bf7b 	b.w	80a0e0e <ultoa>
    }
}
 80a0f18:	b001      	add	sp, #4
 80a0f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f1e:	bf00      	nop
 80a0f20:	3fe00000 	.word	0x3fe00000

080a0f24 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0f24:	b510      	push	{r4, lr}
 80a0f26:	4604      	mov	r4, r0
{
	free(buffer);
 80a0f28:	6800      	ldr	r0, [r0, #0]
 80a0f2a:	f7ff ff13 	bl	80a0d54 <free>
}
 80a0f2e:	4620      	mov	r0, r4
 80a0f30:	bd10      	pop	{r4, pc}

080a0f32 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0f32:	b510      	push	{r4, lr}
 80a0f34:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0f36:	6800      	ldr	r0, [r0, #0]
 80a0f38:	b108      	cbz	r0, 80a0f3e <_ZN6String10invalidateEv+0xc>
 80a0f3a:	f7ff ff0b 	bl	80a0d54 <free>
	buffer = NULL;
 80a0f3e:	2300      	movs	r3, #0
 80a0f40:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0f42:	60a3      	str	r3, [r4, #8]
 80a0f44:	6063      	str	r3, [r4, #4]
 80a0f46:	bd10      	pop	{r4, pc}

080a0f48 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0f48:	b538      	push	{r3, r4, r5, lr}
 80a0f4a:	4604      	mov	r4, r0
 80a0f4c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0f4e:	6800      	ldr	r0, [r0, #0]
 80a0f50:	3101      	adds	r1, #1
 80a0f52:	f7ff ff07 	bl	80a0d64 <realloc>
	if (newbuffer) {
 80a0f56:	b110      	cbz	r0, 80a0f5e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0f58:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0f5c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0f5e:	bd38      	pop	{r3, r4, r5, pc}

080a0f60 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0f60:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0f62:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0f64:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0f66:	b113      	cbz	r3, 80a0f6e <_ZN6String7reserveEj+0xe>
 80a0f68:	6843      	ldr	r3, [r0, #4]
 80a0f6a:	428b      	cmp	r3, r1
 80a0f6c:	d207      	bcs.n	80a0f7e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	f7ff ffea 	bl	80a0f48 <_ZN6String12changeBufferEj>
 80a0f74:	b120      	cbz	r0, 80a0f80 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0f76:	68a3      	ldr	r3, [r4, #8]
 80a0f78:	b90b      	cbnz	r3, 80a0f7e <_ZN6String7reserveEj+0x1e>
 80a0f7a:	6822      	ldr	r2, [r4, #0]
 80a0f7c:	7013      	strb	r3, [r2, #0]
 80a0f7e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0f80:	bd10      	pop	{r4, pc}

080a0f82 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f82:	b570      	push	{r4, r5, r6, lr}
 80a0f84:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0f86:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f88:	4604      	mov	r4, r0
 80a0f8a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0f8c:	f7ff ffe8 	bl	80a0f60 <_ZN6String7reserveEj>
 80a0f90:	b918      	cbnz	r0, 80a0f9a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0f92:	4620      	mov	r0, r4
 80a0f94:	f7ff ffcd 	bl	80a0f32 <_ZN6String10invalidateEv>
		return *this;
 80a0f98:	e009      	b.n	80a0fae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0f9a:	462a      	mov	r2, r5
 80a0f9c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0f9e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0fa0:	6820      	ldr	r0, [r4, #0]
 80a0fa2:	f002 f9b3 	bl	80a330c <memcpy>
	buffer[len] = 0;
 80a0fa6:	6822      	ldr	r2, [r4, #0]
 80a0fa8:	68a3      	ldr	r3, [r4, #8]
 80a0faa:	2100      	movs	r1, #0
 80a0fac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	bd70      	pop	{r4, r5, r6, pc}

080a0fb2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0fb2:	b538      	push	{r3, r4, r5, lr}
 80a0fb4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0fb6:	460c      	mov	r4, r1
 80a0fb8:	b141      	cbz	r1, 80a0fcc <_ZN6StringaSEPKc+0x1a>
 80a0fba:	4608      	mov	r0, r1
 80a0fbc:	f002 f9fd 	bl	80a33ba <strlen>
 80a0fc0:	4621      	mov	r1, r4
 80a0fc2:	4602      	mov	r2, r0
 80a0fc4:	4628      	mov	r0, r5
 80a0fc6:	f7ff ffdc 	bl	80a0f82 <_ZN6String4copyEPKcj>
 80a0fca:	e001      	b.n	80a0fd0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0fcc:	f7ff ffb1 	bl	80a0f32 <_ZN6String10invalidateEv>

	return *this;
}
 80a0fd0:	4628      	mov	r0, r5
 80a0fd2:	bd38      	pop	{r3, r4, r5, pc}

080a0fd4 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a0fd4:	b530      	push	{r4, r5, lr}
 80a0fd6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0fd8:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a0fda:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0fdc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0fde:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0fe0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0fe2:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a0fe4:	b2d5      	uxtb	r5, r2
 80a0fe6:	4608      	mov	r0, r1
 80a0fe8:	f001 fb9c 	bl	80a2724 <__aeabi_f2d>
 80a0fec:	ab01      	add	r3, sp, #4
 80a0fee:	462a      	mov	r2, r5
 80a0ff0:	f7ff ff36 	bl	80a0e60 <_Z4dtoadhPc>
        *this = buf;
 80a0ff4:	a901      	add	r1, sp, #4
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	f7ff ffdb 	bl	80a0fb2 <_ZN6StringaSEPKc>
}
 80a0ffc:	4620      	mov	r0, r4
 80a0ffe:	b00b      	add	sp, #44	; 0x2c
 80a1000:	bd30      	pop	{r4, r5, pc}

080a1002 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1004:	4606      	mov	r6, r0
 80a1006:	460d      	mov	r5, r1
 80a1008:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a100a:	2400      	movs	r4, #0
  while (size--) {
 80a100c:	42bd      	cmp	r5, r7
 80a100e:	d00c      	beq.n	80a102a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1010:	6833      	ldr	r3, [r6, #0]
 80a1012:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1016:	689b      	ldr	r3, [r3, #8]
 80a1018:	4630      	mov	r0, r6
 80a101a:	4798      	blx	r3
     if (chunk>=0)
 80a101c:	2800      	cmp	r0, #0
 80a101e:	db01      	blt.n	80a1024 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1020:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1022:	e7f3      	b.n	80a100c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1024:	2c00      	cmp	r4, #0
 80a1026:	bf08      	it	eq
 80a1028:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a102a:	4620      	mov	r0, r4
 80a102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a102e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a102e:	b570      	push	{r4, r5, r6, lr}
 80a1030:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1032:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1034:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1036:	b149      	cbz	r1, 80a104c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1038:	f002 f9bf 	bl	80a33ba <strlen>
 80a103c:	682b      	ldr	r3, [r5, #0]
 80a103e:	4602      	mov	r2, r0
 80a1040:	4621      	mov	r1, r4
 80a1042:	4628      	mov	r0, r5
    }
 80a1044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1048:	68db      	ldr	r3, [r3, #12]
 80a104a:	4718      	bx	r3
    }
 80a104c:	bd70      	pop	{r4, r5, r6, pc}

080a104e <_ZN5Print5printEPKc>:
 80a104e:	b508      	push	{r3, lr}
 80a1050:	f7ff ffed 	bl	80a102e <_ZN5Print5writeEPKc>
 80a1054:	bd08      	pop	{r3, pc}

080a1056 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1056:	6803      	ldr	r3, [r0, #0]
 80a1058:	689b      	ldr	r3, [r3, #8]
 80a105a:	4718      	bx	r3

080a105c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a105c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a105e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1060:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1062:	f7ff fff8 	bl	80a1056 <_ZN5Print5printEc>
  n += print('\n');
 80a1066:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1068:	4604      	mov	r4, r0
  n += print('\n');
 80a106a:	4628      	mov	r0, r5
 80a106c:	f7ff fff3 	bl	80a1056 <_ZN5Print5printEc>
  return n;
}
 80a1070:	4420      	add	r0, r4
 80a1072:	bd38      	pop	{r3, r4, r5, pc}

080a1074 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1074:	b538      	push	{r3, r4, r5, lr}
 80a1076:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1078:	f7ff ffd9 	bl	80a102e <_ZN5Print5writeEPKc>
 80a107c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a107e:	4628      	mov	r0, r5
 80a1080:	f7ff ffec 	bl	80a105c <_ZN5Print7printlnEv>
  return n;
}
 80a1084:	4420      	add	r0, r4
 80a1086:	bd38      	pop	{r3, r4, r5, pc}

080a1088 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1088:	2a01      	cmp	r2, #1
 80a108a:	bf98      	it	ls
 80a108c:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a108e:	b530      	push	{r4, r5, lr}
 80a1090:	460b      	mov	r3, r1
 80a1092:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1094:	2100      	movs	r1, #0
 80a1096:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a109a:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a109e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a10a2:	fb05 3312 	mls	r3, r5, r2, r3
 80a10a6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a10a8:	2b09      	cmp	r3, #9
 80a10aa:	bf94      	ite	ls
 80a10ac:	3330      	addls	r3, #48	; 0x30
 80a10ae:	3337      	addhi	r3, #55	; 0x37
 80a10b0:	b2db      	uxtb	r3, r3
 80a10b2:	4621      	mov	r1, r4
 80a10b4:	f804 3901 	strb.w	r3, [r4], #-1
 80a10b8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a10ba:	2d00      	cmp	r5, #0
 80a10bc:	d1ef      	bne.n	80a109e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a10be:	f7ff ffb6 	bl	80a102e <_ZN5Print5writeEPKc>
}
 80a10c2:	b00b      	add	sp, #44	; 0x2c
 80a10c4:	bd30      	pop	{r4, r5, pc}

080a10c6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a10c6:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a10c8:	b922      	cbnz	r2, 80a10d4 <_ZN5Print5printEmi+0xe>
 80a10ca:	6803      	ldr	r3, [r0, #0]
 80a10cc:	b2c9      	uxtb	r1, r1
 80a10ce:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a10d0:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a10d2:	4718      	bx	r3
  else return printNumber(n, base);
 80a10d4:	b2d2      	uxtb	r2, r2
}
 80a10d6:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a10d8:	f7ff bfd6 	b.w	80a1088 <_ZN5Print11printNumberEmh>

080a10dc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a10dc:	f7ff bff3 	b.w	80a10c6 <_ZN5Print5printEmi>

080a10e0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a10e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a10e4:	4607      	mov	r7, r0
 80a10e6:	460e      	mov	r6, r1
  if (base == 0) {
 80a10e8:	4615      	mov	r5, r2
 80a10ea:	b92a      	cbnz	r2, 80a10f8 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a10ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a10f0:	6803      	ldr	r3, [r0, #0]
 80a10f2:	b2c9      	uxtb	r1, r1
 80a10f4:	689b      	ldr	r3, [r3, #8]
 80a10f6:	4718      	bx	r3
  } else if (base == 10) {
 80a10f8:	2a0a      	cmp	r2, #10
 80a10fa:	d102      	bne.n	80a1102 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a10fc:	2900      	cmp	r1, #0
 80a10fe:	da01      	bge.n	80a1104 <_ZN5Print5printEli+0x24>
 80a1100:	e004      	b.n	80a110c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1102:	b2d2      	uxtb	r2, r2
  }
}
 80a1104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1108:	f7ff bfbe 	b.w	80a1088 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a110c:	212d      	movs	r1, #45	; 0x2d
 80a110e:	f7ff ffa2 	bl	80a1056 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1112:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1114:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1116:	4271      	negs	r1, r6
 80a1118:	4638      	mov	r0, r7
 80a111a:	f7ff ffb5 	bl	80a1088 <_ZN5Print11printNumberEmh>
 80a111e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1124 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1124:	f7ff bfdc 	b.w	80a10e0 <_ZN5Print5printEli>

080a1128 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a112c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a112e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1130:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1132:	4617      	mov	r7, r2
 80a1134:	461e      	mov	r6, r3
 80a1136:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a113a:	f001 fde1 	bl	80a2d00 <__aeabi_dcmpun>
 80a113e:	b108      	cbz	r0, 80a1144 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1140:	4947      	ldr	r1, [pc, #284]	; (80a1260 <_ZN5Print10printFloatEdh+0x138>)
 80a1142:	e012      	b.n	80a116a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1144:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1148:	f04f 32ff 	mov.w	r2, #4294967295
 80a114c:	4b45      	ldr	r3, [pc, #276]	; (80a1264 <_ZN5Print10printFloatEdh+0x13c>)
 80a114e:	4638      	mov	r0, r7
 80a1150:	4621      	mov	r1, r4
 80a1152:	f001 fdd5 	bl	80a2d00 <__aeabi_dcmpun>
 80a1156:	b968      	cbnz	r0, 80a1174 <_ZN5Print10printFloatEdh+0x4c>
 80a1158:	f04f 32ff 	mov.w	r2, #4294967295
 80a115c:	4b41      	ldr	r3, [pc, #260]	; (80a1264 <_ZN5Print10printFloatEdh+0x13c>)
 80a115e:	4638      	mov	r0, r7
 80a1160:	4621      	mov	r1, r4
 80a1162:	f001 fdaf 	bl	80a2cc4 <__aeabi_dcmple>
 80a1166:	b928      	cbnz	r0, 80a1174 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1168:	493f      	ldr	r1, [pc, #252]	; (80a1268 <_ZN5Print10printFloatEdh+0x140>)
 80a116a:	4640      	mov	r0, r8
 80a116c:	f7ff ff5f 	bl	80a102e <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1174:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1178:	4b3c      	ldr	r3, [pc, #240]	; (80a126c <_ZN5Print10printFloatEdh+0x144>)
 80a117a:	4638      	mov	r0, r7
 80a117c:	4631      	mov	r1, r6
 80a117e:	f001 fdb5 	bl	80a2cec <__aeabi_dcmpgt>
 80a1182:	b108      	cbz	r0, 80a1188 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1184:	493a      	ldr	r1, [pc, #232]	; (80a1270 <_ZN5Print10printFloatEdh+0x148>)
 80a1186:	e7f0      	b.n	80a116a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1188:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a118c:	4b39      	ldr	r3, [pc, #228]	; (80a1274 <_ZN5Print10printFloatEdh+0x14c>)
 80a118e:	4638      	mov	r0, r7
 80a1190:	4631      	mov	r1, r6
 80a1192:	f001 fd8d 	bl	80a2cb0 <__aeabi_dcmplt>
 80a1196:	2800      	cmp	r0, #0
 80a1198:	d1f4      	bne.n	80a1184 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a119a:	2200      	movs	r2, #0
 80a119c:	2300      	movs	r3, #0
 80a119e:	4638      	mov	r0, r7
 80a11a0:	4631      	mov	r1, r6
 80a11a2:	f001 fd85 	bl	80a2cb0 <__aeabi_dcmplt>
 80a11a6:	b138      	cbz	r0, 80a11b8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a11a8:	212d      	movs	r1, #45	; 0x2d
 80a11aa:	4640      	mov	r0, r8
 80a11ac:	f7ff ff53 	bl	80a1056 <_ZN5Print5printEc>
     number = -number;
 80a11b0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a11b4:	4604      	mov	r4, r0
 80a11b6:	e000      	b.n	80a11ba <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a11b8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a11ba:	492f      	ldr	r1, [pc, #188]	; (80a1278 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a11bc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a11c0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a11c2:	fa5f f389 	uxtb.w	r3, r9
 80a11c6:	429d      	cmp	r5, r3
 80a11c8:	d906      	bls.n	80a11d8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a11ca:	2200      	movs	r2, #0
 80a11cc:	4b2b      	ldr	r3, [pc, #172]	; (80a127c <_ZN5Print10printFloatEdh+0x154>)
 80a11ce:	f001 fc27 	bl	80a2a20 <__aeabi_ddiv>
 80a11d2:	f109 0901 	add.w	r9, r9, #1
 80a11d6:	e7f4      	b.n	80a11c2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a11d8:	463a      	mov	r2, r7
 80a11da:	4633      	mov	r3, r6
 80a11dc:	f001 f944 	bl	80a2468 <__adddf3>
 80a11e0:	460f      	mov	r7, r1
 80a11e2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a11e4:	f001 fdca 	bl	80a2d7c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11e8:	220a      	movs	r2, #10
 80a11ea:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a11ec:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a11ee:	4640      	mov	r0, r8
 80a11f0:	f7ff ff4a 	bl	80a1088 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a11f4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a11f6:	b37d      	cbz	r5, 80a1258 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a11f8:	4648      	mov	r0, r9
 80a11fa:	f001 fa71 	bl	80a26e0 <__aeabi_ui2d>
 80a11fe:	4602      	mov	r2, r0
 80a1200:	460b      	mov	r3, r1
 80a1202:	4630      	mov	r0, r6
 80a1204:	4639      	mov	r1, r7
 80a1206:	f001 f92d 	bl	80a2464 <__aeabi_dsub>
 80a120a:	4606      	mov	r6, r0
 80a120c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a120e:	4640      	mov	r0, r8
 80a1210:	491b      	ldr	r1, [pc, #108]	; (80a1280 <_ZN5Print10printFloatEdh+0x158>)
 80a1212:	f7ff ff0c 	bl	80a102e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1216:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1218:	4b18      	ldr	r3, [pc, #96]	; (80a127c <_ZN5Print10printFloatEdh+0x154>)
 80a121a:	2200      	movs	r2, #0
 80a121c:	4630      	mov	r0, r6
 80a121e:	4639      	mov	r1, r7
 80a1220:	f001 fad4 	bl	80a27cc <__aeabi_dmul>
 80a1224:	460f      	mov	r7, r1
 80a1226:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1228:	f001 fd80 	bl	80a2d2c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a122c:	220a      	movs	r2, #10
 80a122e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1230:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1232:	4640      	mov	r0, r8
 80a1234:	f7ff ff54 	bl	80a10e0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1238:	4404      	add	r4, r0
    remainder -= toPrint;
 80a123a:	4648      	mov	r0, r9
 80a123c:	f001 fa60 	bl	80a2700 <__aeabi_i2d>
 80a1240:	4602      	mov	r2, r0
 80a1242:	460b      	mov	r3, r1
 80a1244:	4630      	mov	r0, r6
 80a1246:	4639      	mov	r1, r7
 80a1248:	f001 f90c 	bl	80a2464 <__aeabi_dsub>
 80a124c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a124e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1252:	4606      	mov	r6, r0
 80a1254:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1256:	d1df      	bne.n	80a1218 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1258:	4620      	mov	r0, r4
 80a125a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a125e:	bf00      	nop
 80a1260:	080a34d4 	.word	0x080a34d4
 80a1264:	7fefffff 	.word	0x7fefffff
 80a1268:	080a34dc 	.word	0x080a34dc
 80a126c:	41efffff 	.word	0x41efffff
 80a1270:	080a34d8 	.word	0x080a34d8
 80a1274:	c1efffff 	.word	0xc1efffff
 80a1278:	3fe00000 	.word	0x3fe00000
 80a127c:	40240000 	.word	0x40240000
 80a1280:	080a33ee 	.word	0x080a33ee

080a1284 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1284:	f89d 1000 	ldrb.w	r1, [sp]
 80a1288:	9100      	str	r1, [sp, #0]
 80a128a:	f7ff bf4d 	b.w	80a1128 <_ZN5Print10printFloatEdh>

080a128e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a128e:	2300      	movs	r3, #0
 80a1290:	461a      	mov	r2, r3
 80a1292:	4619      	mov	r1, r3
 80a1294:	6840      	ldr	r0, [r0, #4]
 80a1296:	f7ff bcfd 	b.w	80a0c94 <network_on>

080a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a129a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a129c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a129e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a12a0:	b17c      	cbz	r4, 80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a12a2:	6863      	ldr	r3, [r4, #4]
 80a12a4:	3b01      	subs	r3, #1
 80a12a6:	6063      	str	r3, [r4, #4]
 80a12a8:	b95b      	cbnz	r3, 80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a12aa:	6823      	ldr	r3, [r4, #0]
 80a12ac:	4620      	mov	r0, r4
 80a12ae:	689b      	ldr	r3, [r3, #8]
 80a12b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a12b2:	68a3      	ldr	r3, [r4, #8]
 80a12b4:	3b01      	subs	r3, #1
 80a12b6:	60a3      	str	r3, [r4, #8]
 80a12b8:	b91b      	cbnz	r3, 80a12c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a12ba:	6823      	ldr	r3, [r4, #0]
 80a12bc:	4620      	mov	r0, r4
 80a12be:	68db      	ldr	r3, [r3, #12]
 80a12c0:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a12c2:	4628      	mov	r0, r5
 80a12c4:	bd38      	pop	{r3, r4, r5, pc}

080a12c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a12c6:	680b      	ldr	r3, [r1, #0]
 80a12c8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a12ca:	b113      	cbz	r3, 80a12d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a12cc:	685a      	ldr	r2, [r3, #4]
 80a12ce:	3201      	adds	r2, #1
 80a12d0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a12d2:	4770      	bx	lr

080a12d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a12d4:	4a01      	ldr	r2, [pc, #4]	; (80a12dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a12d6:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a12d8:	601a      	str	r2, [r3, #0]
 80a12da:	4770      	bx	lr
 80a12dc:	080a3556 	.word	0x080a3556
 80a12e0:	20000124 	.word	0x20000124

080a12e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a12e4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a12e6:	2000      	movs	r0, #0
 80a12e8:	f7ff fd1c 	bl	80a0d24 <spark_sync_time_pending>
 80a12ec:	b128      	cbz	r0, 80a12fa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a12ee:	f7ff fd09 	bl	80a0d04 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a12f2:	f080 0001 	eor.w	r0, r0, #1
 80a12f6:	b2c0      	uxtb	r0, r0
 80a12f8:	bd08      	pop	{r3, pc}
 80a12fa:	2001      	movs	r0, #1
    }
 80a12fc:	bd08      	pop	{r3, pc}

080a12fe <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a12fe:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a1300:	2000      	movs	r0, #0
 80a1302:	f7ff fb71 	bl	80a09e8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1306:	4604      	mov	r4, r0
 80a1308:	b968      	cbnz	r0, 80a1326 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a130a:	f7ff fc5f 	bl	80a0bcc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a130e:	2801      	cmp	r0, #1
 80a1310:	d10b      	bne.n	80a132a <_ZN9TimeClass7isValidEv+0x2c>
 80a1312:	4620      	mov	r0, r4
 80a1314:	f7ff fc82 	bl	80a0c1c <system_thread_get_state>
 80a1318:	b938      	cbnz	r0, 80a132a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a131a:	f7ff ffe3 	bl	80a12e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a131e:	b930      	cbnz	r0, 80a132e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a1320:	f7ff fce8 	bl	80a0cf4 <spark_process>
 80a1324:	e7f9      	b.n	80a131a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a1326:	2001      	movs	r0, #1
 80a1328:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a132a:	2000      	movs	r0, #0
 80a132c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a132e:	f7ff ffd9 	bl	80a12e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1332:	2000      	movs	r0, #0
 80a1334:	f7ff fb58 	bl	80a09e8 <HAL_RTC_Time_Is_Valid>
 80a1338:	3000      	adds	r0, #0
 80a133a:	bf18      	it	ne
 80a133c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a133e:	bd10      	pop	{r4, pc}

080a1340 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a1340:	b508      	push	{r3, lr}
    (void)isValid();
 80a1342:	f7ff ffdc 	bl	80a12fe <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a1346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a134a:	f7ff bb45 	b.w	80a09d8 <HAL_RTC_Get_UnixTime>
	...

080a1350 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1350:	4b02      	ldr	r3, [pc, #8]	; (80a135c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1352:	681a      	ldr	r2, [r3, #0]
 80a1354:	4b02      	ldr	r3, [pc, #8]	; (80a1360 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1356:	601a      	str	r2, [r3, #0]
 80a1358:	4770      	bx	lr
 80a135a:	bf00      	nop
 80a135c:	20000004 	.word	0x20000004
 80a1360:	20000128 	.word	0x20000128

080a1364 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1364:	2100      	movs	r1, #0
 80a1366:	f7ff bc41 	b.w	80a0bec <system_delay_ms>

080a136a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a136a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a136c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a136e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1370:	b113      	cbz	r3, 80a1378 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1372:	2203      	movs	r2, #3
 80a1374:	4601      	mov	r1, r0
 80a1376:	4798      	blx	r3
    }
 80a1378:	4620      	mov	r0, r4
 80a137a:	bd10      	pop	{r4, pc}

080a137c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a137c:	b510      	push	{r4, lr}
 80a137e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1380:	f7ff fff3 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
 80a1384:	4620      	mov	r0, r4
 80a1386:	bd10      	pop	{r4, pc}

080a1388 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1388:	b513      	push	{r0, r1, r4, lr}
 80a138a:	460b      	mov	r3, r1
 80a138c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a138e:	c803      	ldmia	r0, {r0, r1}
 80a1390:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1394:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1398:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a139c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a13a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a13a4:	b002      	add	sp, #8
 80a13a6:	bd10      	pop	{r4, pc}

080a13a8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a13a8:	4803      	ldr	r0, [pc, #12]	; (80a13b8 <_GLOBAL__sub_I_RGB+0x10>)
 80a13aa:	2300      	movs	r3, #0
 80a13ac:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a13ae:	4a03      	ldr	r2, [pc, #12]	; (80a13bc <_GLOBAL__sub_I_RGB+0x14>)
 80a13b0:	4903      	ldr	r1, [pc, #12]	; (80a13c0 <_GLOBAL__sub_I_RGB+0x18>)
 80a13b2:	f000 bf01 	b.w	80a21b8 <__aeabi_atexit>
 80a13b6:	bf00      	nop
 80a13b8:	2000012c 	.word	0x2000012c
 80a13bc:	2000006c 	.word	0x2000006c
 80a13c0:	080a137d 	.word	0x080a137d

080a13c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a13c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a13c6:	4b14      	ldr	r3, [pc, #80]	; (80a1418 <serialEventRun+0x54>)
 80a13c8:	b133      	cbz	r3, 80a13d8 <serialEventRun+0x14>
 80a13ca:	f000 fc2f 	bl	80a1c2c <_Z16_fetch_usbserialv>
 80a13ce:	6803      	ldr	r3, [r0, #0]
 80a13d0:	691b      	ldr	r3, [r3, #16]
 80a13d2:	4798      	blx	r3
 80a13d4:	2800      	cmp	r0, #0
 80a13d6:	dc16      	bgt.n	80a1406 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a13d8:	4b10      	ldr	r3, [pc, #64]	; (80a141c <serialEventRun+0x58>)
 80a13da:	b133      	cbz	r3, 80a13ea <serialEventRun+0x26>
 80a13dc:	f000 fce4 	bl	80a1da8 <_Z22__fetch_global_Serial1v>
 80a13e0:	6803      	ldr	r3, [r0, #0]
 80a13e2:	691b      	ldr	r3, [r3, #16]
 80a13e4:	4798      	blx	r3
 80a13e6:	2800      	cmp	r0, #0
 80a13e8:	dc10      	bgt.n	80a140c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a13ea:	4b0d      	ldr	r3, [pc, #52]	; (80a1420 <serialEventRun+0x5c>)
 80a13ec:	b10b      	cbz	r3, 80a13f2 <serialEventRun+0x2e>
 80a13ee:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a13f2:	4b0c      	ldr	r3, [pc, #48]	; (80a1424 <serialEventRun+0x60>)
 80a13f4:	b17b      	cbz	r3, 80a1416 <serialEventRun+0x52>
 80a13f6:	f000 fc55 	bl	80a1ca4 <_Z17_fetch_usbserial1v>
 80a13fa:	6803      	ldr	r3, [r0, #0]
 80a13fc:	691b      	ldr	r3, [r3, #16]
 80a13fe:	4798      	blx	r3
 80a1400:	2800      	cmp	r0, #0
 80a1402:	dc06      	bgt.n	80a1412 <serialEventRun+0x4e>
 80a1404:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1406:	f3af 8000 	nop.w
 80a140a:	e7e5      	b.n	80a13d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a140c:	f3af 8000 	nop.w
 80a1410:	e7eb      	b.n	80a13ea <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1412:	f3af 8000 	nop.w
 80a1416:	bd08      	pop	{r3, pc}
	...

080a1428 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1428:	b508      	push	{r3, lr}
	serialEventRun();
 80a142a:	f7ff ffcb 	bl	80a13c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a142e:	f7ff facb 	bl	80a09c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1432:	4b01      	ldr	r3, [pc, #4]	; (80a1438 <_post_loop+0x10>)
 80a1434:	6018      	str	r0, [r3, #0]
 80a1436:	bd08      	pop	{r3, pc}
 80a1438:	200005d0 	.word	0x200005d0

080a143c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a143c:	4802      	ldr	r0, [pc, #8]	; (80a1448 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a143e:	4a03      	ldr	r2, [pc, #12]	; (80a144c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1440:	4903      	ldr	r1, [pc, #12]	; (80a1450 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1442:	1a12      	subs	r2, r2, r0
 80a1444:	f001 bf62 	b.w	80a330c <memcpy>
 80a1448:	40024000 	.word	0x40024000
 80a144c:	40024004 	.word	0x40024004
 80a1450:	080a37b8 	.word	0x080a37b8

080a1454 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1454:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1456:	2300      	movs	r3, #0
 80a1458:	9300      	str	r3, [sp, #0]
 80a145a:	461a      	mov	r2, r3
 80a145c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1460:	f7ff fbee 	bl	80a0c40 <system_ctrl_set_result>
}
 80a1464:	b003      	add	sp, #12
 80a1466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a146c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a146c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a146e:	8843      	ldrh	r3, [r0, #2]
 80a1470:	2b0a      	cmp	r3, #10
 80a1472:	d008      	beq.n	80a1486 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1474:	2b50      	cmp	r3, #80	; 0x50
 80a1476:	d109      	bne.n	80a148c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1478:	4b09      	ldr	r3, [pc, #36]	; (80a14a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a147a:	681b      	ldr	r3, [r3, #0]
 80a147c:	b13b      	cbz	r3, 80a148e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a147e:	b003      	add	sp, #12
 80a1480:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1484:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1486:	f7ff ffe5 	bl	80a1454 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a148a:	e006      	b.n	80a149a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a148c:	2300      	movs	r3, #0
 80a148e:	9300      	str	r3, [sp, #0]
 80a1490:	461a      	mov	r2, r3
 80a1492:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1496:	f7ff fbd3 	bl	80a0c40 <system_ctrl_set_result>
        break;
    }
}
 80a149a:	b003      	add	sp, #12
 80a149c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a14a0:	2000013c 	.word	0x2000013c

080a14a4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a14a4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a14a6:	4c10      	ldr	r4, [pc, #64]	; (80a14e8 <module_user_init_hook+0x44>)
 80a14a8:	4d10      	ldr	r5, [pc, #64]	; (80a14ec <module_user_init_hook+0x48>)
 80a14aa:	6823      	ldr	r3, [r4, #0]
 80a14ac:	42ab      	cmp	r3, r5
 80a14ae:	4b10      	ldr	r3, [pc, #64]	; (80a14f0 <module_user_init_hook+0x4c>)
 80a14b0:	bf0c      	ite	eq
 80a14b2:	2201      	moveq	r2, #1
 80a14b4:	2200      	movne	r2, #0
 80a14b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a14b8:	d002      	beq.n	80a14c0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a14ba:	f7ff ffbf 	bl	80a143c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a14be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a14c0:	f7ff fa7a 	bl	80a09b8 <HAL_RNG_GetRandomNumber>
 80a14c4:	4604      	mov	r4, r0
    srand(seed);
 80a14c6:	f001 ff35 	bl	80a3334 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a14ca:	4b0a      	ldr	r3, [pc, #40]	; (80a14f4 <module_user_init_hook+0x50>)
 80a14cc:	b113      	cbz	r3, 80a14d4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a14d4:	2100      	movs	r1, #0
 80a14d6:	4807      	ldr	r0, [pc, #28]	; (80a14f4 <module_user_init_hook+0x50>)
 80a14d8:	f7ff fc2c 	bl	80a0d34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a14dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a14e0:	2100      	movs	r1, #0
 80a14e2:	4805      	ldr	r0, [pc, #20]	; (80a14f8 <module_user_init_hook+0x54>)
 80a14e4:	f7ff bba2 	b.w	80a0c2c <system_ctrl_set_app_request_handler>
 80a14e8:	40024000 	.word	0x40024000
 80a14ec:	9a271c1e 	.word	0x9a271c1e
 80a14f0:	20000140 	.word	0x20000140
 80a14f4:	00000000 	.word	0x00000000
 80a14f8:	080a146d 	.word	0x080a146d

080a14fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a14fc:	4770      	bx	lr

080a14fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a14fe:	2000      	movs	r0, #0
 80a1500:	4770      	bx	lr

080a1502 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1502:	b510      	push	{r4, lr}
 80a1504:	4604      	mov	r4, r0
 80a1506:	2110      	movs	r1, #16
 80a1508:	f000 fe5b 	bl	80a21c2 <_ZdlPvj>
 80a150c:	4620      	mov	r0, r4
 80a150e:	bd10      	pop	{r4, pc}

080a1510 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1510:	b508      	push	{r3, lr}
      { delete this; }
 80a1512:	b108      	cbz	r0, 80a1518 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1514:	f7ff fff5 	bl	80a1502 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1518:	bd08      	pop	{r3, pc}

080a151a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a151a:	2200      	movs	r2, #0
 80a151c:	6002      	str	r2, [r0, #0]
 80a151e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1522:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1524:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1526:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a152a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a152c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a152e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1530:	680c      	ldr	r4, [r1, #0]
 80a1532:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1534:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1536:	bd10      	pop	{r4, pc}

080a1538 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1538:	b510      	push	{r4, lr}
 80a153a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a153c:	6800      	ldr	r0, [r0, #0]
 80a153e:	f7ff fc09 	bl	80a0d54 <free>
}
 80a1542:	4620      	mov	r0, r4
 80a1544:	bd10      	pop	{r4, pc}

080a1546 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1546:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1548:	68c4      	ldr	r4, [r0, #12]
 80a154a:	b1f4      	cbz	r4, 80a158a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a154c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a154e:	2b02      	cmp	r3, #2
 80a1550:	d103      	bne.n	80a155a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1552:	f104 000c 	add.w	r0, r4, #12
 80a1556:	f7ff ffef 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a155a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a155c:	b135      	cbz	r5, 80a156c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a155e:	4628      	mov	r0, r5
 80a1560:	f7ff ff03 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
 80a1564:	2110      	movs	r1, #16
 80a1566:	4628      	mov	r0, r5
 80a1568:	f000 fe2b 	bl	80a21c2 <_ZdlPvj>
 80a156c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a156e:	b135      	cbz	r5, 80a157e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1570:	4628      	mov	r0, r5
 80a1572:	f7ff fefa 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
 80a1576:	2110      	movs	r1, #16
 80a1578:	4628      	mov	r0, r5
 80a157a:	f000 fe22 	bl	80a21c2 <_ZdlPvj>
 80a157e:	4620      	mov	r0, r4
 80a1580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1584:	2114      	movs	r1, #20
 80a1586:	f000 be1c 	b.w	80a21c2 <_ZdlPvj>
 80a158a:	bd38      	pop	{r3, r4, r5, pc}

080a158c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a158c:	b513      	push	{r0, r1, r4, lr}
 80a158e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1590:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1594:	2300      	movs	r3, #0
 80a1596:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1598:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a159a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a159c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a159e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a15a0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a15a2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a15a4:	f7ff fe79 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a15a8:	4620      	mov	r0, r4
 80a15aa:	b002      	add	sp, #8
 80a15ac:	bd10      	pop	{r4, pc}

080a15ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a15ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a15b0:	460c      	mov	r4, r1
 80a15b2:	4606      	mov	r6, r0
 80a15b4:	460f      	mov	r7, r1
 80a15b6:	f854 3b04 	ldr.w	r3, [r4], #4
 80a15ba:	ad02      	add	r5, sp, #8
 80a15bc:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a15c0:	4621      	mov	r1, r4
 80a15c2:	a801      	add	r0, sp, #4
 80a15c4:	f7ff fe7f 	bl	80a12c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a15c8:	4629      	mov	r1, r5
 80a15ca:	4630      	mov	r0, r6
 80a15cc:	f7ff ffde 	bl	80a158c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a15d0:	a801      	add	r0, sp, #4
 80a15d2:	f7ff fe62 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	f7ff fe5f 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a15dc:	4638      	mov	r0, r7
 80a15de:	2108      	movs	r1, #8
 80a15e0:	f000 fdef 	bl	80a21c2 <_ZdlPvj>
        return p;
    }
 80a15e4:	4630      	mov	r0, r6
 80a15e6:	b003      	add	sp, #12
 80a15e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a15ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15ec:	b538      	push	{r3, r4, r5, lr}
 80a15ee:	2300      	movs	r3, #0
 80a15f0:	4604      	mov	r4, r0
 80a15f2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15f4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15f6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15f8:	f7fe fd4f 	bl	80a009a <_Znwj>
 80a15fc:	b128      	cbz	r0, 80a160a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a15fe:	2301      	movs	r3, #1
 80a1600:	6043      	str	r3, [r0, #4]
 80a1602:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1604:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1606:	60c5      	str	r5, [r0, #12]
 80a1608:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a160a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a160c:	4620      	mov	r0, r4
 80a160e:	bd38      	pop	{r3, r4, r5, pc}
 80a1610:	080a35f4 	.word	0x080a35f4

080a1614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1614:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1616:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1618:	b90a      	cbnz	r2, 80a161e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a161a:	f000 fdd4 	bl	80a21c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a161e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1624:	4718      	bx	r3

080a1626 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1626:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1628:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a162a:	f100 0110 	add.w	r1, r0, #16
 80a162e:	f7ff fff1 	bl	80a1614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1632:	bd08      	pop	{r3, pc}

080a1634 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1634:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1636:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1638:	b90a      	cbnz	r2, 80a163e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a163a:	f000 fdc4 	bl	80a21c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a163e:	68c3      	ldr	r3, [r0, #12]
    }
 80a1640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1644:	4718      	bx	r3

080a1646 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1646:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1648:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a164a:	f100 0110 	add.w	r1, r0, #16
 80a164e:	f7ff fff1 	bl	80a1634 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1652:	bd08      	pop	{r3, pc}

080a1654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1654:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1656:	2300      	movs	r3, #0
 80a1658:	6083      	str	r3, [r0, #8]
 80a165a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a165c:	4604      	mov	r4, r0
 80a165e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1660:	b12b      	cbz	r3, 80a166e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1662:	2202      	movs	r2, #2
 80a1664:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1666:	68eb      	ldr	r3, [r5, #12]
 80a1668:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a166a:	68ab      	ldr	r3, [r5, #8]
 80a166c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a166e:	4620      	mov	r0, r4
 80a1670:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1674:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1676:	b089      	sub	sp, #36	; 0x24
 80a1678:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a167a:	4668      	mov	r0, sp
 80a167c:	f7ff ff4d 	bl	80a151a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1680:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1684:	2300      	movs	r3, #0
 80a1686:	f88d 3008 	strb.w	r3, [sp, #8]
 80a168a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a168e:	2b00      	cmp	r3, #0
 80a1690:	d103      	bne.n	80a169a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1692:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1696:	2900      	cmp	r1, #0
 80a1698:	d1f7      	bne.n	80a168a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a169a:	d002      	beq.n	80a16a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a169c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a16a0:	e063      	b.n	80a176a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a16a2:	f114 050c 	adds.w	r5, r4, #12
 80a16a6:	d003      	beq.n	80a16b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a16a8:	4669      	mov	r1, sp
 80a16aa:	4628      	mov	r0, r5
 80a16ac:	f7ff ff35 	bl	80a151a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a16b0:	f3bf 8f5f 	dmb	sy
 80a16b4:	2301      	movs	r3, #1
 80a16b6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a16b8:	f3bf 8f5f 	dmb	sy
 80a16bc:	f104 0308 	add.w	r3, r4, #8
 80a16c0:	2000      	movs	r0, #0
 80a16c2:	e853 6f00 	ldrex	r6, [r3]
 80a16c6:	e843 0200 	strex	r2, r0, [r3]
 80a16ca:	2a00      	cmp	r2, #0
 80a16cc:	d1f9      	bne.n	80a16c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a16ce:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a16d2:	2e00      	cmp	r6, #0
 80a16d4:	d049      	beq.n	80a176a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a16d6:	f7ff fa91 	bl	80a0bfc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a16da:	b120      	cbz	r0, 80a16e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a16dc:	4629      	mov	r1, r5
 80a16de:	4630      	mov	r0, r6
 80a16e0:	f7ff ff98 	bl	80a1614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a16e4:	e03a      	b.n	80a175c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a16e6:	4631      	mov	r1, r6
 80a16e8:	a802      	add	r0, sp, #8
 80a16ea:	f7ff ffb3 	bl	80a1654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a16ee:	68e0      	ldr	r0, [r4, #12]
 80a16f0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a16f4:	b108      	cbz	r0, 80a16fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a16f6:	f001 fe45 	bl	80a3384 <strdup>
 80a16fa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a16fc:	2010      	movs	r0, #16
 80a16fe:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1702:	f7fe fcca 	bl	80a009a <_Znwj>
 80a1706:	4605      	mov	r5, r0
 80a1708:	b1e8      	cbz	r0, 80a1746 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a170a:	2700      	movs	r7, #0
 80a170c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a170e:	2018      	movs	r0, #24
 80a1710:	f7fe fcc3 	bl	80a009a <_Znwj>
 80a1714:	4604      	mov	r4, r0
 80a1716:	b188      	cbz	r0, 80a173c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1718:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a171a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a171c:	a802      	add	r0, sp, #8
 80a171e:	f7ff fe33 	bl	80a1388 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1722:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1724:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1726:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1728:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a172a:	9204      	str	r2, [sp, #16]
 80a172c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a172e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1730:	60e3      	str	r3, [r4, #12]
 80a1732:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1736:	9205      	str	r2, [sp, #20]
 80a1738:	f7ff feef 	bl	80a151a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a173c:	4b0d      	ldr	r3, [pc, #52]	; (80a1774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a173e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1740:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1742:	4b0d      	ldr	r3, [pc, #52]	; (80a1778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1744:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1746:	a806      	add	r0, sp, #24
 80a1748:	f7ff fef6 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a174c:	a802      	add	r0, sp, #8
 80a174e:	f7ff fe0c 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1752:	2200      	movs	r2, #0
 80a1754:	4629      	mov	r1, r5
 80a1756:	4809      	ldr	r0, [pc, #36]	; (80a177c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1758:	f7ff fa58 	bl	80a0c0c <application_thread_invoke>
 80a175c:	4630      	mov	r0, r6
 80a175e:	f7ff fe04 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1762:	2110      	movs	r1, #16
 80a1764:	4630      	mov	r0, r6
 80a1766:	f000 fd2c 	bl	80a21c2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a176a:	4668      	mov	r0, sp
 80a176c:	f7ff fee4 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
    }
 80a1770:	b009      	add	sp, #36	; 0x24
 80a1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1774:	080a1627 	.word	0x080a1627
 80a1778:	080a189d 	.word	0x080a189d
 80a177c:	080a1df5 	.word	0x080a1df5

080a1780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1784:	b08b      	sub	sp, #44	; 0x2c
 80a1786:	4606      	mov	r6, r0
 80a1788:	460f      	mov	r7, r1
 80a178a:	4690      	mov	r8, r2
 80a178c:	4699      	mov	r9, r3
 80a178e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1792:	f7ff fab7 	bl	80a0d04 <spark_cloud_flag_connected>
 80a1796:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a1798:	4683      	mov	fp, r0
 80a179a:	bb30      	cbnz	r0, 80a17ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a179c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a17a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a17a2:	a905      	add	r1, sp, #20
 80a17a4:	4628      	mov	r0, r5
 80a17a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a17aa:	f7ff feb6 	bl	80a151a <_ZN8particle5ErrorC1EOS0_>
 80a17ae:	2014      	movs	r0, #20
 80a17b0:	f7fe fc73 	bl	80a009a <_Znwj>
 80a17b4:	4604      	mov	r4, r0
 80a17b6:	b158      	cbz	r0, 80a17d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a17b8:	2302      	movs	r3, #2
 80a17ba:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a17bc:	2301      	movs	r3, #1
 80a17be:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a17c0:	f8c0 b004 	str.w	fp, [r0, #4]
 80a17c4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a17c8:	4629      	mov	r1, r5
 80a17ca:	300c      	adds	r0, #12
 80a17cc:	f7ff fea5 	bl	80a151a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a17d0:	4630      	mov	r0, r6
 80a17d2:	4621      	mov	r1, r4
 80a17d4:	f840 4b04 	str.w	r4, [r0], #4
 80a17d8:	f7ff ff08 	bl	80a15ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a17dc:	4628      	mov	r0, r5
 80a17de:	f7ff feab 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a17e2:	a805      	add	r0, sp, #20
 80a17e4:	f7ff fea8 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
 80a17e8:	e052      	b.n	80a1890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a17ea:	2400      	movs	r4, #0
 80a17ec:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a17ee:	2014      	movs	r0, #20
 80a17f0:	606c      	str	r4, [r5, #4]
 80a17f2:	60ac      	str	r4, [r5, #8]
 80a17f4:	9307      	str	r3, [sp, #28]
 80a17f6:	f7fe fc50 	bl	80a009a <_Znwj>
 80a17fa:	4601      	mov	r1, r0
 80a17fc:	b118      	cbz	r0, 80a1806 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a17fe:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1800:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1802:	6044      	str	r4, [r0, #4]
 80a1804:	6084      	str	r4, [r0, #8]
 80a1806:	a804      	add	r0, sp, #16
 80a1808:	9103      	str	r1, [sp, #12]
 80a180a:	f7ff feef 	bl	80a15ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a180e:	4b22      	ldr	r3, [pc, #136]	; (80a1898 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1810:	2008      	movs	r0, #8
 80a1812:	9308      	str	r3, [sp, #32]
 80a1814:	f7fe fc41 	bl	80a009a <_Znwj>
 80a1818:	4604      	mov	r4, r0
 80a181a:	b128      	cbz	r0, 80a1828 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a181c:	9b03      	ldr	r3, [sp, #12]
 80a181e:	a904      	add	r1, sp, #16
 80a1820:	f840 3b04 	str.w	r3, [r0], #4
 80a1824:	f7ff fd4f 	bl	80a12c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1828:	9500      	str	r5, [sp, #0]
 80a182a:	fa5f f38a 	uxtb.w	r3, sl
 80a182e:	464a      	mov	r2, r9
 80a1830:	4641      	mov	r1, r8
 80a1832:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1834:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1836:	f7ff fa6d 	bl	80a0d14 <spark_send_event>
 80a183a:	b920      	cbnz	r0, 80a1846 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a183c:	9b03      	ldr	r3, [sp, #12]
 80a183e:	785b      	ldrb	r3, [r3, #1]
 80a1840:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1844:	b183      	cbz	r3, 80a1868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1846:	9b03      	ldr	r3, [sp, #12]
 80a1848:	a904      	add	r1, sp, #16
 80a184a:	a806      	add	r0, sp, #24
 80a184c:	9305      	str	r3, [sp, #20]
 80a184e:	f7ff fd3a 	bl	80a12c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1852:	a905      	add	r1, sp, #20
 80a1854:	4630      	mov	r0, r6
 80a1856:	f7ff fe99 	bl	80a158c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a185a:	a806      	add	r0, sp, #24
 80a185c:	f7ff fd1d 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1860:	a804      	add	r0, sp, #16
 80a1862:	f7ff fd1a 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1866:	e013      	b.n	80a1890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1868:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a186c:	a905      	add	r1, sp, #20
 80a186e:	a803      	add	r0, sp, #12
 80a1870:	9205      	str	r2, [sp, #20]
 80a1872:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1876:	f7ff fefd 	bl	80a1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a187a:	a805      	add	r0, sp, #20
 80a187c:	f7ff fe5c 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1880:	a805      	add	r0, sp, #20
 80a1882:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1884:	f7ff fe93 	bl	80a15ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1888:	a806      	add	r0, sp, #24
 80a188a:	f7ff fd06 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a188e:	e7da      	b.n	80a1846 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1890:	4630      	mov	r0, r6
 80a1892:	b00b      	add	sp, #44	; 0x2c
 80a1894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1898:	080a1a0d 	.word	0x080a1a0d

080a189c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a189c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a189e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a18a2:	d006      	beq.n	80a18b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a18a4:	2a03      	cmp	r2, #3
 80a18a6:	d017      	beq.n	80a18d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a18a8:	2a01      	cmp	r2, #1
 80a18aa:	d122      	bne.n	80a18f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a18ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a18ae:	6003      	str	r3, [r0, #0]
	      break;
 80a18b0:	e01f      	b.n	80a18f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a18b2:	2018      	movs	r0, #24
 80a18b4:	680e      	ldr	r6, [r1, #0]
 80a18b6:	f7fe fbf0 	bl	80a009a <_Znwj>
 80a18ba:	4605      	mov	r5, r0
 80a18bc:	b150      	cbz	r0, 80a18d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a18be:	4631      	mov	r1, r6
 80a18c0:	f7ff fec8 	bl	80a1654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a18c4:	6930      	ldr	r0, [r6, #16]
 80a18c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a18ca:	b108      	cbz	r0, 80a18d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a18cc:	f001 fd5a 	bl	80a3384 <strdup>
 80a18d0:	6128      	str	r0, [r5, #16]
 80a18d2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a18d4:	6025      	str	r5, [r4, #0]
 80a18d6:	e00c      	b.n	80a18f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a18d8:	6804      	ldr	r4, [r0, #0]
 80a18da:	b154      	cbz	r4, 80a18f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a18dc:	f104 0010 	add.w	r0, r4, #16
 80a18e0:	f7ff fe2a 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a18e4:	4620      	mov	r0, r4
 80a18e6:	f7ff fd40 	bl	80a136a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a18ea:	2118      	movs	r1, #24
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f000 fc68 	bl	80a21c2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a18f2:	2000      	movs	r0, #0
 80a18f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18f6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18f8:	2300      	movs	r3, #0
 80a18fa:	6083      	str	r3, [r0, #8]
 80a18fc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18fe:	4604      	mov	r4, r0
 80a1900:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1902:	b12b      	cbz	r3, 80a1910 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1904:	2202      	movs	r2, #2
 80a1906:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1908:	68eb      	ldr	r3, [r5, #12]
 80a190a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a190c:	68ab      	ldr	r3, [r5, #8]
 80a190e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1910:	4620      	mov	r0, r4
 80a1912:	bd38      	pop	{r3, r4, r5, pc}

080a1914 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1914:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1916:	b570      	push	{r4, r5, r6, lr}
 80a1918:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a191a:	d006      	beq.n	80a192a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a191c:	2a03      	cmp	r2, #3
 80a191e:	d011      	beq.n	80a1944 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1920:	2a01      	cmp	r2, #1
 80a1922:	d118      	bne.n	80a1956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1924:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1926:	6003      	str	r3, [r0, #0]
	      break;
 80a1928:	e015      	b.n	80a1956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a192a:	2014      	movs	r0, #20
 80a192c:	680e      	ldr	r6, [r1, #0]
 80a192e:	f7fe fbb4 	bl	80a009a <_Znwj>
 80a1932:	4605      	mov	r5, r0
 80a1934:	b120      	cbz	r0, 80a1940 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1936:	4631      	mov	r1, r6
 80a1938:	f7ff ffdd 	bl	80a18f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a193c:	7c33      	ldrb	r3, [r6, #16]
 80a193e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1940:	6025      	str	r5, [r4, #0]
 80a1942:	e008      	b.n	80a1956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1944:	6804      	ldr	r4, [r0, #0]
 80a1946:	b134      	cbz	r4, 80a1956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1948:	4620      	mov	r0, r4
 80a194a:	f7ff fd0e 	bl	80a136a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a194e:	2114      	movs	r1, #20
 80a1950:	4620      	mov	r0, r4
 80a1952:	f000 fc36 	bl	80a21c2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1956:	2000      	movs	r0, #0
 80a1958:	bd70      	pop	{r4, r5, r6, pc}
	...

080a195c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a195e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1960:	f3bf 8f5f 	dmb	sy
 80a1964:	b087      	sub	sp, #28
 80a1966:	2300      	movs	r3, #0
 80a1968:	e850 6f00 	ldrex	r6, [r0]
 80a196c:	e840 3200 	strex	r2, r3, [r0]
 80a1970:	2a00      	cmp	r2, #0
 80a1972:	d1f9      	bne.n	80a1968 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1974:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1978:	2e00      	cmp	r6, #0
 80a197a:	d03f      	beq.n	80a19fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a197c:	4618      	mov	r0, r3
 80a197e:	f7ff f93d 	bl	80a0bfc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1982:	4607      	mov	r7, r0
 80a1984:	b120      	cbz	r0, 80a1990 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1986:	4621      	mov	r1, r4
 80a1988:	4630      	mov	r0, r6
 80a198a:	f7ff fe53 	bl	80a1634 <_ZNKSt8functionIFvRKbEEclES1_>
 80a198e:	e02e      	b.n	80a19ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1990:	4631      	mov	r1, r6
 80a1992:	a801      	add	r0, sp, #4
 80a1994:	f7ff ffaf 	bl	80a18f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1998:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a199a:	2010      	movs	r0, #16
 80a199c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a19a0:	f7fe fb7b 	bl	80a009a <_Znwj>
 80a19a4:	4605      	mov	r5, r0
 80a19a6:	b1d0      	cbz	r0, 80a19de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19a8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19aa:	2014      	movs	r0, #20
 80a19ac:	f7fe fb75 	bl	80a009a <_Znwj>
 80a19b0:	4604      	mov	r4, r0
 80a19b2:	b178      	cbz	r0, 80a19d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19b4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a19b6:	4601      	mov	r1, r0
 80a19b8:	a801      	add	r0, sp, #4
 80a19ba:	f7ff fce5 	bl	80a1388 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a19c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19c2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a19c6:	9203      	str	r2, [sp, #12]
 80a19c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19ca:	60e3      	str	r3, [r4, #12]
 80a19cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a19d0:	9204      	str	r2, [sp, #16]
 80a19d2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19d4:	4b0a      	ldr	r3, [pc, #40]	; (80a1a00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19d6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a19da:	4b0a      	ldr	r3, [pc, #40]	; (80a1a04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a19dc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a19de:	a801      	add	r0, sp, #4
 80a19e0:	f7ff fcc3 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a19e4:	2200      	movs	r2, #0
 80a19e6:	4629      	mov	r1, r5
 80a19e8:	4807      	ldr	r0, [pc, #28]	; (80a1a08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a19ea:	f7ff f90f 	bl	80a0c0c <application_thread_invoke>
 80a19ee:	4630      	mov	r0, r6
 80a19f0:	f7ff fcbb 	bl	80a136a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a19f4:	2110      	movs	r1, #16
 80a19f6:	4630      	mov	r0, r6
 80a19f8:	f000 fbe3 	bl	80a21c2 <_ZdlPvj>
        }
    }
 80a19fc:	b007      	add	sp, #28
 80a19fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1a00:	080a1647 	.word	0x080a1647
 80a1a04:	080a1915 	.word	0x080a1915
 80a1a08:	080a1df5 	.word	0x080a1df5

080a1a0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1a0c:	b530      	push	{r4, r5, lr}
 80a1a0e:	4604      	mov	r4, r0
 80a1a10:	b085      	sub	sp, #20
 80a1a12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1a14:	4668      	mov	r0, sp
 80a1a16:	4611      	mov	r1, r2
 80a1a18:	f7ff fdc9 	bl	80a15ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1a1c:	b17c      	cbz	r4, 80a1a3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1a1e:	b224      	sxth	r4, r4
 80a1a20:	4628      	mov	r0, r5
 80a1a22:	b10d      	cbz	r5, 80a1a28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1a24:	f001 fcae 	bl	80a3384 <strdup>
 80a1a28:	9002      	str	r0, [sp, #8]
 80a1a2a:	a902      	add	r1, sp, #8
 80a1a2c:	4668      	mov	r0, sp
 80a1a2e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1a32:	f7ff fe1f 	bl	80a1674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1a36:	a802      	add	r0, sp, #8
 80a1a38:	f7ff fd7e 	bl	80a1538 <_ZN8particle5ErrorD1Ev>
 80a1a3c:	e01d      	b.n	80a1a7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1a3e:	f04f 0201 	mov.w	r2, #1
 80a1a42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1a44:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1a48:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1a4c:	42a3      	cmp	r3, r4
 80a1a4e:	d103      	bne.n	80a1a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1a50:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1a54:	2900      	cmp	r1, #0
 80a1a56:	d1f7      	bne.n	80a1a48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1a58:	d002      	beq.n	80a1a60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1a5a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1a5e:	e00c      	b.n	80a1a7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1a60:	f110 010c 	adds.w	r1, r0, #12
 80a1a64:	f04f 0301 	mov.w	r3, #1
 80a1a68:	bf18      	it	ne
 80a1a6a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1a6c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1a70:	3004      	adds	r0, #4
 80a1a72:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1a76:	f7ff ff71 	bl	80a195c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1a7a:	a801      	add	r0, sp, #4
 80a1a7c:	f7ff fc0d 	bl	80a129a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1a80:	b005      	add	sp, #20
 80a1a82:	bd30      	pop	{r4, r5, pc}

080a1a84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1a84:	4770      	bx	lr

080a1a86 <_ZN9IPAddressD0Ev>:
 80a1a86:	b510      	push	{r4, lr}
 80a1a88:	4604      	mov	r4, r0
 80a1a8a:	2118      	movs	r1, #24
 80a1a8c:	f000 fb99 	bl	80a21c2 <_ZdlPvj>
 80a1a90:	4620      	mov	r0, r4
 80a1a92:	bd10      	pop	{r4, pc}

080a1a94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a96:	460f      	mov	r7, r1
 80a1a98:	f100 0608 	add.w	r6, r0, #8
 80a1a9c:	1d05      	adds	r5, r0, #4
 80a1a9e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1aa4:	220a      	movs	r2, #10
 80a1aa6:	4638      	mov	r0, r7
 80a1aa8:	f7ff fb18 	bl	80a10dc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aac:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1ab0:	d007      	beq.n	80a1ac2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1ab2:	2c00      	cmp	r4, #0
 80a1ab4:	d0f4      	beq.n	80a1aa0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1ab6:	212e      	movs	r1, #46	; 0x2e
 80a1ab8:	4638      	mov	r0, r7
 80a1aba:	f7ff facc 	bl	80a1056 <_ZN5Print5printEc>
 80a1abe:	4404      	add	r4, r0
 80a1ac0:	e7ee      	b.n	80a1aa0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1ac8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1ac8:	b510      	push	{r4, lr}
 80a1aca:	4604      	mov	r4, r0
 80a1acc:	4b04      	ldr	r3, [pc, #16]	; (80a1ae0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1ace:	2211      	movs	r2, #17
 80a1ad0:	f840 3b04 	str.w	r3, [r0], #4
 80a1ad4:	2100      	movs	r1, #0
 80a1ad6:	f001 fc24 	bl	80a3322 <memset>
{
    clear();
}
 80a1ada:	4620      	mov	r0, r4
 80a1adc:	bd10      	pop	{r4, pc}
 80a1ade:	bf00      	nop
 80a1ae0:	080a3610 	.word	0x080a3610

080a1ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ae4:	4603      	mov	r3, r0
 80a1ae6:	4a07      	ldr	r2, [pc, #28]	; (80a1b04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1ae8:	b510      	push	{r4, lr}
 80a1aea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1aee:	f101 0210 	add.w	r2, r1, #16
 80a1af2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1af6:	4291      	cmp	r1, r2
 80a1af8:	f843 4b04 	str.w	r4, [r3], #4
 80a1afc:	d1f9      	bne.n	80a1af2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1afe:	780a      	ldrb	r2, [r1, #0]
 80a1b00:	701a      	strb	r2, [r3, #0]
}
 80a1b02:	bd10      	pop	{r4, pc}
 80a1b04:	080a3610 	.word	0x080a3610

080a1b08 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b08:	4a02      	ldr	r2, [pc, #8]	; (80a1b14 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1b0a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b0c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1b0e:	2204      	movs	r2, #4
 80a1b10:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1b12:	4770      	bx	lr
 80a1b14:	080a3610 	.word	0x080a3610

080a1b18 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1b18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1b22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1b26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1b2a:	2304      	movs	r3, #4
 80a1b2c:	6041      	str	r1, [r0, #4]
 80a1b2e:	7503      	strb	r3, [r0, #20]
 80a1b30:	bd10      	pop	{r4, pc}
	...

080a1b34 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b36:	4d04      	ldr	r5, [pc, #16]	; (80a1b48 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b38:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b3e:	9500      	str	r5, [sp, #0]
 80a1b40:	f7ff ffea 	bl	80a1b18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b44:	b003      	add	sp, #12
 80a1b46:	bd30      	pop	{r4, r5, pc}
 80a1b48:	080a3610 	.word	0x080a3610

080a1b4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b4c:	7441      	strb	r1, [r0, #17]
 80a1b4e:	4770      	bx	lr

080a1b50 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1b50:	4770      	bx	lr

080a1b52 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1b52:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1b54:	2100      	movs	r1, #0
 80a1b56:	7c00      	ldrb	r0, [r0, #16]
 80a1b58:	f7ff f818 	bl	80a0b8c <HAL_USB_USART_Receive_Data>
}
 80a1b5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b60:	bf28      	it	cs
 80a1b62:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1b66:	bd08      	pop	{r3, pc}

080a1b68 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1b68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1b6a:	2101      	movs	r1, #1
 80a1b6c:	7c00      	ldrb	r0, [r0, #16]
 80a1b6e:	f7ff f80d 	bl	80a0b8c <HAL_USB_USART_Receive_Data>
}
 80a1b72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b76:	bf28      	it	cs
 80a1b78:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1b7c:	bd08      	pop	{r3, pc}

080a1b7e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1b7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1b80:	7c00      	ldrb	r0, [r0, #16]
 80a1b82:	f7fe fffb 	bl	80a0b7c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1b86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b8a:	bd08      	pop	{r3, pc}

080a1b8c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1b8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1b8e:	7c00      	ldrb	r0, [r0, #16]
 80a1b90:	f7fe ffec 	bl	80a0b6c <HAL_USB_USART_Available_Data>
}
 80a1b94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b98:	bd08      	pop	{r3, pc}

080a1b9a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1b9a:	7c00      	ldrb	r0, [r0, #16]
 80a1b9c:	f7ff b806 	b.w	80a0bac <HAL_USB_USART_Flush_Data>

080a1ba0 <_ZN9USBSerialD0Ev>:
 80a1ba0:	b510      	push	{r4, lr}
 80a1ba2:	4604      	mov	r4, r0
 80a1ba4:	2114      	movs	r1, #20
 80a1ba6:	f000 fb0c 	bl	80a21c2 <_ZdlPvj>
 80a1baa:	4620      	mov	r0, r4
 80a1bac:	bd10      	pop	{r4, pc}

080a1bae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bae:	b538      	push	{r3, r4, r5, lr}
 80a1bb0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bb2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1bb4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1bb6:	f7fe ffe1 	bl	80a0b7c <HAL_USB_USART_Available_Data_For_Write>
 80a1bba:	2800      	cmp	r0, #0
 80a1bbc:	dc01      	bgt.n	80a1bc2 <_ZN9USBSerial5writeEh+0x14>
 80a1bbe:	7c60      	ldrb	r0, [r4, #17]
 80a1bc0:	b128      	cbz	r0, 80a1bce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1bc2:	4629      	mov	r1, r5
 80a1bc4:	7c20      	ldrb	r0, [r4, #16]
 80a1bc6:	f7fe ffe9 	bl	80a0b9c <HAL_USB_USART_Send_Data>
 80a1bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1bce:	bd38      	pop	{r3, r4, r5, pc}

080a1bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1bd0:	b510      	push	{r4, lr}
 80a1bd2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1bd4:	2300      	movs	r3, #0
 80a1bd6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1bdc:	60a3      	str	r3, [r4, #8]
 80a1bde:	4b05      	ldr	r3, [pc, #20]	; (80a1bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1be0:	4608      	mov	r0, r1
 80a1be2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1be4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1be6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1be8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1bea:	4611      	mov	r1, r2
 80a1bec:	f7fe ffae 	bl	80a0b4c <HAL_USB_USART_Init>
}
 80a1bf0:	4620      	mov	r0, r4
 80a1bf2:	bd10      	pop	{r4, pc}
 80a1bf4:	080a3624 	.word	0x080a3624

080a1bf8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1bf8:	2200      	movs	r2, #0
 80a1bfa:	7c00      	ldrb	r0, [r0, #16]
 80a1bfc:	f7fe bfae 	b.w	80a0b5c <HAL_USB_USART_Begin>

080a1c00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1c00:	b510      	push	{r4, lr}
 80a1c02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c04:	2214      	movs	r2, #20
 80a1c06:	2100      	movs	r1, #0
 80a1c08:	f001 fb8b 	bl	80a3322 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c0c:	4b05      	ldr	r3, [pc, #20]	; (80a1c24 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c0e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c10:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c12:	4b05      	ldr	r3, [pc, #20]	; (80a1c28 <_Z19acquireSerialBufferv+0x28>)
 80a1c14:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c16:	f240 1301 	movw	r3, #257	; 0x101
 80a1c1a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c1c:	2381      	movs	r3, #129	; 0x81
 80a1c1e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c20:	bd10      	pop	{r4, pc}
 80a1c22:	bf00      	nop
 80a1c24:	200001c9 	.word	0x200001c9
 80a1c28:	20000148 	.word	0x20000148

080a1c2c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c2e:	4d0e      	ldr	r5, [pc, #56]	; (80a1c68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c32:	a801      	add	r0, sp, #4
 80a1c34:	f7ff ffe4 	bl	80a1c00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c38:	6829      	ldr	r1, [r5, #0]
 80a1c3a:	f011 0401 	ands.w	r4, r1, #1
 80a1c3e:	d110      	bne.n	80a1c62 <_Z16_fetch_usbserialv+0x36>
 80a1c40:	4628      	mov	r0, r5
 80a1c42:	f7fe fa2e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1c46:	b160      	cbz	r0, 80a1c62 <_Z16_fetch_usbserialv+0x36>
 80a1c48:	aa01      	add	r2, sp, #4
 80a1c4a:	4621      	mov	r1, r4
 80a1c4c:	4807      	ldr	r0, [pc, #28]	; (80a1c6c <_Z16_fetch_usbserialv+0x40>)
 80a1c4e:	f7ff ffbf 	bl	80a1bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c52:	4628      	mov	r0, r5
 80a1c54:	f7fe fa2a 	bl	80a00ac <__cxa_guard_release>
 80a1c58:	4a05      	ldr	r2, [pc, #20]	; (80a1c70 <_Z16_fetch_usbserialv+0x44>)
 80a1c5a:	4906      	ldr	r1, [pc, #24]	; (80a1c74 <_Z16_fetch_usbserialv+0x48>)
 80a1c5c:	4803      	ldr	r0, [pc, #12]	; (80a1c6c <_Z16_fetch_usbserialv+0x40>)
 80a1c5e:	f000 faab 	bl	80a21b8 <__aeabi_atexit>
	return _usbserial;
}
 80a1c62:	4802      	ldr	r0, [pc, #8]	; (80a1c6c <_Z16_fetch_usbserialv+0x40>)
 80a1c64:	b007      	add	sp, #28
 80a1c66:	bd30      	pop	{r4, r5, pc}
 80a1c68:	20000144 	.word	0x20000144
 80a1c6c:	200002cc 	.word	0x200002cc
 80a1c70:	2000006c 	.word	0x2000006c
 80a1c74:	080a1b51 	.word	0x080a1b51

080a1c78 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1c78:	b510      	push	{r4, lr}
 80a1c7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c7c:	2214      	movs	r2, #20
 80a1c7e:	2100      	movs	r1, #0
 80a1c80:	f001 fb4f 	bl	80a3322 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c84:	4b05      	ldr	r3, [pc, #20]	; (80a1c9c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c86:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1c8a:	4b05      	ldr	r3, [pc, #20]	; (80a1ca0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1c8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c8e:	f240 1301 	movw	r3, #257	; 0x101
 80a1c92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c94:	2381      	movs	r3, #129	; 0x81
 80a1c96:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c98:	bd10      	pop	{r4, pc}
 80a1c9a:	bf00      	nop
 80a1c9c:	2000037c 	.word	0x2000037c
 80a1ca0:	200002e4 	.word	0x200002e4

080a1ca4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1ca4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ca6:	4c0e      	ldr	r4, [pc, #56]	; (80a1ce0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1ca8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1caa:	a801      	add	r0, sp, #4
 80a1cac:	f7ff ffe4 	bl	80a1c78 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1cb0:	6823      	ldr	r3, [r4, #0]
 80a1cb2:	07db      	lsls	r3, r3, #31
 80a1cb4:	d410      	bmi.n	80a1cd8 <_Z17_fetch_usbserial1v+0x34>
 80a1cb6:	4620      	mov	r0, r4
 80a1cb8:	f7fe f9f3 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cbc:	b160      	cbz	r0, 80a1cd8 <_Z17_fetch_usbserial1v+0x34>
 80a1cbe:	aa01      	add	r2, sp, #4
 80a1cc0:	2101      	movs	r1, #1
 80a1cc2:	4808      	ldr	r0, [pc, #32]	; (80a1ce4 <_Z17_fetch_usbserial1v+0x40>)
 80a1cc4:	f7ff ff84 	bl	80a1bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	f7fe f9ef 	bl	80a00ac <__cxa_guard_release>
 80a1cce:	4a06      	ldr	r2, [pc, #24]	; (80a1ce8 <_Z17_fetch_usbserial1v+0x44>)
 80a1cd0:	4906      	ldr	r1, [pc, #24]	; (80a1cec <_Z17_fetch_usbserial1v+0x48>)
 80a1cd2:	4804      	ldr	r0, [pc, #16]	; (80a1ce4 <_Z17_fetch_usbserial1v+0x40>)
 80a1cd4:	f000 fa70 	bl	80a21b8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1cd8:	4802      	ldr	r0, [pc, #8]	; (80a1ce4 <_Z17_fetch_usbserial1v+0x40>)
 80a1cda:	b006      	add	sp, #24
 80a1cdc:	bd10      	pop	{r4, pc}
 80a1cde:	bf00      	nop
 80a1ce0:	200002e0 	.word	0x200002e0
 80a1ce4:	20000368 	.word	0x20000368
 80a1ce8:	2000006c 	.word	0x2000006c
 80a1cec:	080a1b51 	.word	0x080a1b51

080a1cf0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1cf0:	4770      	bx	lr

080a1cf2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1cf2:	7441      	strb	r1, [r0, #17]
 80a1cf4:	4770      	bx	lr

080a1cf6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1cf6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1cf8:	7c00      	ldrb	r0, [r0, #16]
 80a1cfa:	f7fe febd 	bl	80a0a78 <HAL_USART_Available_Data_For_Write>
}
 80a1cfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d02:	bd08      	pop	{r3, pc}

080a1d04 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1d04:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1d06:	7c00      	ldrb	r0, [r0, #16]
 80a1d08:	f7fe fe8e 	bl	80a0a28 <HAL_USART_Available_Data>
}
 80a1d0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d10:	bd08      	pop	{r3, pc}

080a1d12 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1d12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1d14:	7c00      	ldrb	r0, [r0, #16]
 80a1d16:	f7fe fe97 	bl	80a0a48 <HAL_USART_Peek_Data>
}
 80a1d1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d1e:	bf28      	it	cs
 80a1d20:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d24:	bd08      	pop	{r3, pc}

080a1d26 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1d26:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1d28:	7c00      	ldrb	r0, [r0, #16]
 80a1d2a:	f7fe fe85 	bl	80a0a38 <HAL_USART_Read_Data>
}
 80a1d2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d32:	bf28      	it	cs
 80a1d34:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d38:	bd08      	pop	{r3, pc}

080a1d3a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1d3a:	7c00      	ldrb	r0, [r0, #16]
 80a1d3c:	f7fe be8c 	b.w	80a0a58 <HAL_USART_Flush_Data>

080a1d40 <_ZN11USARTSerialD0Ev>:
 80a1d40:	b510      	push	{r4, lr}
 80a1d42:	4604      	mov	r4, r0
 80a1d44:	2114      	movs	r1, #20
 80a1d46:	f000 fa3c 	bl	80a21c2 <_ZdlPvj>
 80a1d4a:	4620      	mov	r0, r4
 80a1d4c:	bd10      	pop	{r4, pc}

080a1d4e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d4e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d50:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d52:	4604      	mov	r4, r0
 80a1d54:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d56:	b925      	cbnz	r5, 80a1d62 <_ZN11USARTSerial5writeEh+0x14>
 80a1d58:	7c00      	ldrb	r0, [r0, #16]
 80a1d5a:	f7fe fe8d 	bl	80a0a78 <HAL_USART_Available_Data_For_Write>
 80a1d5e:	2800      	cmp	r0, #0
 80a1d60:	dd05      	ble.n	80a1d6e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d62:	4631      	mov	r1, r6
 80a1d64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d6a:	f7fe be55 	b.w	80a0a18 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1d6e:	4628      	mov	r0, r5
 80a1d70:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1d74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	4604      	mov	r4, r0
 80a1d78:	4608      	mov	r0, r1
 80a1d7a:	4611      	mov	r1, r2
 80a1d7c:	2200      	movs	r2, #0
 80a1d7e:	6062      	str	r2, [r4, #4]
 80a1d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1d84:	60a2      	str	r2, [r4, #8]
 80a1d86:	4a05      	ldr	r2, [pc, #20]	; (80a1d9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1d88:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1d8a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1d8c:	2201      	movs	r2, #1
 80a1d8e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1d90:	461a      	mov	r2, r3
 80a1d92:	f7fe fe39 	bl	80a0a08 <HAL_USART_Init>
}
 80a1d96:	4620      	mov	r0, r4
 80a1d98:	bd10      	pop	{r4, pc}
 80a1d9a:	bf00      	nop
 80a1d9c:	080a3654 	.word	0x080a3654

080a1da0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1da0:	7c00      	ldrb	r0, [r0, #16]
 80a1da2:	f7fe be61 	b.w	80a0a68 <HAL_USART_Is_Enabled>
	...

080a1da8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1da8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1daa:	4d0c      	ldr	r5, [pc, #48]	; (80a1ddc <_Z22__fetch_global_Serial1v+0x34>)
 80a1dac:	6829      	ldr	r1, [r5, #0]
 80a1dae:	f011 0401 	ands.w	r4, r1, #1
 80a1db2:	d111      	bne.n	80a1dd8 <_Z22__fetch_global_Serial1v+0x30>
 80a1db4:	4628      	mov	r0, r5
 80a1db6:	f7fe f974 	bl	80a00a2 <__cxa_guard_acquire>
 80a1dba:	b168      	cbz	r0, 80a1dd8 <_Z22__fetch_global_Serial1v+0x30>
 80a1dbc:	4a08      	ldr	r2, [pc, #32]	; (80a1de0 <_Z22__fetch_global_Serial1v+0x38>)
 80a1dbe:	4621      	mov	r1, r4
 80a1dc0:	4b08      	ldr	r3, [pc, #32]	; (80a1de4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1dc2:	4809      	ldr	r0, [pc, #36]	; (80a1de8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1dc4:	f7ff ffd6 	bl	80a1d74 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1dc8:	4628      	mov	r0, r5
 80a1dca:	f7fe f96f 	bl	80a00ac <__cxa_guard_release>
 80a1dce:	4a07      	ldr	r2, [pc, #28]	; (80a1dec <_Z22__fetch_global_Serial1v+0x44>)
 80a1dd0:	4907      	ldr	r1, [pc, #28]	; (80a1df0 <_Z22__fetch_global_Serial1v+0x48>)
 80a1dd2:	4805      	ldr	r0, [pc, #20]	; (80a1de8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1dd4:	f000 f9f0 	bl	80a21b8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1dd8:	4803      	ldr	r0, [pc, #12]	; (80a1de8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1dda:	bd38      	pop	{r3, r4, r5, pc}
 80a1ddc:	20000518 	.word	0x20000518
 80a1de0:	2000051c 	.word	0x2000051c
 80a1de4:	20000494 	.word	0x20000494
 80a1de8:	20000480 	.word	0x20000480
 80a1dec:	2000006c 	.word	0x2000006c
 80a1df0:	080a1cf1 	.word	0x080a1cf1

080a1df4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1df4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1df6:	6883      	ldr	r3, [r0, #8]
 80a1df8:	4604      	mov	r4, r0
 80a1dfa:	b90b      	cbnz	r3, 80a1e00 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1dfc:	f000 f9e3 	bl	80a21c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1e00:	68c3      	ldr	r3, [r0, #12]
 80a1e02:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1e04:	68a3      	ldr	r3, [r4, #8]
 80a1e06:	b11b      	cbz	r3, 80a1e10 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1e08:	2203      	movs	r2, #3
 80a1e0a:	4621      	mov	r1, r4
 80a1e0c:	4620      	mov	r0, r4
 80a1e0e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1e10:	4620      	mov	r0, r4
}
 80a1e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1e16:	2110      	movs	r1, #16
 80a1e18:	f000 b9d3 	b.w	80a21c2 <_ZdlPvj>

080a1e1c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1e1c:	4770      	bx	lr

080a1e1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e20:	4606      	mov	r6, r0
 80a1e22:	4615      	mov	r5, r2
 80a1e24:	460c      	mov	r4, r1
 80a1e26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e28:	42bc      	cmp	r4, r7
 80a1e2a:	d006      	beq.n	80a1e3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e2c:	6833      	ldr	r3, [r6, #0]
 80a1e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e32:	689b      	ldr	r3, [r3, #8]
 80a1e34:	4630      	mov	r0, r6
 80a1e36:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e38:	e7f6      	b.n	80a1e28 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1e3a:	4628      	mov	r0, r5
 80a1e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e3e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1e3e:	2200      	movs	r2, #0
 80a1e40:	7c00      	ldrb	r0, [r0, #16]
 80a1e42:	f7fe be49 	b.w	80a0ad8 <HAL_I2C_Write_Data>

080a1e46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1e46:	2100      	movs	r1, #0
 80a1e48:	7c00      	ldrb	r0, [r0, #16]
 80a1e4a:	f7fe be4d 	b.w	80a0ae8 <HAL_I2C_Available_Data>

080a1e4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1e4e:	2100      	movs	r1, #0
 80a1e50:	7c00      	ldrb	r0, [r0, #16]
 80a1e52:	f7fe be51 	b.w	80a0af8 <HAL_I2C_Read_Data>

080a1e56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1e56:	2100      	movs	r1, #0
 80a1e58:	7c00      	ldrb	r0, [r0, #16]
 80a1e5a:	f7fe be55 	b.w	80a0b08 <HAL_I2C_Peek_Data>

080a1e5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1e5e:	2100      	movs	r1, #0
 80a1e60:	7c00      	ldrb	r0, [r0, #16]
 80a1e62:	f7fe be59 	b.w	80a0b18 <HAL_I2C_Flush_Data>

080a1e66 <_ZN7TwoWireD0Ev>:
 80a1e66:	b510      	push	{r4, lr}
 80a1e68:	4604      	mov	r4, r0
 80a1e6a:	2114      	movs	r1, #20
 80a1e6c:	f000 f9a9 	bl	80a21c2 <_ZdlPvj>
 80a1e70:	4620      	mov	r0, r4
 80a1e72:	bd10      	pop	{r4, pc}

080a1e74 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1e74:	b510      	push	{r4, lr}
 80a1e76:	4604      	mov	r4, r0
 80a1e78:	4608      	mov	r0, r1
 80a1e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e7e:	60a3      	str	r3, [r4, #8]
 80a1e80:	4b04      	ldr	r3, [pc, #16]	; (80a1e94 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1e82:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1e84:	7420      	strb	r0, [r4, #16]
 80a1e86:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1e88:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1e8a:	f7fe fe55 	bl	80a0b38 <HAL_I2C_Init>

}
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	bd10      	pop	{r4, pc}
 80a1e92:	bf00      	nop
 80a1e94:	080a3684 	.word	0x080a3684

080a1e98 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1e98:	2200      	movs	r2, #0
 80a1e9a:	7c00      	ldrb	r0, [r0, #16]
 80a1e9c:	f7fe bdf4 	b.w	80a0a88 <HAL_I2C_Set_Speed>

080a1ea0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1ea0:	2300      	movs	r3, #0
 80a1ea2:	461a      	mov	r2, r3
 80a1ea4:	4619      	mov	r1, r3
 80a1ea6:	7c00      	ldrb	r0, [r0, #16]
 80a1ea8:	f7fe bdf6 	b.w	80a0a98 <HAL_I2C_Begin>

080a1eac <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1eac:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1eae:	2400      	movs	r4, #0
 80a1eb0:	7c00      	ldrb	r0, [r0, #16]
 80a1eb2:	9400      	str	r4, [sp, #0]
 80a1eb4:	f7fe fdf8 	bl	80a0aa8 <HAL_I2C_Request_Data>
  return result;
}
 80a1eb8:	b2c0      	uxtb	r0, r0
 80a1eba:	b002      	add	sp, #8
 80a1ebc:	bd10      	pop	{r4, pc}

080a1ebe <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1ebe:	2301      	movs	r3, #1
 80a1ec0:	f7ff bff4 	b.w	80a1eac <_ZN7TwoWire11requestFromEhhh>

080a1ec4 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1ec4:	2301      	movs	r3, #1
 80a1ec6:	b2d2      	uxtb	r2, r2
 80a1ec8:	b2c9      	uxtb	r1, r1
 80a1eca:	f7ff bfef 	b.w	80a1eac <_ZN7TwoWire11requestFromEhhh>

080a1ece <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1ece:	2200      	movs	r2, #0
 80a1ed0:	7c00      	ldrb	r0, [r0, #16]
 80a1ed2:	f7fe bdf1 	b.w	80a0ab8 <HAL_I2C_Begin_Transmission>

080a1ed6 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1ed6:	b2c9      	uxtb	r1, r1
 80a1ed8:	f7ff bff9 	b.w	80a1ece <_ZN7TwoWire17beginTransmissionEh>

080a1edc <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1edc:	2200      	movs	r2, #0
 80a1ede:	7c00      	ldrb	r0, [r0, #16]
 80a1ee0:	f7fe bdf2 	b.w	80a0ac8 <HAL_I2C_End_Transmission>

080a1ee4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1ee4:	2101      	movs	r1, #1
 80a1ee6:	f7ff bff9 	b.w	80a1edc <_ZN7TwoWire15endTransmissionEh>

080a1eea <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1eea:	2100      	movs	r1, #0
 80a1eec:	7c00      	ldrb	r0, [r0, #16]
 80a1eee:	f7fe be1b 	b.w	80a0b28 <HAL_I2C_Is_Enabled>

080a1ef2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1ef2:	2200      	movs	r2, #0
 80a1ef4:	4611      	mov	r1, r2
 80a1ef6:	6840      	ldr	r0, [r0, #4]
 80a1ef8:	f7fe bec4 	b.w	80a0c84 <network_ready>

080a1efc <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1efe:	4616      	mov	r6, r2
 80a1f00:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1f02:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1f04:	460f      	mov	r7, r1
 80a1f06:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1f08:	2100      	movs	r1, #0
 80a1f0a:	a803      	add	r0, sp, #12
 80a1f0c:	f001 fa09 	bl	80a3322 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1f10:	4630      	mov	r0, r6
 80a1f12:	f001 fa52 	bl	80a33ba <strlen>
 80a1f16:	2500      	movs	r5, #0
 80a1f18:	9500      	str	r5, [sp, #0]
 80a1f1a:	b281      	uxth	r1, r0
 80a1f1c:	687b      	ldr	r3, [r7, #4]
 80a1f1e:	aa03      	add	r2, sp, #12
 80a1f20:	4630      	mov	r0, r6
 80a1f22:	f7fe fe4b 	bl	80a0bbc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1f26:	b120      	cbz	r0, 80a1f32 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1f28:	4629      	mov	r1, r5
 80a1f2a:	4620      	mov	r0, r4
 80a1f2c:	f7ff fdec 	bl	80a1b08 <_ZN9IPAddressC1Em>
 80a1f30:	e003      	b.n	80a1f3a <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1f32:	a903      	add	r1, sp, #12
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	f7ff fdd5 	bl	80a1ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1f3a:	4620      	mov	r0, r4
 80a1f3c:	b009      	add	sp, #36	; 0x24
 80a1f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1f40 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1f40:	2200      	movs	r2, #0
 80a1f42:	4611      	mov	r1, r2
 80a1f44:	6840      	ldr	r0, [r0, #4]
 80a1f46:	f7fe bebd 	b.w	80a0cc4 <network_listening>

080a1f4a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1f4a:	2200      	movs	r2, #0
 80a1f4c:	4611      	mov	r1, r2
 80a1f4e:	6840      	ldr	r0, [r0, #4]
 80a1f50:	f7fe bec8 	b.w	80a0ce4 <network_get_listen_timeout>

080a1f54 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1f54:	2200      	movs	r2, #0
 80a1f56:	6840      	ldr	r0, [r0, #4]
 80a1f58:	f7fe bebc 	b.w	80a0cd4 <network_set_listen_timeout>

080a1f5c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1f5c:	2200      	movs	r2, #0
 80a1f5e:	f081 0101 	eor.w	r1, r1, #1
 80a1f62:	6840      	ldr	r0, [r0, #4]
 80a1f64:	f7fe bea6 	b.w	80a0cb4 <network_listen>

080a1f68 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1f68:	2300      	movs	r3, #0
 80a1f6a:	461a      	mov	r2, r3
 80a1f6c:	4619      	mov	r1, r3
 80a1f6e:	6840      	ldr	r0, [r0, #4]
 80a1f70:	f7fe be98 	b.w	80a0ca4 <network_off>

080a1f74 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1f74:	2200      	movs	r2, #0
 80a1f76:	4611      	mov	r1, r2
 80a1f78:	6840      	ldr	r0, [r0, #4]
 80a1f7a:	f7fe be73 	b.w	80a0c64 <network_connecting>

080a1f7e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1f7e:	2200      	movs	r2, #0
 80a1f80:	2102      	movs	r1, #2
 80a1f82:	6840      	ldr	r0, [r0, #4]
 80a1f84:	f7fe be76 	b.w	80a0c74 <network_disconnect>

080a1f88 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1f88:	2300      	movs	r3, #0
 80a1f8a:	461a      	mov	r2, r3
 80a1f8c:	6840      	ldr	r0, [r0, #4]
 80a1f8e:	f7fe be61 	b.w	80a0c54 <network_connect>
	...

080a1f94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f94:	4b02      	ldr	r3, [pc, #8]	; (80a1fa0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1f96:	2204      	movs	r2, #4
 80a1f98:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1f9a:	4a02      	ldr	r2, [pc, #8]	; (80a1fa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1f9c:	601a      	str	r2, [r3, #0]
 80a1f9e:	4770      	bx	lr
 80a1fa0:	200005a0 	.word	0x200005a0
 80a1fa4:	080a36ac 	.word	0x080a36ac

080a1fa8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1fa8:	2300      	movs	r3, #0
 80a1faa:	461a      	mov	r2, r3
 80a1fac:	6840      	ldr	r0, [r0, #4]
 80a1fae:	f7fe be51 	b.w	80a0c54 <network_connect>

080a1fb2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1fb2:	2200      	movs	r2, #0
 80a1fb4:	2102      	movs	r1, #2
 80a1fb6:	6840      	ldr	r0, [r0, #4]
 80a1fb8:	f7fe be5c 	b.w	80a0c74 <network_disconnect>

080a1fbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1fbc:	2200      	movs	r2, #0
 80a1fbe:	4611      	mov	r1, r2
 80a1fc0:	6840      	ldr	r0, [r0, #4]
 80a1fc2:	f7fe be4f 	b.w	80a0c64 <network_connecting>

080a1fc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1fc6:	2200      	movs	r2, #0
 80a1fc8:	4611      	mov	r1, r2
 80a1fca:	6840      	ldr	r0, [r0, #4]
 80a1fcc:	f7fe be5a 	b.w	80a0c84 <network_ready>

080a1fd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1fd0:	2300      	movs	r3, #0
 80a1fd2:	461a      	mov	r2, r3
 80a1fd4:	4619      	mov	r1, r3
 80a1fd6:	6840      	ldr	r0, [r0, #4]
 80a1fd8:	f7fe be5c 	b.w	80a0c94 <network_on>

080a1fdc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1fdc:	2300      	movs	r3, #0
 80a1fde:	461a      	mov	r2, r3
 80a1fe0:	4619      	mov	r1, r3
 80a1fe2:	6840      	ldr	r0, [r0, #4]
 80a1fe4:	f7fe be5e 	b.w	80a0ca4 <network_off>

080a1fe8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1fe8:	2200      	movs	r2, #0
 80a1fea:	f081 0101 	eor.w	r1, r1, #1
 80a1fee:	6840      	ldr	r0, [r0, #4]
 80a1ff0:	f7fe be60 	b.w	80a0cb4 <network_listen>

080a1ff4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1ff4:	2200      	movs	r2, #0
 80a1ff6:	6840      	ldr	r0, [r0, #4]
 80a1ff8:	f7fe be6c 	b.w	80a0cd4 <network_set_listen_timeout>

080a1ffc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1ffc:	2200      	movs	r2, #0
 80a1ffe:	4611      	mov	r1, r2
 80a2000:	6840      	ldr	r0, [r0, #4]
 80a2002:	f7fe be6f 	b.w	80a0ce4 <network_get_listen_timeout>

080a2006 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2006:	2200      	movs	r2, #0
 80a2008:	4611      	mov	r1, r2
 80a200a:	6840      	ldr	r0, [r0, #4]
 80a200c:	f7fe be5a 	b.w	80a0cc4 <network_listening>

080a2010 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2010:	b570      	push	{r4, r5, r6, lr}
 80a2012:	4616      	mov	r6, r2
 80a2014:	b08e      	sub	sp, #56	; 0x38
 80a2016:	4604      	mov	r4, r0
    IPAddress addr;
 80a2018:	a808      	add	r0, sp, #32
 80a201a:	f7ff fd55 	bl	80a1ac8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a201e:	2211      	movs	r2, #17
 80a2020:	2100      	movs	r1, #0
 80a2022:	a803      	add	r0, sp, #12
 80a2024:	f001 f97d 	bl	80a3322 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2028:	4630      	mov	r0, r6
 80a202a:	f001 f9c6 	bl	80a33ba <strlen>
 80a202e:	2500      	movs	r5, #0
 80a2030:	4b0a      	ldr	r3, [pc, #40]	; (80a205c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2032:	9500      	str	r5, [sp, #0]
 80a2034:	b281      	uxth	r1, r0
 80a2036:	685b      	ldr	r3, [r3, #4]
 80a2038:	aa03      	add	r2, sp, #12
 80a203a:	4630      	mov	r0, r6
 80a203c:	f7fe fdbe 	bl	80a0bbc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2040:	b120      	cbz	r0, 80a204c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2042:	4629      	mov	r1, r5
 80a2044:	4620      	mov	r0, r4
 80a2046:	f7ff fd5f 	bl	80a1b08 <_ZN9IPAddressC1Em>
 80a204a:	e003      	b.n	80a2054 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a204c:	a903      	add	r1, sp, #12
 80a204e:	4620      	mov	r0, r4
 80a2050:	f7ff fd48 	bl	80a1ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2054:	4620      	mov	r0, r4
 80a2056:	b00e      	add	sp, #56	; 0x38
 80a2058:	bd70      	pop	{r4, r5, r6, pc}
 80a205a:	bf00      	nop
 80a205c:	200005a0 	.word	0x200005a0

080a2060 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2060:	4b02      	ldr	r3, [pc, #8]	; (80a206c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2062:	4a03      	ldr	r2, [pc, #12]	; (80a2070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2064:	601a      	str	r2, [r3, #0]
 80a2066:	2200      	movs	r2, #0
 80a2068:	605a      	str	r2, [r3, #4]
 80a206a:	4770      	bx	lr
 80a206c:	200005a8 	.word	0x200005a8
 80a2070:	080a36e0 	.word	0x080a36e0

080a2074 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2074:	b510      	push	{r4, lr}
 80a2076:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2078:	480f      	ldr	r0, [pc, #60]	; (80a20b8 <pinAvailable+0x44>)
 80a207a:	f7fe fea7 	bl	80a0dcc <_ZN8SPIClass9isEnabledEv>
 80a207e:	b128      	cbz	r0, 80a208c <pinAvailable+0x18>
 80a2080:	f1a4 030d 	sub.w	r3, r4, #13
 80a2084:	2b02      	cmp	r3, #2
 80a2086:	d801      	bhi.n	80a208c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2088:	2000      	movs	r0, #0
 80a208a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a208c:	f000 f874 	bl	80a2178 <_Z19__fetch_global_Wirev>
 80a2090:	f7ff ff2b 	bl	80a1eea <_ZN7TwoWire9isEnabledEv>
 80a2094:	b108      	cbz	r0, 80a209a <pinAvailable+0x26>
 80a2096:	2c01      	cmp	r4, #1
 80a2098:	d9f6      	bls.n	80a2088 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a209a:	f7ff fe85 	bl	80a1da8 <_Z22__fetch_global_Serial1v>
 80a209e:	f7ff fe7f 	bl	80a1da0 <_ZN11USARTSerial9isEnabledEv>
 80a20a2:	b118      	cbz	r0, 80a20ac <pinAvailable+0x38>
 80a20a4:	f1a4 0312 	sub.w	r3, r4, #18
 80a20a8:	2b01      	cmp	r3, #1
 80a20aa:	d9ed      	bls.n	80a2088 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a20ac:	2c17      	cmp	r4, #23
 80a20ae:	bf8c      	ite	hi
 80a20b0:	2000      	movhi	r0, #0
 80a20b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a20b4:	bd10      	pop	{r4, pc}
 80a20b6:	bf00      	nop
 80a20b8:	200005b0 	.word	0x200005b0

080a20bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20bc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a20be:	b538      	push	{r3, r4, r5, lr}
 80a20c0:	4604      	mov	r4, r0
 80a20c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20c4:	d80a      	bhi.n	80a20dc <pinMode+0x20>
 80a20c6:	29ff      	cmp	r1, #255	; 0xff
 80a20c8:	d008      	beq.n	80a20dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a20ca:	f7ff ffd3 	bl	80a2074 <pinAvailable>
 80a20ce:	b128      	cbz	r0, 80a20dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20d0:	4629      	mov	r1, r5
 80a20d2:	4620      	mov	r0, r4
}
 80a20d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20d8:	f7fe bc46 	b.w	80a0968 <HAL_Pin_Mode>
 80a20dc:	bd38      	pop	{r3, r4, r5, pc}

080a20de <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a20de:	b510      	push	{r4, lr}
 80a20e0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20e2:	f7fe fc49 	bl	80a0978 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a20e6:	3804      	subs	r0, #4
 80a20e8:	b2c0      	uxtb	r0, r0
 80a20ea:	2801      	cmp	r0, #1
 80a20ec:	d908      	bls.n	80a2100 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a20ee:	4620      	mov	r0, r4
 80a20f0:	f7ff ffc0 	bl	80a2074 <pinAvailable>
 80a20f4:	b120      	cbz	r0, 80a2100 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a20f6:	4620      	mov	r0, r4
}
 80a20f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a20fc:	f7fe bc44 	b.w	80a0988 <HAL_GPIO_Read>
}
 80a2100:	2000      	movs	r0, #0
 80a2102:	bd10      	pop	{r4, pc}

080a2104 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2104:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2106:	4c0c      	ldr	r4, [pc, #48]	; (80a2138 <_GLOBAL__sub_I_SPI+0x34>)
 80a2108:	4e0c      	ldr	r6, [pc, #48]	; (80a213c <_GLOBAL__sub_I_SPI+0x38>)
 80a210a:	4d0d      	ldr	r5, [pc, #52]	; (80a2140 <_GLOBAL__sub_I_SPI+0x3c>)
 80a210c:	2100      	movs	r1, #0
 80a210e:	4620      	mov	r0, r4
 80a2110:	f7fe fe48 	bl	80a0da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2114:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2116:	4c0b      	ldr	r4, [pc, #44]	; (80a2144 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2118:	4632      	mov	r2, r6
 80a211a:	4629      	mov	r1, r5
 80a211c:	f000 f84c 	bl	80a21b8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2120:	2101      	movs	r1, #1
 80a2122:	4620      	mov	r0, r4
 80a2124:	f7fe fe3e 	bl	80a0da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2128:	4632      	mov	r2, r6
 80a212a:	4629      	mov	r1, r5
 80a212c:	4620      	mov	r0, r4
 80a212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2132:	f000 b841 	b.w	80a21b8 <__aeabi_atexit>
 80a2136:	bf00      	nop
 80a2138:	200005b0 	.word	0x200005b0
 80a213c:	2000006c 	.word	0x2000006c
 80a2140:	080a0d95 	.word	0x080a0d95
 80a2144:	200005c0 	.word	0x200005c0

080a2148 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2148:	b513      	push	{r0, r1, r4, lr}
 80a214a:	4c08      	ldr	r4, [pc, #32]	; (80a216c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a214c:	2300      	movs	r3, #0
 80a214e:	461a      	mov	r2, r3
 80a2150:	4619      	mov	r1, r3
 80a2152:	9300      	str	r3, [sp, #0]
 80a2154:	4620      	mov	r0, r4
 80a2156:	f7ff fced 	bl	80a1b34 <_ZN9IPAddressC1Ehhhh>
 80a215a:	4620      	mov	r0, r4
 80a215c:	4a04      	ldr	r2, [pc, #16]	; (80a2170 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a215e:	4905      	ldr	r1, [pc, #20]	; (80a2174 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2160:	b002      	add	sp, #8
 80a2162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2166:	f000 b827 	b.w	80a21b8 <__aeabi_atexit>
 80a216a:	bf00      	nop
 80a216c:	200005d4 	.word	0x200005d4
 80a2170:	2000006c 	.word	0x2000006c
 80a2174:	080a1a85 	.word	0x080a1a85

080a2178 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2178:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a217a:	4d0b      	ldr	r5, [pc, #44]	; (80a21a8 <_Z19__fetch_global_Wirev+0x30>)
 80a217c:	6829      	ldr	r1, [r5, #0]
 80a217e:	f011 0401 	ands.w	r4, r1, #1
 80a2182:	d10f      	bne.n	80a21a4 <_Z19__fetch_global_Wirev+0x2c>
 80a2184:	4628      	mov	r0, r5
 80a2186:	f7fd ff8c 	bl	80a00a2 <__cxa_guard_acquire>
 80a218a:	b158      	cbz	r0, 80a21a4 <_Z19__fetch_global_Wirev+0x2c>
 80a218c:	4621      	mov	r1, r4
 80a218e:	4807      	ldr	r0, [pc, #28]	; (80a21ac <_Z19__fetch_global_Wirev+0x34>)
 80a2190:	f7ff fe70 	bl	80a1e74 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2194:	4628      	mov	r0, r5
 80a2196:	f7fd ff89 	bl	80a00ac <__cxa_guard_release>
 80a219a:	4a05      	ldr	r2, [pc, #20]	; (80a21b0 <_Z19__fetch_global_Wirev+0x38>)
 80a219c:	4905      	ldr	r1, [pc, #20]	; (80a21b4 <_Z19__fetch_global_Wirev+0x3c>)
 80a219e:	4803      	ldr	r0, [pc, #12]	; (80a21ac <_Z19__fetch_global_Wirev+0x34>)
 80a21a0:	f000 f80a 	bl	80a21b8 <__aeabi_atexit>
	return wire;
}
 80a21a4:	4801      	ldr	r0, [pc, #4]	; (80a21ac <_Z19__fetch_global_Wirev+0x34>)
 80a21a6:	bd38      	pop	{r3, r4, r5, pc}
 80a21a8:	200005ec 	.word	0x200005ec
 80a21ac:	200005f0 	.word	0x200005f0
 80a21b0:	2000006c 	.word	0x2000006c
 80a21b4:	080a1e1d 	.word	0x080a1e1d

080a21b8 <__aeabi_atexit>:
 80a21b8:	460b      	mov	r3, r1
 80a21ba:	4601      	mov	r1, r0
 80a21bc:	4618      	mov	r0, r3
 80a21be:	f001 b897 	b.w	80a32f0 <__cxa_atexit>

080a21c2 <_ZdlPvj>:
 80a21c2:	f7fd bf6c 	b.w	80a009e <_ZdlPv>

080a21c6 <_ZSt25__throw_bad_function_callv>:
 80a21c6:	b508      	push	{r3, lr}
 80a21c8:	f7fe fdd4 	bl	80a0d74 <abort>

080a21cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a21cc:	4b18      	ldr	r3, [pc, #96]	; (80a2230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a21ce:	681a      	ldr	r2, [r3, #0]
 80a21d0:	07d1      	lsls	r1, r2, #31
 80a21d2:	bf5c      	itt	pl
 80a21d4:	2201      	movpl	r2, #1
 80a21d6:	601a      	strpl	r2, [r3, #0]
 80a21d8:	4b16      	ldr	r3, [pc, #88]	; (80a2234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a21da:	681a      	ldr	r2, [r3, #0]
 80a21dc:	07d2      	lsls	r2, r2, #31
 80a21de:	bf5c      	itt	pl
 80a21e0:	2201      	movpl	r2, #1
 80a21e2:	601a      	strpl	r2, [r3, #0]
 80a21e4:	4b14      	ldr	r3, [pc, #80]	; (80a2238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a21e6:	681a      	ldr	r2, [r3, #0]
 80a21e8:	07d0      	lsls	r0, r2, #31
 80a21ea:	bf5c      	itt	pl
 80a21ec:	2201      	movpl	r2, #1
 80a21ee:	601a      	strpl	r2, [r3, #0]
 80a21f0:	4b12      	ldr	r3, [pc, #72]	; (80a223c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a21f2:	681a      	ldr	r2, [r3, #0]
 80a21f4:	07d1      	lsls	r1, r2, #31
 80a21f6:	bf5c      	itt	pl
 80a21f8:	2201      	movpl	r2, #1
 80a21fa:	601a      	strpl	r2, [r3, #0]
 80a21fc:	4b10      	ldr	r3, [pc, #64]	; (80a2240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a21fe:	681a      	ldr	r2, [r3, #0]
 80a2200:	07d2      	lsls	r2, r2, #31
 80a2202:	bf5c      	itt	pl
 80a2204:	2201      	movpl	r2, #1
 80a2206:	601a      	strpl	r2, [r3, #0]
 80a2208:	4b0e      	ldr	r3, [pc, #56]	; (80a2244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a220a:	681a      	ldr	r2, [r3, #0]
 80a220c:	07d0      	lsls	r0, r2, #31
 80a220e:	bf5c      	itt	pl
 80a2210:	2201      	movpl	r2, #1
 80a2212:	601a      	strpl	r2, [r3, #0]
 80a2214:	4b0c      	ldr	r3, [pc, #48]	; (80a2248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2216:	681a      	ldr	r2, [r3, #0]
 80a2218:	07d1      	lsls	r1, r2, #31
 80a221a:	bf5c      	itt	pl
 80a221c:	2201      	movpl	r2, #1
 80a221e:	601a      	strpl	r2, [r3, #0]
 80a2220:	4b0a      	ldr	r3, [pc, #40]	; (80a224c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2222:	681a      	ldr	r2, [r3, #0]
 80a2224:	07d2      	lsls	r2, r2, #31
 80a2226:	bf5c      	itt	pl
 80a2228:	2201      	movpl	r2, #1
 80a222a:	601a      	strpl	r2, [r3, #0]
 80a222c:	4770      	bx	lr
 80a222e:	bf00      	nop
 80a2230:	20000620 	.word	0x20000620
 80a2234:	2000061c 	.word	0x2000061c
 80a2238:	20000618 	.word	0x20000618
 80a223c:	20000614 	.word	0x20000614
 80a2240:	20000610 	.word	0x20000610
 80a2244:	2000060c 	.word	0x2000060c
 80a2248:	20000608 	.word	0x20000608
 80a224c:	20000604 	.word	0x20000604

080a2250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2250:	4b24      	ldr	r3, [pc, #144]	; (80a22e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2252:	681a      	ldr	r2, [r3, #0]
 80a2254:	07d0      	lsls	r0, r2, #31
 80a2256:	bf5c      	itt	pl
 80a2258:	2201      	movpl	r2, #1
 80a225a:	601a      	strpl	r2, [r3, #0]
 80a225c:	4b22      	ldr	r3, [pc, #136]	; (80a22e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a225e:	681a      	ldr	r2, [r3, #0]
 80a2260:	07d1      	lsls	r1, r2, #31
 80a2262:	bf5c      	itt	pl
 80a2264:	2201      	movpl	r2, #1
 80a2266:	601a      	strpl	r2, [r3, #0]
 80a2268:	4b20      	ldr	r3, [pc, #128]	; (80a22ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a226a:	681a      	ldr	r2, [r3, #0]
 80a226c:	07d2      	lsls	r2, r2, #31
 80a226e:	bf5c      	itt	pl
 80a2270:	2201      	movpl	r2, #1
 80a2272:	601a      	strpl	r2, [r3, #0]
 80a2274:	4b1e      	ldr	r3, [pc, #120]	; (80a22f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2276:	681a      	ldr	r2, [r3, #0]
 80a2278:	07d0      	lsls	r0, r2, #31
 80a227a:	bf5c      	itt	pl
 80a227c:	2201      	movpl	r2, #1
 80a227e:	601a      	strpl	r2, [r3, #0]
 80a2280:	4b1c      	ldr	r3, [pc, #112]	; (80a22f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2282:	681a      	ldr	r2, [r3, #0]
 80a2284:	07d1      	lsls	r1, r2, #31
 80a2286:	bf5c      	itt	pl
 80a2288:	2201      	movpl	r2, #1
 80a228a:	601a      	strpl	r2, [r3, #0]
 80a228c:	4b1a      	ldr	r3, [pc, #104]	; (80a22f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a228e:	681a      	ldr	r2, [r3, #0]
 80a2290:	07d2      	lsls	r2, r2, #31
 80a2292:	bf5c      	itt	pl
 80a2294:	2201      	movpl	r2, #1
 80a2296:	601a      	strpl	r2, [r3, #0]
 80a2298:	4b18      	ldr	r3, [pc, #96]	; (80a22fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a229a:	681a      	ldr	r2, [r3, #0]
 80a229c:	07d0      	lsls	r0, r2, #31
 80a229e:	bf5c      	itt	pl
 80a22a0:	2201      	movpl	r2, #1
 80a22a2:	601a      	strpl	r2, [r3, #0]
 80a22a4:	4b16      	ldr	r3, [pc, #88]	; (80a2300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a22a6:	681a      	ldr	r2, [r3, #0]
 80a22a8:	07d1      	lsls	r1, r2, #31
 80a22aa:	bf5c      	itt	pl
 80a22ac:	2201      	movpl	r2, #1
 80a22ae:	601a      	strpl	r2, [r3, #0]
 80a22b0:	4b14      	ldr	r3, [pc, #80]	; (80a2304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a22b2:	681a      	ldr	r2, [r3, #0]
 80a22b4:	07d2      	lsls	r2, r2, #31
 80a22b6:	bf5c      	itt	pl
 80a22b8:	2201      	movpl	r2, #1
 80a22ba:	601a      	strpl	r2, [r3, #0]
 80a22bc:	4b12      	ldr	r3, [pc, #72]	; (80a2308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a22be:	681a      	ldr	r2, [r3, #0]
 80a22c0:	07d0      	lsls	r0, r2, #31
 80a22c2:	bf5c      	itt	pl
 80a22c4:	2201      	movpl	r2, #1
 80a22c6:	601a      	strpl	r2, [r3, #0]
 80a22c8:	4b10      	ldr	r3, [pc, #64]	; (80a230c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a22ca:	681a      	ldr	r2, [r3, #0]
 80a22cc:	07d1      	lsls	r1, r2, #31
 80a22ce:	bf5c      	itt	pl
 80a22d0:	2201      	movpl	r2, #1
 80a22d2:	601a      	strpl	r2, [r3, #0]
 80a22d4:	4b0e      	ldr	r3, [pc, #56]	; (80a2310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a22d6:	681a      	ldr	r2, [r3, #0]
 80a22d8:	07d2      	lsls	r2, r2, #31
 80a22da:	bf5c      	itt	pl
 80a22dc:	2201      	movpl	r2, #1
 80a22de:	601a      	strpl	r2, [r3, #0]
 80a22e0:	4770      	bx	lr
 80a22e2:	bf00      	nop
 80a22e4:	20000650 	.word	0x20000650
 80a22e8:	2000064c 	.word	0x2000064c
 80a22ec:	20000648 	.word	0x20000648
 80a22f0:	20000644 	.word	0x20000644
 80a22f4:	20000640 	.word	0x20000640
 80a22f8:	2000063c 	.word	0x2000063c
 80a22fc:	20000638 	.word	0x20000638
 80a2300:	20000634 	.word	0x20000634
 80a2304:	20000630 	.word	0x20000630
 80a2308:	2000062c 	.word	0x2000062c
 80a230c:	20000628 	.word	0x20000628
 80a2310:	20000624 	.word	0x20000624

080a2314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2314:	4b24      	ldr	r3, [pc, #144]	; (80a23a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2316:	681a      	ldr	r2, [r3, #0]
 80a2318:	07d0      	lsls	r0, r2, #31
 80a231a:	bf5c      	itt	pl
 80a231c:	2201      	movpl	r2, #1
 80a231e:	601a      	strpl	r2, [r3, #0]
 80a2320:	4b22      	ldr	r3, [pc, #136]	; (80a23ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2322:	681a      	ldr	r2, [r3, #0]
 80a2324:	07d1      	lsls	r1, r2, #31
 80a2326:	bf5c      	itt	pl
 80a2328:	2201      	movpl	r2, #1
 80a232a:	601a      	strpl	r2, [r3, #0]
 80a232c:	4b20      	ldr	r3, [pc, #128]	; (80a23b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a232e:	681a      	ldr	r2, [r3, #0]
 80a2330:	07d2      	lsls	r2, r2, #31
 80a2332:	bf5c      	itt	pl
 80a2334:	2201      	movpl	r2, #1
 80a2336:	601a      	strpl	r2, [r3, #0]
 80a2338:	4b1e      	ldr	r3, [pc, #120]	; (80a23b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a233a:	681a      	ldr	r2, [r3, #0]
 80a233c:	07d0      	lsls	r0, r2, #31
 80a233e:	bf5c      	itt	pl
 80a2340:	2201      	movpl	r2, #1
 80a2342:	601a      	strpl	r2, [r3, #0]
 80a2344:	4b1c      	ldr	r3, [pc, #112]	; (80a23b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2346:	681a      	ldr	r2, [r3, #0]
 80a2348:	07d1      	lsls	r1, r2, #31
 80a234a:	bf5c      	itt	pl
 80a234c:	2201      	movpl	r2, #1
 80a234e:	601a      	strpl	r2, [r3, #0]
 80a2350:	4b1a      	ldr	r3, [pc, #104]	; (80a23bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2352:	681a      	ldr	r2, [r3, #0]
 80a2354:	07d2      	lsls	r2, r2, #31
 80a2356:	bf5c      	itt	pl
 80a2358:	2201      	movpl	r2, #1
 80a235a:	601a      	strpl	r2, [r3, #0]
 80a235c:	4b18      	ldr	r3, [pc, #96]	; (80a23c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a235e:	681a      	ldr	r2, [r3, #0]
 80a2360:	07d0      	lsls	r0, r2, #31
 80a2362:	bf5c      	itt	pl
 80a2364:	2201      	movpl	r2, #1
 80a2366:	601a      	strpl	r2, [r3, #0]
 80a2368:	4b16      	ldr	r3, [pc, #88]	; (80a23c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a236a:	681a      	ldr	r2, [r3, #0]
 80a236c:	07d1      	lsls	r1, r2, #31
 80a236e:	bf5c      	itt	pl
 80a2370:	2201      	movpl	r2, #1
 80a2372:	601a      	strpl	r2, [r3, #0]
 80a2374:	4b14      	ldr	r3, [pc, #80]	; (80a23c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2376:	681a      	ldr	r2, [r3, #0]
 80a2378:	07d2      	lsls	r2, r2, #31
 80a237a:	bf5c      	itt	pl
 80a237c:	2201      	movpl	r2, #1
 80a237e:	601a      	strpl	r2, [r3, #0]
 80a2380:	4b12      	ldr	r3, [pc, #72]	; (80a23cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2382:	681a      	ldr	r2, [r3, #0]
 80a2384:	07d0      	lsls	r0, r2, #31
 80a2386:	bf5c      	itt	pl
 80a2388:	2201      	movpl	r2, #1
 80a238a:	601a      	strpl	r2, [r3, #0]
 80a238c:	4b10      	ldr	r3, [pc, #64]	; (80a23d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a238e:	681a      	ldr	r2, [r3, #0]
 80a2390:	07d1      	lsls	r1, r2, #31
 80a2392:	bf5c      	itt	pl
 80a2394:	2201      	movpl	r2, #1
 80a2396:	601a      	strpl	r2, [r3, #0]
 80a2398:	4b0e      	ldr	r3, [pc, #56]	; (80a23d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a239a:	681a      	ldr	r2, [r3, #0]
 80a239c:	07d2      	lsls	r2, r2, #31
 80a239e:	bf5c      	itt	pl
 80a23a0:	2201      	movpl	r2, #1
 80a23a2:	601a      	strpl	r2, [r3, #0]
 80a23a4:	4770      	bx	lr
 80a23a6:	bf00      	nop
 80a23a8:	20000680 	.word	0x20000680
 80a23ac:	2000067c 	.word	0x2000067c
 80a23b0:	20000678 	.word	0x20000678
 80a23b4:	20000674 	.word	0x20000674
 80a23b8:	20000670 	.word	0x20000670
 80a23bc:	2000066c 	.word	0x2000066c
 80a23c0:	20000668 	.word	0x20000668
 80a23c4:	20000664 	.word	0x20000664
 80a23c8:	20000660 	.word	0x20000660
 80a23cc:	2000065c 	.word	0x2000065c
 80a23d0:	20000658 	.word	0x20000658
 80a23d4:	20000654 	.word	0x20000654

080a23d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a23d8:	4b18      	ldr	r3, [pc, #96]	; (80a243c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a23da:	681a      	ldr	r2, [r3, #0]
 80a23dc:	07d1      	lsls	r1, r2, #31
 80a23de:	bf5c      	itt	pl
 80a23e0:	2201      	movpl	r2, #1
 80a23e2:	601a      	strpl	r2, [r3, #0]
 80a23e4:	4b16      	ldr	r3, [pc, #88]	; (80a2440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a23e6:	681a      	ldr	r2, [r3, #0]
 80a23e8:	07d2      	lsls	r2, r2, #31
 80a23ea:	bf5c      	itt	pl
 80a23ec:	2201      	movpl	r2, #1
 80a23ee:	601a      	strpl	r2, [r3, #0]
 80a23f0:	4b14      	ldr	r3, [pc, #80]	; (80a2444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a23f2:	681a      	ldr	r2, [r3, #0]
 80a23f4:	07d0      	lsls	r0, r2, #31
 80a23f6:	bf5c      	itt	pl
 80a23f8:	2201      	movpl	r2, #1
 80a23fa:	601a      	strpl	r2, [r3, #0]
 80a23fc:	4b12      	ldr	r3, [pc, #72]	; (80a2448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a23fe:	681a      	ldr	r2, [r3, #0]
 80a2400:	07d1      	lsls	r1, r2, #31
 80a2402:	bf5c      	itt	pl
 80a2404:	2201      	movpl	r2, #1
 80a2406:	601a      	strpl	r2, [r3, #0]
 80a2408:	4b10      	ldr	r3, [pc, #64]	; (80a244c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a240a:	681a      	ldr	r2, [r3, #0]
 80a240c:	07d2      	lsls	r2, r2, #31
 80a240e:	bf5c      	itt	pl
 80a2410:	2201      	movpl	r2, #1
 80a2412:	601a      	strpl	r2, [r3, #0]
 80a2414:	4b0e      	ldr	r3, [pc, #56]	; (80a2450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2416:	681a      	ldr	r2, [r3, #0]
 80a2418:	07d0      	lsls	r0, r2, #31
 80a241a:	bf5c      	itt	pl
 80a241c:	2201      	movpl	r2, #1
 80a241e:	601a      	strpl	r2, [r3, #0]
 80a2420:	4b0c      	ldr	r3, [pc, #48]	; (80a2454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2422:	681a      	ldr	r2, [r3, #0]
 80a2424:	07d1      	lsls	r1, r2, #31
 80a2426:	bf5c      	itt	pl
 80a2428:	2201      	movpl	r2, #1
 80a242a:	601a      	strpl	r2, [r3, #0]
 80a242c:	4b0a      	ldr	r3, [pc, #40]	; (80a2458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a242e:	681a      	ldr	r2, [r3, #0]
 80a2430:	07d2      	lsls	r2, r2, #31
 80a2432:	bf5c      	itt	pl
 80a2434:	2201      	movpl	r2, #1
 80a2436:	601a      	strpl	r2, [r3, #0]
 80a2438:	4770      	bx	lr
 80a243a:	bf00      	nop
 80a243c:	200006a0 	.word	0x200006a0
 80a2440:	2000069c 	.word	0x2000069c
 80a2444:	20000698 	.word	0x20000698
 80a2448:	20000694 	.word	0x20000694
 80a244c:	20000690 	.word	0x20000690
 80a2450:	2000068c 	.word	0x2000068c
 80a2454:	20000688 	.word	0x20000688
 80a2458:	20000684 	.word	0x20000684

080a245c <__aeabi_drsub>:
 80a245c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2460:	e002      	b.n	80a2468 <__adddf3>
 80a2462:	bf00      	nop

080a2464 <__aeabi_dsub>:
 80a2464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2468 <__adddf3>:
 80a2468:	b530      	push	{r4, r5, lr}
 80a246a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a246e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2472:	ea94 0f05 	teq	r4, r5
 80a2476:	bf08      	it	eq
 80a2478:	ea90 0f02 	teqeq	r0, r2
 80a247c:	bf1f      	itttt	ne
 80a247e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2482:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a248a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a248e:	f000 80e2 	beq.w	80a2656 <__adddf3+0x1ee>
 80a2492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a249a:	bfb8      	it	lt
 80a249c:	426d      	neglt	r5, r5
 80a249e:	dd0c      	ble.n	80a24ba <__adddf3+0x52>
 80a24a0:	442c      	add	r4, r5
 80a24a2:	ea80 0202 	eor.w	r2, r0, r2
 80a24a6:	ea81 0303 	eor.w	r3, r1, r3
 80a24aa:	ea82 0000 	eor.w	r0, r2, r0
 80a24ae:	ea83 0101 	eor.w	r1, r3, r1
 80a24b2:	ea80 0202 	eor.w	r2, r0, r2
 80a24b6:	ea81 0303 	eor.w	r3, r1, r3
 80a24ba:	2d36      	cmp	r5, #54	; 0x36
 80a24bc:	bf88      	it	hi
 80a24be:	bd30      	pophi	{r4, r5, pc}
 80a24c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a24c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a24c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a24cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a24d0:	d002      	beq.n	80a24d8 <__adddf3+0x70>
 80a24d2:	4240      	negs	r0, r0
 80a24d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a24d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a24dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a24e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a24e4:	d002      	beq.n	80a24ec <__adddf3+0x84>
 80a24e6:	4252      	negs	r2, r2
 80a24e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a24ec:	ea94 0f05 	teq	r4, r5
 80a24f0:	f000 80a7 	beq.w	80a2642 <__adddf3+0x1da>
 80a24f4:	f1a4 0401 	sub.w	r4, r4, #1
 80a24f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a24fc:	db0d      	blt.n	80a251a <__adddf3+0xb2>
 80a24fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2502:	fa22 f205 	lsr.w	r2, r2, r5
 80a2506:	1880      	adds	r0, r0, r2
 80a2508:	f141 0100 	adc.w	r1, r1, #0
 80a250c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2510:	1880      	adds	r0, r0, r2
 80a2512:	fa43 f305 	asr.w	r3, r3, r5
 80a2516:	4159      	adcs	r1, r3
 80a2518:	e00e      	b.n	80a2538 <__adddf3+0xd0>
 80a251a:	f1a5 0520 	sub.w	r5, r5, #32
 80a251e:	f10e 0e20 	add.w	lr, lr, #32
 80a2522:	2a01      	cmp	r2, #1
 80a2524:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2528:	bf28      	it	cs
 80a252a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a252e:	fa43 f305 	asr.w	r3, r3, r5
 80a2532:	18c0      	adds	r0, r0, r3
 80a2534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a253c:	d507      	bpl.n	80a254e <__adddf3+0xe6>
 80a253e:	f04f 0e00 	mov.w	lr, #0
 80a2542:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2546:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a254a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a254e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2552:	d31b      	bcc.n	80a258c <__adddf3+0x124>
 80a2554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2558:	d30c      	bcc.n	80a2574 <__adddf3+0x10c>
 80a255a:	0849      	lsrs	r1, r1, #1
 80a255c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2564:	f104 0401 	add.w	r4, r4, #1
 80a2568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a256c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2570:	f080 809a 	bcs.w	80a26a8 <__adddf3+0x240>
 80a2574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2578:	bf08      	it	eq
 80a257a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a257e:	f150 0000 	adcs.w	r0, r0, #0
 80a2582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2586:	ea41 0105 	orr.w	r1, r1, r5
 80a258a:	bd30      	pop	{r4, r5, pc}
 80a258c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2590:	4140      	adcs	r0, r0
 80a2592:	eb41 0101 	adc.w	r1, r1, r1
 80a2596:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a259a:	f1a4 0401 	sub.w	r4, r4, #1
 80a259e:	d1e9      	bne.n	80a2574 <__adddf3+0x10c>
 80a25a0:	f091 0f00 	teq	r1, #0
 80a25a4:	bf04      	itt	eq
 80a25a6:	4601      	moveq	r1, r0
 80a25a8:	2000      	moveq	r0, #0
 80a25aa:	fab1 f381 	clz	r3, r1
 80a25ae:	bf08      	it	eq
 80a25b0:	3320      	addeq	r3, #32
 80a25b2:	f1a3 030b 	sub.w	r3, r3, #11
 80a25b6:	f1b3 0220 	subs.w	r2, r3, #32
 80a25ba:	da0c      	bge.n	80a25d6 <__adddf3+0x16e>
 80a25bc:	320c      	adds	r2, #12
 80a25be:	dd08      	ble.n	80a25d2 <__adddf3+0x16a>
 80a25c0:	f102 0c14 	add.w	ip, r2, #20
 80a25c4:	f1c2 020c 	rsb	r2, r2, #12
 80a25c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a25cc:	fa21 f102 	lsr.w	r1, r1, r2
 80a25d0:	e00c      	b.n	80a25ec <__adddf3+0x184>
 80a25d2:	f102 0214 	add.w	r2, r2, #20
 80a25d6:	bfd8      	it	le
 80a25d8:	f1c2 0c20 	rsble	ip, r2, #32
 80a25dc:	fa01 f102 	lsl.w	r1, r1, r2
 80a25e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a25e4:	bfdc      	itt	le
 80a25e6:	ea41 010c 	orrle.w	r1, r1, ip
 80a25ea:	4090      	lslle	r0, r2
 80a25ec:	1ae4      	subs	r4, r4, r3
 80a25ee:	bfa2      	ittt	ge
 80a25f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a25f4:	4329      	orrge	r1, r5
 80a25f6:	bd30      	popge	{r4, r5, pc}
 80a25f8:	ea6f 0404 	mvn.w	r4, r4
 80a25fc:	3c1f      	subs	r4, #31
 80a25fe:	da1c      	bge.n	80a263a <__adddf3+0x1d2>
 80a2600:	340c      	adds	r4, #12
 80a2602:	dc0e      	bgt.n	80a2622 <__adddf3+0x1ba>
 80a2604:	f104 0414 	add.w	r4, r4, #20
 80a2608:	f1c4 0220 	rsb	r2, r4, #32
 80a260c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2610:	fa01 f302 	lsl.w	r3, r1, r2
 80a2614:	ea40 0003 	orr.w	r0, r0, r3
 80a2618:	fa21 f304 	lsr.w	r3, r1, r4
 80a261c:	ea45 0103 	orr.w	r1, r5, r3
 80a2620:	bd30      	pop	{r4, r5, pc}
 80a2622:	f1c4 040c 	rsb	r4, r4, #12
 80a2626:	f1c4 0220 	rsb	r2, r4, #32
 80a262a:	fa20 f002 	lsr.w	r0, r0, r2
 80a262e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2632:	ea40 0003 	orr.w	r0, r0, r3
 80a2636:	4629      	mov	r1, r5
 80a2638:	bd30      	pop	{r4, r5, pc}
 80a263a:	fa21 f004 	lsr.w	r0, r1, r4
 80a263e:	4629      	mov	r1, r5
 80a2640:	bd30      	pop	{r4, r5, pc}
 80a2642:	f094 0f00 	teq	r4, #0
 80a2646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a264a:	bf06      	itte	eq
 80a264c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2650:	3401      	addeq	r4, #1
 80a2652:	3d01      	subne	r5, #1
 80a2654:	e74e      	b.n	80a24f4 <__adddf3+0x8c>
 80a2656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a265a:	bf18      	it	ne
 80a265c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2660:	d029      	beq.n	80a26b6 <__adddf3+0x24e>
 80a2662:	ea94 0f05 	teq	r4, r5
 80a2666:	bf08      	it	eq
 80a2668:	ea90 0f02 	teqeq	r0, r2
 80a266c:	d005      	beq.n	80a267a <__adddf3+0x212>
 80a266e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2672:	bf04      	itt	eq
 80a2674:	4619      	moveq	r1, r3
 80a2676:	4610      	moveq	r0, r2
 80a2678:	bd30      	pop	{r4, r5, pc}
 80a267a:	ea91 0f03 	teq	r1, r3
 80a267e:	bf1e      	ittt	ne
 80a2680:	2100      	movne	r1, #0
 80a2682:	2000      	movne	r0, #0
 80a2684:	bd30      	popne	{r4, r5, pc}
 80a2686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a268a:	d105      	bne.n	80a2698 <__adddf3+0x230>
 80a268c:	0040      	lsls	r0, r0, #1
 80a268e:	4149      	adcs	r1, r1
 80a2690:	bf28      	it	cs
 80a2692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2696:	bd30      	pop	{r4, r5, pc}
 80a2698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a269c:	bf3c      	itt	cc
 80a269e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a26a2:	bd30      	popcc	{r4, r5, pc}
 80a26a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a26a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a26ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a26b0:	f04f 0000 	mov.w	r0, #0
 80a26b4:	bd30      	pop	{r4, r5, pc}
 80a26b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26ba:	bf1a      	itte	ne
 80a26bc:	4619      	movne	r1, r3
 80a26be:	4610      	movne	r0, r2
 80a26c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a26c4:	bf1c      	itt	ne
 80a26c6:	460b      	movne	r3, r1
 80a26c8:	4602      	movne	r2, r0
 80a26ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a26ce:	bf06      	itte	eq
 80a26d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a26d4:	ea91 0f03 	teqeq	r1, r3
 80a26d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a26dc:	bd30      	pop	{r4, r5, pc}
 80a26de:	bf00      	nop

080a26e0 <__aeabi_ui2d>:
 80a26e0:	f090 0f00 	teq	r0, #0
 80a26e4:	bf04      	itt	eq
 80a26e6:	2100      	moveq	r1, #0
 80a26e8:	4770      	bxeq	lr
 80a26ea:	b530      	push	{r4, r5, lr}
 80a26ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a26f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a26f4:	f04f 0500 	mov.w	r5, #0
 80a26f8:	f04f 0100 	mov.w	r1, #0
 80a26fc:	e750      	b.n	80a25a0 <__adddf3+0x138>
 80a26fe:	bf00      	nop

080a2700 <__aeabi_i2d>:
 80a2700:	f090 0f00 	teq	r0, #0
 80a2704:	bf04      	itt	eq
 80a2706:	2100      	moveq	r1, #0
 80a2708:	4770      	bxeq	lr
 80a270a:	b530      	push	{r4, r5, lr}
 80a270c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2718:	bf48      	it	mi
 80a271a:	4240      	negmi	r0, r0
 80a271c:	f04f 0100 	mov.w	r1, #0
 80a2720:	e73e      	b.n	80a25a0 <__adddf3+0x138>
 80a2722:	bf00      	nop

080a2724 <__aeabi_f2d>:
 80a2724:	0042      	lsls	r2, r0, #1
 80a2726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a272a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a272e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2732:	bf1f      	itttt	ne
 80a2734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a273c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2740:	4770      	bxne	lr
 80a2742:	f092 0f00 	teq	r2, #0
 80a2746:	bf14      	ite	ne
 80a2748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a274c:	4770      	bxeq	lr
 80a274e:	b530      	push	{r4, r5, lr}
 80a2750:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a275c:	e720      	b.n	80a25a0 <__adddf3+0x138>
 80a275e:	bf00      	nop

080a2760 <__aeabi_ul2d>:
 80a2760:	ea50 0201 	orrs.w	r2, r0, r1
 80a2764:	bf08      	it	eq
 80a2766:	4770      	bxeq	lr
 80a2768:	b530      	push	{r4, r5, lr}
 80a276a:	f04f 0500 	mov.w	r5, #0
 80a276e:	e00a      	b.n	80a2786 <__aeabi_l2d+0x16>

080a2770 <__aeabi_l2d>:
 80a2770:	ea50 0201 	orrs.w	r2, r0, r1
 80a2774:	bf08      	it	eq
 80a2776:	4770      	bxeq	lr
 80a2778:	b530      	push	{r4, r5, lr}
 80a277a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a277e:	d502      	bpl.n	80a2786 <__aeabi_l2d+0x16>
 80a2780:	4240      	negs	r0, r0
 80a2782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a278a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a278e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2792:	f43f aedc 	beq.w	80a254e <__adddf3+0xe6>
 80a2796:	f04f 0203 	mov.w	r2, #3
 80a279a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a279e:	bf18      	it	ne
 80a27a0:	3203      	addne	r2, #3
 80a27a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a27a6:	bf18      	it	ne
 80a27a8:	3203      	addne	r2, #3
 80a27aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a27ae:	f1c2 0320 	rsb	r3, r2, #32
 80a27b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a27b6:	fa20 f002 	lsr.w	r0, r0, r2
 80a27ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80a27be:	ea40 000e 	orr.w	r0, r0, lr
 80a27c2:	fa21 f102 	lsr.w	r1, r1, r2
 80a27c6:	4414      	add	r4, r2
 80a27c8:	e6c1      	b.n	80a254e <__adddf3+0xe6>
 80a27ca:	bf00      	nop

080a27cc <__aeabi_dmul>:
 80a27cc:	b570      	push	{r4, r5, r6, lr}
 80a27ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a27d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a27d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a27da:	bf1d      	ittte	ne
 80a27dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a27e0:	ea94 0f0c 	teqne	r4, ip
 80a27e4:	ea95 0f0c 	teqne	r5, ip
 80a27e8:	f000 f8de 	bleq	80a29a8 <__aeabi_dmul+0x1dc>
 80a27ec:	442c      	add	r4, r5
 80a27ee:	ea81 0603 	eor.w	r6, r1, r3
 80a27f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a27f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a27fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a27fe:	bf18      	it	ne
 80a2800:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a280c:	d038      	beq.n	80a2880 <__aeabi_dmul+0xb4>
 80a280e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2812:	f04f 0500 	mov.w	r5, #0
 80a2816:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a281a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a281e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2822:	f04f 0600 	mov.w	r6, #0
 80a2826:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a282a:	f09c 0f00 	teq	ip, #0
 80a282e:	bf18      	it	ne
 80a2830:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2834:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2838:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a283c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2840:	d204      	bcs.n	80a284c <__aeabi_dmul+0x80>
 80a2842:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2846:	416d      	adcs	r5, r5
 80a2848:	eb46 0606 	adc.w	r6, r6, r6
 80a284c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2850:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2854:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2858:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a285c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2860:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2864:	bf88      	it	hi
 80a2866:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a286a:	d81e      	bhi.n	80a28aa <__aeabi_dmul+0xde>
 80a286c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2870:	bf08      	it	eq
 80a2872:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2876:	f150 0000 	adcs.w	r0, r0, #0
 80a287a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a287e:	bd70      	pop	{r4, r5, r6, pc}
 80a2880:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2884:	ea46 0101 	orr.w	r1, r6, r1
 80a2888:	ea40 0002 	orr.w	r0, r0, r2
 80a288c:	ea81 0103 	eor.w	r1, r1, r3
 80a2890:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2894:	bfc2      	ittt	gt
 80a2896:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a289a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a289e:	bd70      	popgt	{r4, r5, r6, pc}
 80a28a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a28a4:	f04f 0e00 	mov.w	lr, #0
 80a28a8:	3c01      	subs	r4, #1
 80a28aa:	f300 80ab 	bgt.w	80a2a04 <__aeabi_dmul+0x238>
 80a28ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a28b2:	bfde      	ittt	le
 80a28b4:	2000      	movle	r0, #0
 80a28b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a28ba:	bd70      	pople	{r4, r5, r6, pc}
 80a28bc:	f1c4 0400 	rsb	r4, r4, #0
 80a28c0:	3c20      	subs	r4, #32
 80a28c2:	da35      	bge.n	80a2930 <__aeabi_dmul+0x164>
 80a28c4:	340c      	adds	r4, #12
 80a28c6:	dc1b      	bgt.n	80a2900 <__aeabi_dmul+0x134>
 80a28c8:	f104 0414 	add.w	r4, r4, #20
 80a28cc:	f1c4 0520 	rsb	r5, r4, #32
 80a28d0:	fa00 f305 	lsl.w	r3, r0, r5
 80a28d4:	fa20 f004 	lsr.w	r0, r0, r4
 80a28d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a28dc:	ea40 0002 	orr.w	r0, r0, r2
 80a28e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a28e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a28e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a28ec:	fa21 f604 	lsr.w	r6, r1, r4
 80a28f0:	eb42 0106 	adc.w	r1, r2, r6
 80a28f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a28f8:	bf08      	it	eq
 80a28fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a28fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2900:	f1c4 040c 	rsb	r4, r4, #12
 80a2904:	f1c4 0520 	rsb	r5, r4, #32
 80a2908:	fa00 f304 	lsl.w	r3, r0, r4
 80a290c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2910:	fa01 f204 	lsl.w	r2, r1, r4
 80a2914:	ea40 0002 	orr.w	r0, r0, r2
 80a2918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a291c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2920:	f141 0100 	adc.w	r1, r1, #0
 80a2924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2928:	bf08      	it	eq
 80a292a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a292e:	bd70      	pop	{r4, r5, r6, pc}
 80a2930:	f1c4 0520 	rsb	r5, r4, #32
 80a2934:	fa00 f205 	lsl.w	r2, r0, r5
 80a2938:	ea4e 0e02 	orr.w	lr, lr, r2
 80a293c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2940:	fa01 f205 	lsl.w	r2, r1, r5
 80a2944:	ea43 0302 	orr.w	r3, r3, r2
 80a2948:	fa21 f004 	lsr.w	r0, r1, r4
 80a294c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2950:	fa21 f204 	lsr.w	r2, r1, r4
 80a2954:	ea20 0002 	bic.w	r0, r0, r2
 80a2958:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a295c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2960:	bf08      	it	eq
 80a2962:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2966:	bd70      	pop	{r4, r5, r6, pc}
 80a2968:	f094 0f00 	teq	r4, #0
 80a296c:	d10f      	bne.n	80a298e <__aeabi_dmul+0x1c2>
 80a296e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2972:	0040      	lsls	r0, r0, #1
 80a2974:	eb41 0101 	adc.w	r1, r1, r1
 80a2978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a297c:	bf08      	it	eq
 80a297e:	3c01      	subeq	r4, #1
 80a2980:	d0f7      	beq.n	80a2972 <__aeabi_dmul+0x1a6>
 80a2982:	ea41 0106 	orr.w	r1, r1, r6
 80a2986:	f095 0f00 	teq	r5, #0
 80a298a:	bf18      	it	ne
 80a298c:	4770      	bxne	lr
 80a298e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2992:	0052      	lsls	r2, r2, #1
 80a2994:	eb43 0303 	adc.w	r3, r3, r3
 80a2998:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a299c:	bf08      	it	eq
 80a299e:	3d01      	subeq	r5, #1
 80a29a0:	d0f7      	beq.n	80a2992 <__aeabi_dmul+0x1c6>
 80a29a2:	ea43 0306 	orr.w	r3, r3, r6
 80a29a6:	4770      	bx	lr
 80a29a8:	ea94 0f0c 	teq	r4, ip
 80a29ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a29b0:	bf18      	it	ne
 80a29b2:	ea95 0f0c 	teqne	r5, ip
 80a29b6:	d00c      	beq.n	80a29d2 <__aeabi_dmul+0x206>
 80a29b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a29bc:	bf18      	it	ne
 80a29be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a29c2:	d1d1      	bne.n	80a2968 <__aeabi_dmul+0x19c>
 80a29c4:	ea81 0103 	eor.w	r1, r1, r3
 80a29c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a29cc:	f04f 0000 	mov.w	r0, #0
 80a29d0:	bd70      	pop	{r4, r5, r6, pc}
 80a29d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a29d6:	bf06      	itte	eq
 80a29d8:	4610      	moveq	r0, r2
 80a29da:	4619      	moveq	r1, r3
 80a29dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a29e0:	d019      	beq.n	80a2a16 <__aeabi_dmul+0x24a>
 80a29e2:	ea94 0f0c 	teq	r4, ip
 80a29e6:	d102      	bne.n	80a29ee <__aeabi_dmul+0x222>
 80a29e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a29ec:	d113      	bne.n	80a2a16 <__aeabi_dmul+0x24a>
 80a29ee:	ea95 0f0c 	teq	r5, ip
 80a29f2:	d105      	bne.n	80a2a00 <__aeabi_dmul+0x234>
 80a29f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a29f8:	bf1c      	itt	ne
 80a29fa:	4610      	movne	r0, r2
 80a29fc:	4619      	movne	r1, r3
 80a29fe:	d10a      	bne.n	80a2a16 <__aeabi_dmul+0x24a>
 80a2a00:	ea81 0103 	eor.w	r1, r1, r3
 80a2a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a10:	f04f 0000 	mov.w	r0, #0
 80a2a14:	bd70      	pop	{r4, r5, r6, pc}
 80a2a16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2a1e:	bd70      	pop	{r4, r5, r6, pc}

080a2a20 <__aeabi_ddiv>:
 80a2a20:	b570      	push	{r4, r5, r6, lr}
 80a2a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2a2e:	bf1d      	ittte	ne
 80a2a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2a34:	ea94 0f0c 	teqne	r4, ip
 80a2a38:	ea95 0f0c 	teqne	r5, ip
 80a2a3c:	f000 f8a7 	bleq	80a2b8e <__aeabi_ddiv+0x16e>
 80a2a40:	eba4 0405 	sub.w	r4, r4, r5
 80a2a44:	ea81 0e03 	eor.w	lr, r1, r3
 80a2a48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2a4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2a50:	f000 8088 	beq.w	80a2b64 <__aeabi_ddiv+0x144>
 80a2a54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2a58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2a5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2a60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2a64:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2a68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2a6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2a70:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2a74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2a78:	429d      	cmp	r5, r3
 80a2a7a:	bf08      	it	eq
 80a2a7c:	4296      	cmpeq	r6, r2
 80a2a7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2a82:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2a86:	d202      	bcs.n	80a2a8e <__aeabi_ddiv+0x6e>
 80a2a88:	085b      	lsrs	r3, r3, #1
 80a2a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a8e:	1ab6      	subs	r6, r6, r2
 80a2a90:	eb65 0503 	sbc.w	r5, r5, r3
 80a2a94:	085b      	lsrs	r3, r3, #1
 80a2a96:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2a9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2a9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2aa2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2aaa:	bf22      	ittt	cs
 80a2aac:	1ab6      	subcs	r6, r6, r2
 80a2aae:	4675      	movcs	r5, lr
 80a2ab0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2ab4:	085b      	lsrs	r3, r3, #1
 80a2ab6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2aba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2abe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2ac2:	bf22      	ittt	cs
 80a2ac4:	1ab6      	subcs	r6, r6, r2
 80a2ac6:	4675      	movcs	r5, lr
 80a2ac8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2acc:	085b      	lsrs	r3, r3, #1
 80a2ace:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2ad2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2ad6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2ada:	bf22      	ittt	cs
 80a2adc:	1ab6      	subcs	r6, r6, r2
 80a2ade:	4675      	movcs	r5, lr
 80a2ae0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2ae4:	085b      	lsrs	r3, r3, #1
 80a2ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2aea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2aee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2af2:	bf22      	ittt	cs
 80a2af4:	1ab6      	subcs	r6, r6, r2
 80a2af6:	4675      	movcs	r5, lr
 80a2af8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2afc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2b00:	d018      	beq.n	80a2b34 <__aeabi_ddiv+0x114>
 80a2b02:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2b06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2b0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2b0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2b12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2b16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2b1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2b1e:	d1c0      	bne.n	80a2aa2 <__aeabi_ddiv+0x82>
 80a2b20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2b24:	d10b      	bne.n	80a2b3e <__aeabi_ddiv+0x11e>
 80a2b26:	ea41 0100 	orr.w	r1, r1, r0
 80a2b2a:	f04f 0000 	mov.w	r0, #0
 80a2b2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2b32:	e7b6      	b.n	80a2aa2 <__aeabi_ddiv+0x82>
 80a2b34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2b38:	bf04      	itt	eq
 80a2b3a:	4301      	orreq	r1, r0
 80a2b3c:	2000      	moveq	r0, #0
 80a2b3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2b42:	bf88      	it	hi
 80a2b44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2b48:	f63f aeaf 	bhi.w	80a28aa <__aeabi_dmul+0xde>
 80a2b4c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2b50:	bf04      	itt	eq
 80a2b52:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2b5a:	f150 0000 	adcs.w	r0, r0, #0
 80a2b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2b62:	bd70      	pop	{r4, r5, r6, pc}
 80a2b64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2b68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2b6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2b70:	bfc2      	ittt	gt
 80a2b72:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2b76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2b7a:	bd70      	popgt	{r4, r5, r6, pc}
 80a2b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b80:	f04f 0e00 	mov.w	lr, #0
 80a2b84:	3c01      	subs	r4, #1
 80a2b86:	e690      	b.n	80a28aa <__aeabi_dmul+0xde>
 80a2b88:	ea45 0e06 	orr.w	lr, r5, r6
 80a2b8c:	e68d      	b.n	80a28aa <__aeabi_dmul+0xde>
 80a2b8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2b92:	ea94 0f0c 	teq	r4, ip
 80a2b96:	bf08      	it	eq
 80a2b98:	ea95 0f0c 	teqeq	r5, ip
 80a2b9c:	f43f af3b 	beq.w	80a2a16 <__aeabi_dmul+0x24a>
 80a2ba0:	ea94 0f0c 	teq	r4, ip
 80a2ba4:	d10a      	bne.n	80a2bbc <__aeabi_ddiv+0x19c>
 80a2ba6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2baa:	f47f af34 	bne.w	80a2a16 <__aeabi_dmul+0x24a>
 80a2bae:	ea95 0f0c 	teq	r5, ip
 80a2bb2:	f47f af25 	bne.w	80a2a00 <__aeabi_dmul+0x234>
 80a2bb6:	4610      	mov	r0, r2
 80a2bb8:	4619      	mov	r1, r3
 80a2bba:	e72c      	b.n	80a2a16 <__aeabi_dmul+0x24a>
 80a2bbc:	ea95 0f0c 	teq	r5, ip
 80a2bc0:	d106      	bne.n	80a2bd0 <__aeabi_ddiv+0x1b0>
 80a2bc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2bc6:	f43f aefd 	beq.w	80a29c4 <__aeabi_dmul+0x1f8>
 80a2bca:	4610      	mov	r0, r2
 80a2bcc:	4619      	mov	r1, r3
 80a2bce:	e722      	b.n	80a2a16 <__aeabi_dmul+0x24a>
 80a2bd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2bd4:	bf18      	it	ne
 80a2bd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2bda:	f47f aec5 	bne.w	80a2968 <__aeabi_dmul+0x19c>
 80a2bde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2be2:	f47f af0d 	bne.w	80a2a00 <__aeabi_dmul+0x234>
 80a2be6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2bea:	f47f aeeb 	bne.w	80a29c4 <__aeabi_dmul+0x1f8>
 80a2bee:	e712      	b.n	80a2a16 <__aeabi_dmul+0x24a>

080a2bf0 <__gedf2>:
 80a2bf0:	f04f 3cff 	mov.w	ip, #4294967295
 80a2bf4:	e006      	b.n	80a2c04 <__cmpdf2+0x4>
 80a2bf6:	bf00      	nop

080a2bf8 <__ledf2>:
 80a2bf8:	f04f 0c01 	mov.w	ip, #1
 80a2bfc:	e002      	b.n	80a2c04 <__cmpdf2+0x4>
 80a2bfe:	bf00      	nop

080a2c00 <__cmpdf2>:
 80a2c00:	f04f 0c01 	mov.w	ip, #1
 80a2c04:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2c08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2c14:	bf18      	it	ne
 80a2c16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2c1a:	d01b      	beq.n	80a2c54 <__cmpdf2+0x54>
 80a2c1c:	b001      	add	sp, #4
 80a2c1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2c22:	bf0c      	ite	eq
 80a2c24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2c28:	ea91 0f03 	teqne	r1, r3
 80a2c2c:	bf02      	ittt	eq
 80a2c2e:	ea90 0f02 	teqeq	r0, r2
 80a2c32:	2000      	moveq	r0, #0
 80a2c34:	4770      	bxeq	lr
 80a2c36:	f110 0f00 	cmn.w	r0, #0
 80a2c3a:	ea91 0f03 	teq	r1, r3
 80a2c3e:	bf58      	it	pl
 80a2c40:	4299      	cmppl	r1, r3
 80a2c42:	bf08      	it	eq
 80a2c44:	4290      	cmpeq	r0, r2
 80a2c46:	bf2c      	ite	cs
 80a2c48:	17d8      	asrcs	r0, r3, #31
 80a2c4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2c4e:	f040 0001 	orr.w	r0, r0, #1
 80a2c52:	4770      	bx	lr
 80a2c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c5c:	d102      	bne.n	80a2c64 <__cmpdf2+0x64>
 80a2c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2c62:	d107      	bne.n	80a2c74 <__cmpdf2+0x74>
 80a2c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c6c:	d1d6      	bne.n	80a2c1c <__cmpdf2+0x1c>
 80a2c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2c72:	d0d3      	beq.n	80a2c1c <__cmpdf2+0x1c>
 80a2c74:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2c78:	4770      	bx	lr
 80a2c7a:	bf00      	nop

080a2c7c <__aeabi_cdrcmple>:
 80a2c7c:	4684      	mov	ip, r0
 80a2c7e:	4610      	mov	r0, r2
 80a2c80:	4662      	mov	r2, ip
 80a2c82:	468c      	mov	ip, r1
 80a2c84:	4619      	mov	r1, r3
 80a2c86:	4663      	mov	r3, ip
 80a2c88:	e000      	b.n	80a2c8c <__aeabi_cdcmpeq>
 80a2c8a:	bf00      	nop

080a2c8c <__aeabi_cdcmpeq>:
 80a2c8c:	b501      	push	{r0, lr}
 80a2c8e:	f7ff ffb7 	bl	80a2c00 <__cmpdf2>
 80a2c92:	2800      	cmp	r0, #0
 80a2c94:	bf48      	it	mi
 80a2c96:	f110 0f00 	cmnmi.w	r0, #0
 80a2c9a:	bd01      	pop	{r0, pc}

080a2c9c <__aeabi_dcmpeq>:
 80a2c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ca0:	f7ff fff4 	bl	80a2c8c <__aeabi_cdcmpeq>
 80a2ca4:	bf0c      	ite	eq
 80a2ca6:	2001      	moveq	r0, #1
 80a2ca8:	2000      	movne	r0, #0
 80a2caa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cae:	bf00      	nop

080a2cb0 <__aeabi_dcmplt>:
 80a2cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cb4:	f7ff ffea 	bl	80a2c8c <__aeabi_cdcmpeq>
 80a2cb8:	bf34      	ite	cc
 80a2cba:	2001      	movcc	r0, #1
 80a2cbc:	2000      	movcs	r0, #0
 80a2cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cc2:	bf00      	nop

080a2cc4 <__aeabi_dcmple>:
 80a2cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cc8:	f7ff ffe0 	bl	80a2c8c <__aeabi_cdcmpeq>
 80a2ccc:	bf94      	ite	ls
 80a2cce:	2001      	movls	r0, #1
 80a2cd0:	2000      	movhi	r0, #0
 80a2cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cd6:	bf00      	nop

080a2cd8 <__aeabi_dcmpge>:
 80a2cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cdc:	f7ff ffce 	bl	80a2c7c <__aeabi_cdrcmple>
 80a2ce0:	bf94      	ite	ls
 80a2ce2:	2001      	movls	r0, #1
 80a2ce4:	2000      	movhi	r0, #0
 80a2ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cea:	bf00      	nop

080a2cec <__aeabi_dcmpgt>:
 80a2cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2cf0:	f7ff ffc4 	bl	80a2c7c <__aeabi_cdrcmple>
 80a2cf4:	bf34      	ite	cc
 80a2cf6:	2001      	movcc	r0, #1
 80a2cf8:	2000      	movcs	r0, #0
 80a2cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2cfe:	bf00      	nop

080a2d00 <__aeabi_dcmpun>:
 80a2d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d08:	d102      	bne.n	80a2d10 <__aeabi_dcmpun+0x10>
 80a2d0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2d0e:	d10a      	bne.n	80a2d26 <__aeabi_dcmpun+0x26>
 80a2d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d18:	d102      	bne.n	80a2d20 <__aeabi_dcmpun+0x20>
 80a2d1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2d1e:	d102      	bne.n	80a2d26 <__aeabi_dcmpun+0x26>
 80a2d20:	f04f 0000 	mov.w	r0, #0
 80a2d24:	4770      	bx	lr
 80a2d26:	f04f 0001 	mov.w	r0, #1
 80a2d2a:	4770      	bx	lr

080a2d2c <__aeabi_d2iz>:
 80a2d2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2d30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2d34:	d215      	bcs.n	80a2d62 <__aeabi_d2iz+0x36>
 80a2d36:	d511      	bpl.n	80a2d5c <__aeabi_d2iz+0x30>
 80a2d38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2d3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2d40:	d912      	bls.n	80a2d68 <__aeabi_d2iz+0x3c>
 80a2d42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2d52:	fa23 f002 	lsr.w	r0, r3, r2
 80a2d56:	bf18      	it	ne
 80a2d58:	4240      	negne	r0, r0
 80a2d5a:	4770      	bx	lr
 80a2d5c:	f04f 0000 	mov.w	r0, #0
 80a2d60:	4770      	bx	lr
 80a2d62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2d66:	d105      	bne.n	80a2d74 <__aeabi_d2iz+0x48>
 80a2d68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2d6c:	bf08      	it	eq
 80a2d6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2d72:	4770      	bx	lr
 80a2d74:	f04f 0000 	mov.w	r0, #0
 80a2d78:	4770      	bx	lr
 80a2d7a:	bf00      	nop

080a2d7c <__aeabi_d2uiz>:
 80a2d7c:	004a      	lsls	r2, r1, #1
 80a2d7e:	d211      	bcs.n	80a2da4 <__aeabi_d2uiz+0x28>
 80a2d80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2d84:	d211      	bcs.n	80a2daa <__aeabi_d2uiz+0x2e>
 80a2d86:	d50d      	bpl.n	80a2da4 <__aeabi_d2uiz+0x28>
 80a2d88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2d8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2d90:	d40e      	bmi.n	80a2db0 <__aeabi_d2uiz+0x34>
 80a2d92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2d9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2d9e:	fa23 f002 	lsr.w	r0, r3, r2
 80a2da2:	4770      	bx	lr
 80a2da4:	f04f 0000 	mov.w	r0, #0
 80a2da8:	4770      	bx	lr
 80a2daa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2dae:	d102      	bne.n	80a2db6 <__aeabi_d2uiz+0x3a>
 80a2db0:	f04f 30ff 	mov.w	r0, #4294967295
 80a2db4:	4770      	bx	lr
 80a2db6:	f04f 0000 	mov.w	r0, #0
 80a2dba:	4770      	bx	lr

080a2dbc <__aeabi_d2f>:
 80a2dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2dc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2dc4:	bf24      	itt	cs
 80a2dc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2dca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2dce:	d90d      	bls.n	80a2dec <__aeabi_d2f+0x30>
 80a2dd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2dd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2dd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2ddc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2de0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2de4:	bf08      	it	eq
 80a2de6:	f020 0001 	biceq.w	r0, r0, #1
 80a2dea:	4770      	bx	lr
 80a2dec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2df0:	d121      	bne.n	80a2e36 <__aeabi_d2f+0x7a>
 80a2df2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2df6:	bfbc      	itt	lt
 80a2df8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2dfc:	4770      	bxlt	lr
 80a2dfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2e02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2e06:	f1c2 0218 	rsb	r2, r2, #24
 80a2e0a:	f1c2 0c20 	rsb	ip, r2, #32
 80a2e0e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2e12:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e16:	bf18      	it	ne
 80a2e18:	f040 0001 	orrne.w	r0, r0, #1
 80a2e1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2e20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2e24:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2e28:	ea40 000c 	orr.w	r0, r0, ip
 80a2e2c:	fa23 f302 	lsr.w	r3, r3, r2
 80a2e30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2e34:	e7cc      	b.n	80a2dd0 <__aeabi_d2f+0x14>
 80a2e36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2e3a:	d107      	bne.n	80a2e4c <__aeabi_d2f+0x90>
 80a2e3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2e40:	bf1e      	ittt	ne
 80a2e42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2e46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2e4a:	4770      	bxne	lr
 80a2e4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2e50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2e58:	4770      	bx	lr
 80a2e5a:	bf00      	nop

080a2e5c <__gesf2>:
 80a2e5c:	f04f 3cff 	mov.w	ip, #4294967295
 80a2e60:	e006      	b.n	80a2e70 <__cmpsf2+0x4>
 80a2e62:	bf00      	nop

080a2e64 <__lesf2>:
 80a2e64:	f04f 0c01 	mov.w	ip, #1
 80a2e68:	e002      	b.n	80a2e70 <__cmpsf2+0x4>
 80a2e6a:	bf00      	nop

080a2e6c <__cmpsf2>:
 80a2e6c:	f04f 0c01 	mov.w	ip, #1
 80a2e70:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2e74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2e78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e80:	bf18      	it	ne
 80a2e82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e86:	d011      	beq.n	80a2eac <__cmpsf2+0x40>
 80a2e88:	b001      	add	sp, #4
 80a2e8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2e8e:	bf18      	it	ne
 80a2e90:	ea90 0f01 	teqne	r0, r1
 80a2e94:	bf58      	it	pl
 80a2e96:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2e9a:	bf88      	it	hi
 80a2e9c:	17c8      	asrhi	r0, r1, #31
 80a2e9e:	bf38      	it	cc
 80a2ea0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2ea4:	bf18      	it	ne
 80a2ea6:	f040 0001 	orrne.w	r0, r0, #1
 80a2eaa:	4770      	bx	lr
 80a2eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2eb0:	d102      	bne.n	80a2eb8 <__cmpsf2+0x4c>
 80a2eb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2eb6:	d105      	bne.n	80a2ec4 <__cmpsf2+0x58>
 80a2eb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2ebc:	d1e4      	bne.n	80a2e88 <__cmpsf2+0x1c>
 80a2ebe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2ec2:	d0e1      	beq.n	80a2e88 <__cmpsf2+0x1c>
 80a2ec4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2ec8:	4770      	bx	lr
 80a2eca:	bf00      	nop

080a2ecc <__aeabi_cfrcmple>:
 80a2ecc:	4684      	mov	ip, r0
 80a2ece:	4608      	mov	r0, r1
 80a2ed0:	4661      	mov	r1, ip
 80a2ed2:	e7ff      	b.n	80a2ed4 <__aeabi_cfcmpeq>

080a2ed4 <__aeabi_cfcmpeq>:
 80a2ed4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2ed6:	f7ff ffc9 	bl	80a2e6c <__cmpsf2>
 80a2eda:	2800      	cmp	r0, #0
 80a2edc:	bf48      	it	mi
 80a2ede:	f110 0f00 	cmnmi.w	r0, #0
 80a2ee2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2ee4 <__aeabi_fcmpeq>:
 80a2ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ee8:	f7ff fff4 	bl	80a2ed4 <__aeabi_cfcmpeq>
 80a2eec:	bf0c      	ite	eq
 80a2eee:	2001      	moveq	r0, #1
 80a2ef0:	2000      	movne	r0, #0
 80a2ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ef6:	bf00      	nop

080a2ef8 <__aeabi_fcmplt>:
 80a2ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2efc:	f7ff ffea 	bl	80a2ed4 <__aeabi_cfcmpeq>
 80a2f00:	bf34      	ite	cc
 80a2f02:	2001      	movcc	r0, #1
 80a2f04:	2000      	movcs	r0, #0
 80a2f06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f0a:	bf00      	nop

080a2f0c <__aeabi_fcmple>:
 80a2f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f10:	f7ff ffe0 	bl	80a2ed4 <__aeabi_cfcmpeq>
 80a2f14:	bf94      	ite	ls
 80a2f16:	2001      	movls	r0, #1
 80a2f18:	2000      	movhi	r0, #0
 80a2f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f1e:	bf00      	nop

080a2f20 <__aeabi_fcmpge>:
 80a2f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f24:	f7ff ffd2 	bl	80a2ecc <__aeabi_cfrcmple>
 80a2f28:	bf94      	ite	ls
 80a2f2a:	2001      	movls	r0, #1
 80a2f2c:	2000      	movhi	r0, #0
 80a2f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f32:	bf00      	nop

080a2f34 <__aeabi_fcmpgt>:
 80a2f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f38:	f7ff ffc8 	bl	80a2ecc <__aeabi_cfrcmple>
 80a2f3c:	bf34      	ite	cc
 80a2f3e:	2001      	movcc	r0, #1
 80a2f40:	2000      	movcs	r0, #0
 80a2f42:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f46:	bf00      	nop

080a2f48 <__aeabi_f2uiz>:
 80a2f48:	0042      	lsls	r2, r0, #1
 80a2f4a:	d20e      	bcs.n	80a2f6a <__aeabi_f2uiz+0x22>
 80a2f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2f50:	d30b      	bcc.n	80a2f6a <__aeabi_f2uiz+0x22>
 80a2f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2f5a:	d409      	bmi.n	80a2f70 <__aeabi_f2uiz+0x28>
 80a2f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2f64:	fa23 f002 	lsr.w	r0, r3, r2
 80a2f68:	4770      	bx	lr
 80a2f6a:	f04f 0000 	mov.w	r0, #0
 80a2f6e:	4770      	bx	lr
 80a2f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2f74:	d101      	bne.n	80a2f7a <__aeabi_f2uiz+0x32>
 80a2f76:	0242      	lsls	r2, r0, #9
 80a2f78:	d102      	bne.n	80a2f80 <__aeabi_f2uiz+0x38>
 80a2f7a:	f04f 30ff 	mov.w	r0, #4294967295
 80a2f7e:	4770      	bx	lr
 80a2f80:	f04f 0000 	mov.w	r0, #0
 80a2f84:	4770      	bx	lr
 80a2f86:	bf00      	nop

080a2f88 <__aeabi_uldivmod>:
 80a2f88:	b953      	cbnz	r3, 80a2fa0 <__aeabi_uldivmod+0x18>
 80a2f8a:	b94a      	cbnz	r2, 80a2fa0 <__aeabi_uldivmod+0x18>
 80a2f8c:	2900      	cmp	r1, #0
 80a2f8e:	bf08      	it	eq
 80a2f90:	2800      	cmpeq	r0, #0
 80a2f92:	bf1c      	itt	ne
 80a2f94:	f04f 31ff 	movne.w	r1, #4294967295
 80a2f98:	f04f 30ff 	movne.w	r0, #4294967295
 80a2f9c:	f000 b9a6 	b.w	80a32ec <__aeabi_idiv0>
 80a2fa0:	f1ad 0c08 	sub.w	ip, sp, #8
 80a2fa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a2fa8:	f000 f82a 	bl	80a3000 <__udivmoddi4>
 80a2fac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2fb4:	b004      	add	sp, #16
 80a2fb6:	4770      	bx	lr

080a2fb8 <__aeabi_d2ulz>:
 80a2fb8:	b5d0      	push	{r4, r6, r7, lr}
 80a2fba:	2200      	movs	r2, #0
 80a2fbc:	4b0e      	ldr	r3, [pc, #56]	; (80a2ff8 <__aeabi_d2ulz+0x40>)
 80a2fbe:	4606      	mov	r6, r0
 80a2fc0:	460f      	mov	r7, r1
 80a2fc2:	f7ff fc03 	bl	80a27cc <__aeabi_dmul>
 80a2fc6:	f7ff fed9 	bl	80a2d7c <__aeabi_d2uiz>
 80a2fca:	4604      	mov	r4, r0
 80a2fcc:	f7ff fb88 	bl	80a26e0 <__aeabi_ui2d>
 80a2fd0:	2200      	movs	r2, #0
 80a2fd2:	4b0a      	ldr	r3, [pc, #40]	; (80a2ffc <__aeabi_d2ulz+0x44>)
 80a2fd4:	f7ff fbfa 	bl	80a27cc <__aeabi_dmul>
 80a2fd8:	4602      	mov	r2, r0
 80a2fda:	460b      	mov	r3, r1
 80a2fdc:	4630      	mov	r0, r6
 80a2fde:	4639      	mov	r1, r7
 80a2fe0:	f7ff fa40 	bl	80a2464 <__aeabi_dsub>
 80a2fe4:	f7ff feca 	bl	80a2d7c <__aeabi_d2uiz>
 80a2fe8:	4623      	mov	r3, r4
 80a2fea:	2200      	movs	r2, #0
 80a2fec:	ea42 0200 	orr.w	r2, r2, r0
 80a2ff0:	4610      	mov	r0, r2
 80a2ff2:	4619      	mov	r1, r3
 80a2ff4:	bdd0      	pop	{r4, r6, r7, pc}
 80a2ff6:	bf00      	nop
 80a2ff8:	3df00000 	.word	0x3df00000
 80a2ffc:	41f00000 	.word	0x41f00000

080a3000 <__udivmoddi4>:
 80a3000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3004:	468c      	mov	ip, r1
 80a3006:	460c      	mov	r4, r1
 80a3008:	4605      	mov	r5, r0
 80a300a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a300c:	2b00      	cmp	r3, #0
 80a300e:	d14f      	bne.n	80a30b0 <__udivmoddi4+0xb0>
 80a3010:	428a      	cmp	r2, r1
 80a3012:	4617      	mov	r7, r2
 80a3014:	d96b      	bls.n	80a30ee <__udivmoddi4+0xee>
 80a3016:	fab2 fe82 	clz	lr, r2
 80a301a:	f1be 0f00 	cmp.w	lr, #0
 80a301e:	d00b      	beq.n	80a3038 <__udivmoddi4+0x38>
 80a3020:	f1ce 0520 	rsb	r5, lr, #32
 80a3024:	fa20 f505 	lsr.w	r5, r0, r5
 80a3028:	fa01 f30e 	lsl.w	r3, r1, lr
 80a302c:	ea45 0c03 	orr.w	ip, r5, r3
 80a3030:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3034:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3038:	0c39      	lsrs	r1, r7, #16
 80a303a:	fbbc f0f1 	udiv	r0, ip, r1
 80a303e:	b2ba      	uxth	r2, r7
 80a3040:	fb01 c310 	mls	r3, r1, r0, ip
 80a3044:	fb00 f802 	mul.w	r8, r0, r2
 80a3048:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a304c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3050:	45a0      	cmp	r8, r4
 80a3052:	d909      	bls.n	80a3068 <__udivmoddi4+0x68>
 80a3054:	19e4      	adds	r4, r4, r7
 80a3056:	f100 33ff 	add.w	r3, r0, #4294967295
 80a305a:	f080 8128 	bcs.w	80a32ae <__udivmoddi4+0x2ae>
 80a305e:	45a0      	cmp	r8, r4
 80a3060:	f240 8125 	bls.w	80a32ae <__udivmoddi4+0x2ae>
 80a3064:	3802      	subs	r0, #2
 80a3066:	443c      	add	r4, r7
 80a3068:	ebc8 0404 	rsb	r4, r8, r4
 80a306c:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3070:	fb01 4c13 	mls	ip, r1, r3, r4
 80a3074:	fb03 f202 	mul.w	r2, r3, r2
 80a3078:	b2ac      	uxth	r4, r5
 80a307a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a307e:	428a      	cmp	r2, r1
 80a3080:	d909      	bls.n	80a3096 <__udivmoddi4+0x96>
 80a3082:	19c9      	adds	r1, r1, r7
 80a3084:	f103 34ff 	add.w	r4, r3, #4294967295
 80a3088:	f080 810f 	bcs.w	80a32aa <__udivmoddi4+0x2aa>
 80a308c:	428a      	cmp	r2, r1
 80a308e:	f240 810c 	bls.w	80a32aa <__udivmoddi4+0x2aa>
 80a3092:	3b02      	subs	r3, #2
 80a3094:	4439      	add	r1, r7
 80a3096:	1a8a      	subs	r2, r1, r2
 80a3098:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a309c:	2100      	movs	r1, #0
 80a309e:	2e00      	cmp	r6, #0
 80a30a0:	d063      	beq.n	80a316a <__udivmoddi4+0x16a>
 80a30a2:	fa22 f20e 	lsr.w	r2, r2, lr
 80a30a6:	2300      	movs	r3, #0
 80a30a8:	e886 000c 	stmia.w	r6, {r2, r3}
 80a30ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30b0:	428b      	cmp	r3, r1
 80a30b2:	d907      	bls.n	80a30c4 <__udivmoddi4+0xc4>
 80a30b4:	2e00      	cmp	r6, #0
 80a30b6:	d056      	beq.n	80a3166 <__udivmoddi4+0x166>
 80a30b8:	2100      	movs	r1, #0
 80a30ba:	e886 0011 	stmia.w	r6, {r0, r4}
 80a30be:	4608      	mov	r0, r1
 80a30c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30c4:	fab3 f183 	clz	r1, r3
 80a30c8:	2900      	cmp	r1, #0
 80a30ca:	f040 8093 	bne.w	80a31f4 <__udivmoddi4+0x1f4>
 80a30ce:	42a3      	cmp	r3, r4
 80a30d0:	d302      	bcc.n	80a30d8 <__udivmoddi4+0xd8>
 80a30d2:	4282      	cmp	r2, r0
 80a30d4:	f200 80fe 	bhi.w	80a32d4 <__udivmoddi4+0x2d4>
 80a30d8:	1a85      	subs	r5, r0, r2
 80a30da:	eb64 0303 	sbc.w	r3, r4, r3
 80a30de:	469c      	mov	ip, r3
 80a30e0:	2001      	movs	r0, #1
 80a30e2:	2e00      	cmp	r6, #0
 80a30e4:	d041      	beq.n	80a316a <__udivmoddi4+0x16a>
 80a30e6:	e886 1020 	stmia.w	r6, {r5, ip}
 80a30ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a30ee:	b912      	cbnz	r2, 80a30f6 <__udivmoddi4+0xf6>
 80a30f0:	2701      	movs	r7, #1
 80a30f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80a30f6:	fab7 fe87 	clz	lr, r7
 80a30fa:	f1be 0f00 	cmp.w	lr, #0
 80a30fe:	d136      	bne.n	80a316e <__udivmoddi4+0x16e>
 80a3100:	1be4      	subs	r4, r4, r7
 80a3102:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3106:	fa1f f987 	uxth.w	r9, r7
 80a310a:	2101      	movs	r1, #1
 80a310c:	fbb4 f3f8 	udiv	r3, r4, r8
 80a3110:	fb08 4413 	mls	r4, r8, r3, r4
 80a3114:	fb09 f203 	mul.w	r2, r9, r3
 80a3118:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a311c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a3120:	42a2      	cmp	r2, r4
 80a3122:	d907      	bls.n	80a3134 <__udivmoddi4+0x134>
 80a3124:	19e4      	adds	r4, r4, r7
 80a3126:	f103 30ff 	add.w	r0, r3, #4294967295
 80a312a:	d202      	bcs.n	80a3132 <__udivmoddi4+0x132>
 80a312c:	42a2      	cmp	r2, r4
 80a312e:	f200 80d3 	bhi.w	80a32d8 <__udivmoddi4+0x2d8>
 80a3132:	4603      	mov	r3, r0
 80a3134:	1aa4      	subs	r4, r4, r2
 80a3136:	fbb4 f0f8 	udiv	r0, r4, r8
 80a313a:	fb08 4810 	mls	r8, r8, r0, r4
 80a313e:	fb09 f900 	mul.w	r9, r9, r0
 80a3142:	b2ac      	uxth	r4, r5
 80a3144:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3148:	4591      	cmp	r9, r2
 80a314a:	d907      	bls.n	80a315c <__udivmoddi4+0x15c>
 80a314c:	19d2      	adds	r2, r2, r7
 80a314e:	f100 34ff 	add.w	r4, r0, #4294967295
 80a3152:	d202      	bcs.n	80a315a <__udivmoddi4+0x15a>
 80a3154:	4591      	cmp	r9, r2
 80a3156:	f200 80ba 	bhi.w	80a32ce <__udivmoddi4+0x2ce>
 80a315a:	4620      	mov	r0, r4
 80a315c:	ebc9 0202 	rsb	r2, r9, r2
 80a3160:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3164:	e79b      	b.n	80a309e <__udivmoddi4+0x9e>
 80a3166:	4631      	mov	r1, r6
 80a3168:	4630      	mov	r0, r6
 80a316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a316e:	fa07 f70e 	lsl.w	r7, r7, lr
 80a3172:	f1ce 0c20 	rsb	ip, lr, #32
 80a3176:	fa24 f30c 	lsr.w	r3, r4, ip
 80a317a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a317e:	fbb3 faf8 	udiv	sl, r3, r8
 80a3182:	fa1f f987 	uxth.w	r9, r7
 80a3186:	fb08 351a 	mls	r5, r8, sl, r3
 80a318a:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a318e:	fa04 f40e 	lsl.w	r4, r4, lr
 80a3192:	fb0a fb09 	mul.w	fp, sl, r9
 80a3196:	ea4c 0c04 	orr.w	ip, ip, r4
 80a319a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a319e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a31a2:	459b      	cmp	fp, r3
 80a31a4:	fa00 f50e 	lsl.w	r5, r0, lr
 80a31a8:	d90a      	bls.n	80a31c0 <__udivmoddi4+0x1c0>
 80a31aa:	19db      	adds	r3, r3, r7
 80a31ac:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a31b0:	f080 808b 	bcs.w	80a32ca <__udivmoddi4+0x2ca>
 80a31b4:	459b      	cmp	fp, r3
 80a31b6:	f240 8088 	bls.w	80a32ca <__udivmoddi4+0x2ca>
 80a31ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80a31be:	443b      	add	r3, r7
 80a31c0:	ebcb 0303 	rsb	r3, fp, r3
 80a31c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80a31c8:	fb08 3310 	mls	r3, r8, r0, r3
 80a31cc:	fb00 f409 	mul.w	r4, r0, r9
 80a31d0:	fa1f fc8c 	uxth.w	ip, ip
 80a31d4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a31d8:	429c      	cmp	r4, r3
 80a31da:	d907      	bls.n	80a31ec <__udivmoddi4+0x1ec>
 80a31dc:	19db      	adds	r3, r3, r7
 80a31de:	f100 32ff 	add.w	r2, r0, #4294967295
 80a31e2:	d26e      	bcs.n	80a32c2 <__udivmoddi4+0x2c2>
 80a31e4:	429c      	cmp	r4, r3
 80a31e6:	d96c      	bls.n	80a32c2 <__udivmoddi4+0x2c2>
 80a31e8:	3802      	subs	r0, #2
 80a31ea:	443b      	add	r3, r7
 80a31ec:	1b1c      	subs	r4, r3, r4
 80a31ee:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a31f2:	e78b      	b.n	80a310c <__udivmoddi4+0x10c>
 80a31f4:	f1c1 0e20 	rsb	lr, r1, #32
 80a31f8:	408b      	lsls	r3, r1
 80a31fa:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a31fe:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3202:	fa24 f70e 	lsr.w	r7, r4, lr
 80a3206:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a320a:	fbb7 faf9 	udiv	sl, r7, r9
 80a320e:	fa1f f38c 	uxth.w	r3, ip
 80a3212:	fb09 771a 	mls	r7, r9, sl, r7
 80a3216:	fa20 f80e 	lsr.w	r8, r0, lr
 80a321a:	408c      	lsls	r4, r1
 80a321c:	fb0a f503 	mul.w	r5, sl, r3
 80a3220:	ea48 0404 	orr.w	r4, r8, r4
 80a3224:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3228:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a322c:	42bd      	cmp	r5, r7
 80a322e:	fa02 f201 	lsl.w	r2, r2, r1
 80a3232:	fa00 fb01 	lsl.w	fp, r0, r1
 80a3236:	d909      	bls.n	80a324c <__udivmoddi4+0x24c>
 80a3238:	eb17 070c 	adds.w	r7, r7, ip
 80a323c:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a3240:	d241      	bcs.n	80a32c6 <__udivmoddi4+0x2c6>
 80a3242:	42bd      	cmp	r5, r7
 80a3244:	d93f      	bls.n	80a32c6 <__udivmoddi4+0x2c6>
 80a3246:	f1aa 0a02 	sub.w	sl, sl, #2
 80a324a:	4467      	add	r7, ip
 80a324c:	1b7f      	subs	r7, r7, r5
 80a324e:	fbb7 f5f9 	udiv	r5, r7, r9
 80a3252:	fb09 7715 	mls	r7, r9, r5, r7
 80a3256:	fb05 f303 	mul.w	r3, r5, r3
 80a325a:	b2a4      	uxth	r4, r4
 80a325c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3260:	42bb      	cmp	r3, r7
 80a3262:	d908      	bls.n	80a3276 <__udivmoddi4+0x276>
 80a3264:	eb17 070c 	adds.w	r7, r7, ip
 80a3268:	f105 30ff 	add.w	r0, r5, #4294967295
 80a326c:	d227      	bcs.n	80a32be <__udivmoddi4+0x2be>
 80a326e:	42bb      	cmp	r3, r7
 80a3270:	d925      	bls.n	80a32be <__udivmoddi4+0x2be>
 80a3272:	3d02      	subs	r5, #2
 80a3274:	4467      	add	r7, ip
 80a3276:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a327a:	fba0 8902 	umull	r8, r9, r0, r2
 80a327e:	1aff      	subs	r7, r7, r3
 80a3280:	454f      	cmp	r7, r9
 80a3282:	4645      	mov	r5, r8
 80a3284:	464c      	mov	r4, r9
 80a3286:	d314      	bcc.n	80a32b2 <__udivmoddi4+0x2b2>
 80a3288:	d029      	beq.n	80a32de <__udivmoddi4+0x2de>
 80a328a:	b366      	cbz	r6, 80a32e6 <__udivmoddi4+0x2e6>
 80a328c:	ebbb 0305 	subs.w	r3, fp, r5
 80a3290:	eb67 0704 	sbc.w	r7, r7, r4
 80a3294:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a3298:	40cb      	lsrs	r3, r1
 80a329a:	40cf      	lsrs	r7, r1
 80a329c:	ea4e 0303 	orr.w	r3, lr, r3
 80a32a0:	e886 0088 	stmia.w	r6, {r3, r7}
 80a32a4:	2100      	movs	r1, #0
 80a32a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a32aa:	4623      	mov	r3, r4
 80a32ac:	e6f3      	b.n	80a3096 <__udivmoddi4+0x96>
 80a32ae:	4618      	mov	r0, r3
 80a32b0:	e6da      	b.n	80a3068 <__udivmoddi4+0x68>
 80a32b2:	ebb8 0502 	subs.w	r5, r8, r2
 80a32b6:	eb69 040c 	sbc.w	r4, r9, ip
 80a32ba:	3801      	subs	r0, #1
 80a32bc:	e7e5      	b.n	80a328a <__udivmoddi4+0x28a>
 80a32be:	4605      	mov	r5, r0
 80a32c0:	e7d9      	b.n	80a3276 <__udivmoddi4+0x276>
 80a32c2:	4610      	mov	r0, r2
 80a32c4:	e792      	b.n	80a31ec <__udivmoddi4+0x1ec>
 80a32c6:	4682      	mov	sl, r0
 80a32c8:	e7c0      	b.n	80a324c <__udivmoddi4+0x24c>
 80a32ca:	4692      	mov	sl, r2
 80a32cc:	e778      	b.n	80a31c0 <__udivmoddi4+0x1c0>
 80a32ce:	3802      	subs	r0, #2
 80a32d0:	443a      	add	r2, r7
 80a32d2:	e743      	b.n	80a315c <__udivmoddi4+0x15c>
 80a32d4:	4608      	mov	r0, r1
 80a32d6:	e704      	b.n	80a30e2 <__udivmoddi4+0xe2>
 80a32d8:	3b02      	subs	r3, #2
 80a32da:	443c      	add	r4, r7
 80a32dc:	e72a      	b.n	80a3134 <__udivmoddi4+0x134>
 80a32de:	45c3      	cmp	fp, r8
 80a32e0:	d3e7      	bcc.n	80a32b2 <__udivmoddi4+0x2b2>
 80a32e2:	463c      	mov	r4, r7
 80a32e4:	e7d1      	b.n	80a328a <__udivmoddi4+0x28a>
 80a32e6:	4631      	mov	r1, r6
 80a32e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a32ec <__aeabi_idiv0>:
 80a32ec:	4770      	bx	lr
 80a32ee:	bf00      	nop

080a32f0 <__cxa_atexit>:
 80a32f0:	b510      	push	{r4, lr}
 80a32f2:	4c05      	ldr	r4, [pc, #20]	; (80a3308 <__cxa_atexit+0x18>)
 80a32f4:	4613      	mov	r3, r2
 80a32f6:	b12c      	cbz	r4, 80a3304 <__cxa_atexit+0x14>
 80a32f8:	460a      	mov	r2, r1
 80a32fa:	4601      	mov	r1, r0
 80a32fc:	2002      	movs	r0, #2
 80a32fe:	f3af 8000 	nop.w
 80a3302:	bd10      	pop	{r4, pc}
 80a3304:	4620      	mov	r0, r4
 80a3306:	bd10      	pop	{r4, pc}
 80a3308:	00000000 	.word	0x00000000

080a330c <memcpy>:
 80a330c:	b510      	push	{r4, lr}
 80a330e:	1e43      	subs	r3, r0, #1
 80a3310:	440a      	add	r2, r1
 80a3312:	4291      	cmp	r1, r2
 80a3314:	d004      	beq.n	80a3320 <memcpy+0x14>
 80a3316:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a331a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a331e:	e7f8      	b.n	80a3312 <memcpy+0x6>
 80a3320:	bd10      	pop	{r4, pc}

080a3322 <memset>:
 80a3322:	4603      	mov	r3, r0
 80a3324:	4402      	add	r2, r0
 80a3326:	4293      	cmp	r3, r2
 80a3328:	d002      	beq.n	80a3330 <memset+0xe>
 80a332a:	f803 1b01 	strb.w	r1, [r3], #1
 80a332e:	e7fa      	b.n	80a3326 <memset+0x4>
 80a3330:	4770      	bx	lr
	...

080a3334 <srand>:
 80a3334:	b538      	push	{r3, r4, r5, lr}
 80a3336:	4b12      	ldr	r3, [pc, #72]	; (80a3380 <srand+0x4c>)
 80a3338:	4605      	mov	r5, r0
 80a333a:	681c      	ldr	r4, [r3, #0]
 80a333c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a333e:	b9d3      	cbnz	r3, 80a3376 <srand+0x42>
 80a3340:	2018      	movs	r0, #24
 80a3342:	f7fd fcff 	bl	80a0d44 <malloc>
 80a3346:	f243 330e 	movw	r3, #13070	; 0x330e
 80a334a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a334c:	8003      	strh	r3, [r0, #0]
 80a334e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3352:	8043      	strh	r3, [r0, #2]
 80a3354:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3358:	8083      	strh	r3, [r0, #4]
 80a335a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a335e:	80c3      	strh	r3, [r0, #6]
 80a3360:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3364:	8103      	strh	r3, [r0, #8]
 80a3366:	2305      	movs	r3, #5
 80a3368:	8143      	strh	r3, [r0, #10]
 80a336a:	230b      	movs	r3, #11
 80a336c:	8183      	strh	r3, [r0, #12]
 80a336e:	2201      	movs	r2, #1
 80a3370:	2300      	movs	r3, #0
 80a3372:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3378:	2200      	movs	r2, #0
 80a337a:	611d      	str	r5, [r3, #16]
 80a337c:	615a      	str	r2, [r3, #20]
 80a337e:	bd38      	pop	{r3, r4, r5, pc}
 80a3380:	20000068 	.word	0x20000068

080a3384 <strdup>:
 80a3384:	4b02      	ldr	r3, [pc, #8]	; (80a3390 <strdup+0xc>)
 80a3386:	4601      	mov	r1, r0
 80a3388:	6818      	ldr	r0, [r3, #0]
 80a338a:	f000 b803 	b.w	80a3394 <_strdup_r>
 80a338e:	bf00      	nop
 80a3390:	20000068 	.word	0x20000068

080a3394 <_strdup_r>:
 80a3394:	b570      	push	{r4, r5, r6, lr}
 80a3396:	4606      	mov	r6, r0
 80a3398:	4608      	mov	r0, r1
 80a339a:	460c      	mov	r4, r1
 80a339c:	f000 f80d 	bl	80a33ba <strlen>
 80a33a0:	1c45      	adds	r5, r0, #1
 80a33a2:	4629      	mov	r1, r5
 80a33a4:	4630      	mov	r0, r6
 80a33a6:	f7fd fced 	bl	80a0d84 <_malloc_r>
 80a33aa:	4606      	mov	r6, r0
 80a33ac:	b118      	cbz	r0, 80a33b6 <_strdup_r+0x22>
 80a33ae:	462a      	mov	r2, r5
 80a33b0:	4621      	mov	r1, r4
 80a33b2:	f7ff ffab 	bl	80a330c <memcpy>
 80a33b6:	4630      	mov	r0, r6
 80a33b8:	bd70      	pop	{r4, r5, r6, pc}

080a33ba <strlen>:
 80a33ba:	4603      	mov	r3, r0
 80a33bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a33c0:	2a00      	cmp	r2, #0
 80a33c2:	d1fb      	bne.n	80a33bc <strlen+0x2>
 80a33c4:	1a18      	subs	r0, r3, r0
 80a33c6:	3801      	subs	r0, #1
 80a33c8:	4770      	bx	lr

080a33ca <link_code_end>:
	...

080a33cc <dynalib_user>:
 80a33cc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a33dc:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
 80a33ec:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a33fc:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a340c:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a341c:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
 80a342c:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
 80a343c:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
 80a344c:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
 80a345c:	6572 002e 5249 003d 202c 5042 3d4d 2c00     re..IR=., BPM=.,
 80a346c:	4120 6776 4220 4d50 003d 4e20 206f 6966      Avg BPM=. No fi
 80a347c:	676e 7265 003f 7550 6c62 7369 6968 676e     nger?.Publishing
 80a348c:	7420 206f 6150 7472 6369 656c 4320 6f6c      to Particle Clo
 80a349c:	6475 6800 6165 7472 6152 6574 4347 0050     ud.heartRateGCP.

080a34ac <_ZL9FIRCoeffs>:
 80a34ac:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
 80a34bc:	0d3f 0eb8 0fac 1000                         ?.......

080a34c4 <_ZTV8SPIClass>:
	...
 80a34cc:	0d95 080a 0d97 080a 616e 006e 766f 0066     ........nan.ovf.
 80a34dc:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 80a34ec:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a34fc:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a350c:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a351c:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a352c:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a353c:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a354c:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a355c:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a356c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a357c:	6400 7465 6961 736c 3d20 0020 0a0d 6c00     .details = ....l
 80a358c:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 80a359c:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
 80a35ac:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
 80a35bc:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
 80a35cc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a35dc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a35ec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a35f4:	14fd 080a 1503 080a 1547 080a 1511 080a     ........G.......
 80a3604:	14ff 080a                                   ....

080a3608 <_ZTV9IPAddress>:
	...
 80a3610:	1a95 080a 1a85 080a 1a87 080a               ............

080a361c <_ZTV9USBSerial>:
	...
 80a3624:	1b51 080a 1ba1 080a 1baf 080a 1003 080a     Q...............
 80a3634:	1b8d 080a 1b53 080a 1b69 080a 1b9b 080a     ....S...i.......
 80a3644:	1b7f 080a 1b4d 080a                         ....M...

080a364c <_ZTV11USARTSerial>:
	...
 80a3654:	1cf1 080a 1d41 080a 1d4f 080a 1003 080a     ....A...O.......
 80a3664:	1d05 080a 1d27 080a 1d13 080a 1d3b 080a     ....'.......;...
 80a3674:	1cf3 080a 1cf7 080a                         ........

080a367c <_ZTV7TwoWire>:
	...
 80a3684:	1e1d 080a 1e67 080a 1e3f 080a 1e1f 080a     ....g...?.......
 80a3694:	1e47 080a 1e4f 080a 1e57 080a 1e5f 080a     G...O...W..._...

080a36a4 <_ZTVN5spark9WiFiClassE>:
	...
 80a36ac:	1f89 080a 1f7f 080a 1f75 080a 1ef3 080a     ........u.......
 80a36bc:	128f 080a 1f69 080a 1f5d 080a 1f55 080a     ....i...]...U...
 80a36cc:	1f4b 080a 1f41 080a 1efd 080a               K...A.......

080a36d8 <_ZTVN5spark12NetworkClassE>:
	...
 80a36e0:	1fa9 080a 1fb3 080a 1fbd 080a 1fc7 080a     ................
 80a36f0:	1fd1 080a 1fdd 080a 1fe9 080a 1ff5 080a     ................
 80a3700:	1ffd 080a 2007 080a 2011 080a               ..... ... ..

080a370c <__sf_fake_stdin>:
	...

080a372c <__sf_fake_stdout>:
	...

080a374c <__sf_fake_stderr>:
	...
 80a376c:	0043                                        C.

080a376e <link_const_variable_data_end>:
	...

080a3770 <link_constructors_location>:
 80a3770:	080a0319 	.word	0x080a0319
 80a3774:	080a0485 	.word	0x080a0485
 80a3778:	080a094f 	.word	0x080a094f
 80a377c:	080a0953 	.word	0x080a0953
 80a3780:	080a0dd5 	.word	0x080a0dd5
 80a3784:	080a12d5 	.word	0x080a12d5
 80a3788:	080a1351 	.word	0x080a1351
 80a378c:	080a13a9 	.word	0x080a13a9
 80a3790:	080a1f95 	.word	0x080a1f95
 80a3794:	080a2061 	.word	0x080a2061
 80a3798:	080a2105 	.word	0x080a2105
 80a379c:	080a2149 	.word	0x080a2149
 80a37a0:	080a21cd 	.word	0x080a21cd
 80a37a4:	080a2251 	.word	0x080a2251
 80a37a8:	080a2315 	.word	0x080a2315
 80a37ac:	080a23d9 	.word	0x080a23d9
