
c:/Users/s519653/Documents/IoT/Projects/lubdub/target/1.1.1/photon/lubdub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002848  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2860  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a2864  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000224  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a28d0  080a28d0  000228d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a28f8  080a28f8  000228f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009b20a  00000000  00000000  000228fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ead2  00000000  00000000  000bdb06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f705  00000000  00000000  000cc5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c68  00000000  00000000  000dbcdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000029c8  00000000  00000000  000dd945  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026ade  00000000  00000000  000e030d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023215  00000000  00000000  00106deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a22eb  00000000  00000000  0012a000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000aca4  00000000  00000000  001cc2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	b8 24 0a 08                                         .$..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f9ff 	bl	80a2430 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fa04 	bl	80a2446 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2864 	.word	0x080a2864
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	20000590 	.word	0x20000590
 80a0058:	20000590 	.word	0x20000590

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ffc7 	bl	80a0ff0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2818 	.word	0x080a2818
 80a0084:	080a2858 	.word	0x080a2858

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f855 	bl	80a013c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf6d 	b.w	80a0f74 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd81 	b.w	80a0ba0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd87 	b.w	80a0bb0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:

float beatsPerMinute;
int beatAvg;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
 80a00b6:	f001 f873 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f001 f863 	bl	80a1188 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
 80a00c2:	f001 f86d 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a00c6:	4918      	ldr	r1, [pc, #96]	; (80a0128 <setup+0x74>)
 80a00c8:	f000 fddb 	bl	80a0c82 <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
 80a00cc:	f001 fa9e 	bl	80a160c <_Z19__fetch_global_Wirev>
 80a00d0:	2357      	movs	r3, #87	; 0x57
 80a00d2:	4601      	mov	r1, r0
 80a00d4:	4a15      	ldr	r2, [pc, #84]	; (80a012c <setup+0x78>)
 80a00d6:	4816      	ldr	r0, [pc, #88]	; (80a0130 <setup+0x7c>)
 80a00d8:	f000 fa7a 	bl	80a05d0 <_ZN8MAX301055beginER7TwoWiremh>
 80a00dc:	b928      	cbnz	r0, 80a00ea <setup+0x36>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
 80a00de:	f001 f85f 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a00e2:	4914      	ldr	r1, [pc, #80]	; (80a0134 <setup+0x80>)
 80a00e4:	f000 fdcd 	bl	80a0c82 <_ZN5Print7printlnEPKc>
 80a00e8:	e7fe      	b.n	80a00e8 <setup+0x34>
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");
 80a00ea:	f001 f859 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a00ee:	4912      	ldr	r1, [pc, #72]	; (80a0138 <setup+0x84>)
 80a00f0:	f000 fdc7 	bl	80a0c82 <_ZN5Print7printlnEPKc>

  particleSensor.setup(); //Configure sensor with default settings
 80a00f4:	f240 129b 	movw	r2, #411	; 0x19b
 80a00f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a00fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0100:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a0104:	480a      	ldr	r0, [pc, #40]	; (80a0130 <setup+0x7c>)
 80a0106:	2303      	movs	r3, #3
 80a0108:	2204      	movs	r2, #4
 80a010a:	211f      	movs	r1, #31
 80a010c:	f000 fb1f 	bl	80a074e <_ZN8MAX301055setupEhhhiii>
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
 80a0110:	210a      	movs	r1, #10
 80a0112:	4807      	ldr	r0, [pc, #28]	; (80a0130 <setup+0x7c>)
 80a0114:	f000 fa8b 	bl	80a062e <_ZN8MAX3010520setPulseAmplitudeRedEh>
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0118:	4805      	ldr	r0, [pc, #20]	; (80a0130 <setup+0x7c>)
 80a011a:	2100      	movs	r1, #0
}
 80a011c:	b005      	add	sp, #20
 80a011e:	f85d eb04 	ldr.w	lr, [sp], #4
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
 80a0122:	f000 ba8e 	b.w	80a0642 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
 80a0126:	bf00      	nop
 80a0128:	080a24cc 	.word	0x080a24cc
 80a012c:	00061a80 	.word	0x00061a80
 80a0130:	20000374 	.word	0x20000374
 80a0134:	080a24dc 	.word	0x080a24dc
 80a0138:	080a2510 	.word	0x080a2510

080a013c <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a013c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  long irValue = particleSensor.getIR();
 80a0140:	4841      	ldr	r0, [pc, #260]	; (80a0248 <loop+0x10c>)
 80a0142:	f000 fa2d 	bl	80a05a0 <_ZN8MAX301055getIREv>
 80a0146:	4605      	mov	r5, r0

  if (checkForBeat(irValue) == true)
 80a0148:	f000 f8e2 	bl	80a0310 <_Z12checkForBeatl>
 80a014c:	4f3f      	ldr	r7, [pc, #252]	; (80a024c <loop+0x110>)
 80a014e:	4e40      	ldr	r6, [pc, #256]	; (80a0250 <loop+0x114>)
 80a0150:	2800      	cmp	r0, #0
 80a0152:	d041      	beq.n	80a01d8 <loop+0x9c>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0154:	f000 fbc6 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
 80a0158:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80a0274 <loop+0x138>
 80a015c:	f8d8 3000 	ldr.w	r3, [r8]
 80a0160:	1ac4      	subs	r4, r0, r3
 80a0162:	f000 fbbf 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
    lastBeat = millis();
 80a0166:	f8c8 0000 	str.w	r0, [r8]

    beatsPerMinute = 60 / (delta / 1000.0);
 80a016a:	4620      	mov	r0, r4
 80a016c:	f001 fd0e 	bl	80a1b8c <__aeabi_i2d>
 80a0170:	2200      	movs	r2, #0
 80a0172:	4b38      	ldr	r3, [pc, #224]	; (80a0254 <loop+0x118>)
 80a0174:	f001 fe9a 	bl	80a1eac <__aeabi_ddiv>
 80a0178:	4602      	mov	r2, r0
 80a017a:	460b      	mov	r3, r1
 80a017c:	2000      	movs	r0, #0
 80a017e:	4936      	ldr	r1, [pc, #216]	; (80a0258 <loop+0x11c>)
 80a0180:	f001 fe94 	bl	80a1eac <__aeabi_ddiv>
 80a0184:	f002 f860 	bl	80a2248 <__aeabi_d2f>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a0188:	4934      	ldr	r1, [pc, #208]	; (80a025c <loop+0x120>)
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
    lastBeat = millis();

    beatsPerMinute = 60 / (delta / 1000.0);
 80a018a:	6038      	str	r0, [r7, #0]
 80a018c:	4681      	mov	r9, r0

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
 80a018e:	f002 f8f9 	bl	80a2384 <__aeabi_fcmplt>
 80a0192:	b308      	cbz	r0, 80a01d8 <loop+0x9c>
 80a0194:	4932      	ldr	r1, [pc, #200]	; (80a0260 <loop+0x124>)
 80a0196:	4648      	mov	r0, r9
 80a0198:	f002 f912 	bl	80a23c0 <__aeabi_fcmpgt>
 80a019c:	b1e0      	cbz	r0, 80a01d8 <loop+0x9c>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
 80a019e:	4648      	mov	r0, r9
 80a01a0:	f002 f918 	bl	80a23d4 <__aeabi_f2uiz>
 80a01a4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80a0278 <loop+0x13c>
 80a01a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80a027c <loop+0x140>
 80a01ac:	f89a 4000 	ldrb.w	r4, [sl]
 80a01b0:	f808 0004 	strb.w	r0, [r8, r4]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01b4:	f898 2000 	ldrb.w	r2, [r8]
 80a01b8:	f898 3001 	ldrb.w	r3, [r8, #1]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01bc:	3401      	adds	r4, #1

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01be:	4413      	add	r3, r2
 80a01c0:	f898 2002 	ldrb.w	r2, [r8, #2]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01c4:	f004 0403 	and.w	r4, r4, #3

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01c8:	4413      	add	r3, r2
 80a01ca:	f898 2003 	ldrb.w	r2, [r8, #3]
    beatsPerMinute = 60 / (delta / 1000.0);

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
      rateSpot %= RATE_SIZE; //Wrap variable
 80a01ce:	f88a 4000 	strb.w	r4, [sl]

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
 80a01d2:	4413      	add	r3, r2
 80a01d4:	109b      	asrs	r3, r3, #2
 80a01d6:	6033      	str	r3, [r6, #0]
    }
  }

  Serial.print("IR=");
 80a01d8:	f000 ffe2 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a01dc:	4921      	ldr	r1, [pc, #132]	; (80a0264 <loop+0x128>)
 80a01de:	f000 fd3d 	bl	80a0c5c <_ZN5Print5printEPKc>
  Serial.print(irValue);
 80a01e2:	f000 ffdd 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a01e6:	220a      	movs	r2, #10
 80a01e8:	4629      	mov	r1, r5
 80a01ea:	f000 fd80 	bl	80a0cee <_ZN5Print5printEli>
  Serial.print(", BPM=");
 80a01ee:	f000 ffd7 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a01f2:	491d      	ldr	r1, [pc, #116]	; (80a0268 <loop+0x12c>)
 80a01f4:	f000 fd32 	bl	80a0c5c <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
 80a01f8:	f000 ffd2 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a01fc:	4604      	mov	r4, r0
 80a01fe:	6838      	ldr	r0, [r7, #0]
 80a0200:	f001 fcd6 	bl	80a1bb0 <__aeabi_f2d>
 80a0204:	2302      	movs	r3, #2
 80a0206:	4602      	mov	r2, r0
 80a0208:	9300      	str	r3, [sp, #0]
 80a020a:	4620      	mov	r0, r4
 80a020c:	460b      	mov	r3, r1
 80a020e:	f000 fe41 	bl	80a0e94 <_ZN5Print5printEdi>
  Serial.print(", Avg BPM=");
 80a0212:	f000 ffc5 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a0216:	4915      	ldr	r1, [pc, #84]	; (80a026c <loop+0x130>)
 80a0218:	f000 fd20 	bl	80a0c5c <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
 80a021c:	f000 ffc0 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a0220:	220a      	movs	r2, #10
 80a0222:	6831      	ldr	r1, [r6, #0]
 80a0224:	f000 fd85 	bl	80a0d32 <_ZN5Print5printEii>

  if (irValue < 50000)
 80a0228:	f24c 334f 	movw	r3, #49999	; 0xc34f
 80a022c:	429d      	cmp	r5, r3
 80a022e:	dc04      	bgt.n	80a023a <loop+0xfe>
    Serial.print(" No finger?");
 80a0230:	f000 ffb6 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a0234:	490e      	ldr	r1, [pc, #56]	; (80a0270 <loop+0x134>)
 80a0236:	f000 fd11 	bl	80a0c5c <_ZN5Print5printEPKc>

  Serial.println();
 80a023a:	f000 ffb1 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a023e:	b002      	add	sp, #8
 80a0240:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Serial.print(beatAvg);

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
 80a0244:	f000 bd11 	b.w	80a0c6a <_ZN5Print7printlnEv>
 80a0248:	20000374 	.word	0x20000374
 80a024c:	200003b8 	.word	0x200003b8
 80a0250:	20000370 	.word	0x20000370
 80a0254:	408f4000 	.word	0x408f4000
 80a0258:	404e0000 	.word	0x404e0000
 80a025c:	437f0000 	.word	0x437f0000
 80a0260:	41a00000 	.word	0x41a00000
 80a0264:	080a254c 	.word	0x080a254c
 80a0268:	080a2550 	.word	0x080a2550
 80a026c:	080a2557 	.word	0x080a2557
 80a0270:	080a2562 	.word	0x080a2562
 80a0274:	200003b0 	.word	0x200003b0
 80a0278:	200003bc 	.word	0x200003bc
 80a027c:	200003b4 	.word	0x200003b4

080a0280 <_GLOBAL__sub_I_particleSensor>:
 80a0280:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0282:	f000 fb17 	bl	80a08b4 <HAL_Pin_Map>
 80a0286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <Wire.h>
#include "MAX30105.h"

#include "heartRate.h"

MAX30105 particleSensor;
 80a028a:	4801      	ldr	r0, [pc, #4]	; (80a0290 <_GLOBAL__sub_I_particleSensor+0x10>)
 80a028c:	f000 b8aa 	b.w	80a03e4 <_ZN8MAX30105C1Ev>
 80a0290:	20000374 	.word	0x20000374

080a0294 <_Z18averageDCEstimatorPlt>:
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
  *p += ((((long) x << 15) - *p) >> 4);
 80a0294:	6803      	ldr	r3, [r0, #0]
 80a0296:	ebc3 31c1 	rsb	r1, r3, r1, lsl #15
 80a029a:	eb03 1321 	add.w	r3, r3, r1, asr #4
 80a029e:	6003      	str	r3, [r0, #0]
  return (*p >> 15);
}
 80a02a0:	f343 30cf 	sbfx	r0, r3, #15, #16
 80a02a4:	4770      	bx	lr
	...

080a02a8 <_Z16lowPassFIRFilters>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a02a8:	4916      	ldr	r1, [pc, #88]	; (80a0304 <_Z16lowPassFIRFilters+0x5c>)
  return (*p >> 15);
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
 80a02aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a02ac:	460e      	mov	r6, r1
  cbuf[offset] = din;
 80a02ae:	4d16      	ldr	r5, [pc, #88]	; (80a0308 <_Z16lowPassFIRFilters+0x60>)

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a02b0:	4f16      	ldr	r7, [pc, #88]	; (80a030c <_Z16lowPassFIRFilters+0x64>)
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a02b2:	782b      	ldrb	r3, [r5, #0]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
 80a02b4:	f1a3 020b 	sub.w	r2, r3, #11
 80a02b8:	f002 021f 	and.w	r2, r2, #31
}

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
  cbuf[offset] = din;
 80a02bc:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a02c0:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a02c4:	f1a3 0e16 	sub.w	lr, r3, #22
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
 80a02c8:	0300      	lsls	r0, r0, #12
 80a02ca:	2200      	movs	r2, #0

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a02cc:	eb0e 0102 	add.w	r1, lr, r2
 80a02d0:	1a9c      	subs	r4, r3, r2
 80a02d2:	f001 011f 	and.w	r1, r1, #31
 80a02d6:	f004 041f 	and.w	r4, r4, #31
 80a02da:	f836 c011 	ldrh.w	ip, [r6, r1, lsl #1]
 80a02de:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80a02e2:	f937 4012 	ldrsh.w	r4, [r7, r2, lsl #1]
 80a02e6:	4461      	add	r1, ip
 80a02e8:	3201      	adds	r2, #1
 80a02ea:	b209      	sxth	r1, r1
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a02ec:	2a0b      	cmp	r2, #11
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
 80a02ee:	fb04 0001 	mla	r0, r4, r1, r0
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
 80a02f2:	d1eb      	bne.n	80a02cc <_Z16lowPassFIRFilters+0x24>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
 80a02f4:	3301      	adds	r3, #1
 80a02f6:	f003 031f 	and.w	r3, r3, #31
 80a02fa:	702b      	strb	r3, [r5, #0]

  return(z >> 15);
}
 80a02fc:	f340 30cf 	sbfx	r0, r0, #15, #16
 80a0300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0302:	bf00      	nop
 80a0304:	200003ce 	.word	0x200003ce
 80a0308:	2000040e 	.word	0x2000040e
 80a030c:	080a256e 	.word	0x080a256e

080a0310 <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
 80a0310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a0312:	4d29      	ldr	r5, [pc, #164]	; (80a03b8 <_Z12checkForBeatl+0xa8>)
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a0314:	b282      	uxth	r2, r0
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a0316:	4c29      	ldr	r4, [pc, #164]	; (80a03bc <_Z12checkForBeatl+0xac>)
 80a0318:	882b      	ldrh	r3, [r5, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a031a:	4611      	mov	r1, r2
 80a031c:	4828      	ldr	r0, [pc, #160]	; (80a03c0 <_Z12checkForBeatl+0xb0>)
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
 80a031e:	8023      	strh	r3, [r4, #0]
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
 80a0320:	f7ff ffb8 	bl	80a0294 <_Z18averageDCEstimatorPlt>
 80a0324:	4b27      	ldr	r3, [pc, #156]	; (80a03c4 <_Z12checkForBeatl+0xb4>)
 80a0326:	8018      	strh	r0, [r3, #0]
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a0328:	1a10      	subs	r0, r2, r0
 80a032a:	b200      	sxth	r0, r0
 80a032c:	f7ff ffbc 	bl	80a02a8 <_Z16lowPassFIRFilters>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a0330:	f9b4 2000 	ldrsh.w	r2, [r4]
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
 80a0334:	8028      	strh	r0, [r5, #0]

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
 80a0336:	2a00      	cmp	r2, #0
 80a0338:	4c23      	ldr	r4, [pc, #140]	; (80a03c8 <_Z12checkForBeatl+0xb8>)
 80a033a:	4924      	ldr	r1, [pc, #144]	; (80a03cc <_Z12checkForBeatl+0xbc>)
 80a033c:	da1a      	bge.n	80a0374 <_Z12checkForBeatl+0x64>
 80a033e:	0403      	lsls	r3, r0, #16
 80a0340:	d418      	bmi.n	80a0374 <_Z12checkForBeatl+0x64>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a0342:	4e23      	ldr	r6, [pc, #140]	; (80a03d0 <_Z12checkForBeatl+0xc0>)
 80a0344:	4d23      	ldr	r5, [pc, #140]	; (80a03d4 <_Z12checkForBeatl+0xc4>)
 80a0346:	f9b6 3000 	ldrsh.w	r3, [r6]
    IR_AC_Min = IR_AC_Signal_min;
 80a034a:	4f23      	ldr	r7, [pc, #140]	; (80a03d8 <_Z12checkForBeatl+0xc8>)

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
 80a034c:	802b      	strh	r3, [r5, #0]
    IR_AC_Min = IR_AC_Signal_min;
 80a034e:	4d23      	ldr	r5, [pc, #140]	; (80a03dc <_Z12checkForBeatl+0xcc>)
 80a0350:	f9b5 5000 	ldrsh.w	r5, [r5]
 80a0354:	803d      	strh	r5, [r7, #0]
    positiveEdge = 1;
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0356:	1b5b      	subs	r3, r3, r5
 80a0358:	f240 35d2 	movw	r5, #978	; 0x3d2
 80a035c:	3b15      	subs	r3, #21
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a035e:	2701      	movs	r7, #1
    negativeEdge = 0;
    IR_AC_Signal_max = 0;

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a0360:	42ab      	cmp	r3, r5
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    IR_AC_Min = IR_AC_Signal_min;

    positiveEdge = 1;
 80a0362:	8027      	strh	r7, [r4, #0]
    negativeEdge = 0;
 80a0364:	f04f 0700 	mov.w	r7, #0
 80a0368:	800f      	strh	r7, [r1, #0]
    IR_AC_Signal_max = 0;
 80a036a:	8037      	strh	r7, [r6, #0]

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
 80a036c:	bf8c      	ite	hi
 80a036e:	2300      	movhi	r3, #0
 80a0370:	2301      	movls	r3, #1
 80a0372:	e000      	b.n	80a0376 <_Z12checkForBeatl+0x66>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
 80a0374:	2300      	movs	r3, #0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
 80a0376:	2a00      	cmp	r2, #0
 80a0378:	dd07      	ble.n	80a038a <_Z12checkForBeatl+0x7a>
 80a037a:	2800      	cmp	r0, #0
 80a037c:	dc05      	bgt.n	80a038a <_Z12checkForBeatl+0x7a>
  {
    positiveEdge = 0;
    negativeEdge = 1;
 80a037e:	2601      	movs	r6, #1
 80a0380:	800e      	strh	r6, [r1, #0]
    IR_AC_Signal_min = 0;
 80a0382:	4e16      	ldr	r6, [pc, #88]	; (80a03dc <_Z12checkForBeatl+0xcc>)
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
  {
    positiveEdge = 0;
 80a0384:	2500      	movs	r5, #0
 80a0386:	8025      	strh	r5, [r4, #0]
    negativeEdge = 1;
    IR_AC_Signal_min = 0;
 80a0388:	8035      	strh	r5, [r6, #0]
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
 80a038a:	f9b4 4000 	ldrsh.w	r4, [r4]
 80a038e:	4290      	cmp	r0, r2
 80a0390:	bfd4      	ite	le
 80a0392:	2400      	movle	r4, #0
 80a0394:	f004 0401 	andgt.w	r4, r4, #1
 80a0398:	b10c      	cbz	r4, 80a039e <_Z12checkForBeatl+0x8e>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
 80a039a:	4c0d      	ldr	r4, [pc, #52]	; (80a03d0 <_Z12checkForBeatl+0xc0>)
 80a039c:	8020      	strh	r0, [r4, #0]
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
 80a039e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80a03a2:	4290      	cmp	r0, r2
 80a03a4:	bfac      	ite	ge
 80a03a6:	2200      	movge	r2, #0
 80a03a8:	f001 0201 	andlt.w	r2, r1, #1
 80a03ac:	b10a      	cbz	r2, 80a03b2 <_Z12checkForBeatl+0xa2>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
 80a03ae:	4a0b      	ldr	r2, [pc, #44]	; (80a03dc <_Z12checkForBeatl+0xcc>)
 80a03b0:	8010      	strh	r0, [r2, #0]
  }
  
  return(beatDetected);
}
 80a03b2:	4618      	mov	r0, r3
 80a03b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a03b6:	bf00      	nop
 80a03b8:	200003cc 	.word	0x200003cc
 80a03bc:	200003ca 	.word	0x200003ca
 80a03c0:	200003c4 	.word	0x200003c4
 80a03c4:	200003be 	.word	0x200003be
 80a03c8:	20000410 	.word	0x20000410
 80a03cc:	200003c0 	.word	0x200003c0
 80a03d0:	20000412 	.word	0x20000412
 80a03d4:	20000302 	.word	0x20000302
 80a03d8:	20000300 	.word	0x20000300
 80a03dc:	200003c8 	.word	0x200003c8

080a03e0 <_GLOBAL__sub_I_IR_AC_Max>:
 80a03e0:	f000 ba68 	b.w	80a08b4 <HAL_Pin_Map>

080a03e4 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
 80a03e4:	4770      	bx	lr

080a03e6 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
 80a03e6:	b570      	push	{r4, r5, r6, lr}
 80a03e8:	4604      	mov	r4, r0
 80a03ea:	4616      	mov	r6, r2
 80a03ec:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
 80a03ee:	6800      	ldr	r0, [r0, #0]
 80a03f0:	f001 f803 	bl	80a13fa <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a03f4:	6820      	ldr	r0, [r4, #0]
 80a03f6:	4631      	mov	r1, r6
 80a03f8:	6803      	ldr	r3, [r0, #0]
 80a03fa:	689b      	ldr	r3, [r3, #8]
 80a03fc:	4798      	blx	r3
  _i2cPort->endTransmission(false);
 80a03fe:	2100      	movs	r1, #0
 80a0400:	6820      	ldr	r0, [r4, #0]
 80a0402:	f001 f801 	bl	80a1408 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
 80a0406:	2201      	movs	r2, #1
 80a0408:	4629      	mov	r1, r5
 80a040a:	6820      	ldr	r0, [r4, #0]
 80a040c:	f000 ffed 	bl	80a13ea <_ZN7TwoWire11requestFromEhh>
  if (_i2cPort->available())
 80a0410:	6820      	ldr	r0, [r4, #0]
 80a0412:	6803      	ldr	r3, [r0, #0]
 80a0414:	691b      	ldr	r3, [r3, #16]
 80a0416:	4798      	blx	r3
 80a0418:	b120      	cbz	r0, 80a0424 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
 80a041a:	6820      	ldr	r0, [r4, #0]
 80a041c:	6803      	ldr	r3, [r0, #0]
 80a041e:	695b      	ldr	r3, [r3, #20]
 80a0420:	4798      	blx	r3
 80a0422:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
 80a0424:	bd70      	pop	{r4, r5, r6, pc}

080a0426 <_ZN8MAX3010515getWritePointerEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
}

//Read the FIFO Write Pointer
uint8_t MAX30105::getWritePointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
 80a0426:	2204      	movs	r2, #4
 80a0428:	7901      	ldrb	r1, [r0, #4]
 80a042a:	f7ff bfdc 	b.w	80a03e6 <_ZN8MAX3010513readRegister8Ehh>

080a042e <_ZN8MAX3010514getReadPointerEv>:
}

//Read the FIFO Read Pointer
uint8_t MAX30105::getReadPointer(void) {
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
 80a042e:	2206      	movs	r2, #6
 80a0430:	7901      	ldrb	r1, [r0, #4]
 80a0432:	f7ff bfd8 	b.w	80a03e6 <_ZN8MAX3010513readRegister8Ehh>

080a0436 <_ZN8MAX301055checkEv>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105::check(void)
{
 80a0436:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a043a:	4604      	mov	r4, r0
  //Read register FIDO_DATA in (3-byte * number of active LED) chunks
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
 80a043c:	f7ff fff7 	bl	80a042e <_ZN8MAX3010514getReadPointerEv>
 80a0440:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
 80a0442:	4620      	mov	r0, r4
 80a0444:	f7ff ffef 	bl	80a0426 <_ZN8MAX3010515getWritePointerEv>

  int numberOfSamples = 0;

  //Do we have new data?
  if (readPointer != writePointer)
 80a0448:	4285      	cmp	r5, r0
 80a044a:	f000 808e 	beq.w	80a056a <_ZN8MAX301055checkEv+0x134>
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a044e:	1b47      	subs	r7, r0, r5
    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a0450:	f04f 0157 	mov.w	r1, #87	; 0x57
 80a0454:	6820      	ldr	r0, [r4, #0]
  //Do we have new data?
  if (readPointer != writePointer)
  {
    //Calculate the number of readings we need to get from sensor
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80a0456:	bf48      	it	mi
 80a0458:	3720      	addmi	r7, #32

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a045a:	7966      	ldrb	r6, [r4, #5]

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
 80a045c:	f000 ffd1 	bl	80a1402 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
 80a0460:	6820      	ldr	r0, [r4, #0]
 80a0462:	2107      	movs	r1, #7
 80a0464:	6803      	ldr	r3, [r0, #0]
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0466:	437e      	muls	r6, r7

    //Get ready to read a burst of data from the FIFO register
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
    _i2cPort->write(MAX30105_FIFODATA);
 80a0468:	689b      	ldr	r3, [r3, #8]
 80a046a:	4798      	blx	r3
    _i2cPort->endTransmission();
 80a046c:	6820      	ldr	r0, [r4, #0]
 80a046e:	f000 ffcf 	bl	80a1410 <_ZN7TwoWire15endTransmissionEv>
    numberOfSamples = writePointer - readPointer;
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition

    //We now have the number of readings, now calc bytes to read
    //For this example we are just doing Red and IR (3 bytes each)
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
 80a0472:	eb06 0646 	add.w	r6, r6, r6, lsl #1
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0476:	f04f 0820 	mov.w	r8, #32

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a047a:	f04f 0900 	mov.w	r9, #0
    _i2cPort->endTransmission();

    //We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
    //I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
    //Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
    while (bytesLeftToRead > 0)
 80a047e:	2e00      	cmp	r6, #0
 80a0480:	dd74      	ble.n	80a056c <_ZN8MAX301055checkEv+0x136>
    {
      int toGet = bytesLeftToRead;
      if (toGet > I2C_BUFFER_LENGTH)
 80a0482:	2e20      	cmp	r6, #32
      {
        //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
        //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80a0484:	bfc9      	itett	gt
 80a0486:	7965      	ldrbgt	r5, [r4, #5]
 80a0488:	4635      	movle	r5, r6
 80a048a:	eb05 0545 	addgt.w	r5, r5, r5, lsl #1
 80a048e:	fb98 f3f5 	sdivgt	r3, r8, r5
 80a0492:	bfc8      	it	gt
 80a0494:	435d      	mulgt	r5, r3
      }

      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a0496:	2157      	movs	r1, #87	; 0x57
 80a0498:	462a      	mov	r2, r5
 80a049a:	6820      	ldr	r0, [r4, #0]
        //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
      }

      bytesLeftToRead -= toGet;
 80a049c:	1b76      	subs	r6, r6, r5

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
 80a049e:	f000 ffa7 	bl	80a13f0 <_ZN7TwoWire11requestFromEii>
      
      while (toGet > 0)
 80a04a2:	2d00      	cmp	r5, #0
 80a04a4:	ddeb      	ble.n	80a047e <_ZN8MAX301055checkEv+0x48>
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a04a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a04aa:	6820      	ldr	r0, [r4, #0]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
      {
        sense.head++; //Advance the head of the storage struct
        sense.head %= STORAGE_SIZE; //Wrap condition
 80a04ac:	3301      	adds	r3, #1
 80a04ae:	f003 0303 	and.w	r3, r3, #3
 80a04b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
        temp[2] = _i2cPort->read();
 80a04b6:	6803      	ldr	r3, [r0, #0]

        byte temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
        uint32_t tempLong;

        //Burst read three bytes - RED
        temp[3] = 0;
 80a04b8:	f88d 9007 	strb.w	r9, [sp, #7]
        temp[2] = _i2cPort->read();
 80a04bc:	695b      	ldr	r3, [r3, #20]
 80a04be:	4798      	blx	r3
 80a04c0:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
 80a04c4:	6820      	ldr	r0, [r4, #0]
 80a04c6:	6803      	ldr	r3, [r0, #0]
 80a04c8:	695b      	ldr	r3, [r3, #20]
 80a04ca:	4798      	blx	r3
 80a04cc:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
 80a04d0:	6820      	ldr	r0, [r4, #0]
 80a04d2:	6803      	ldr	r3, [r0, #0]
 80a04d4:	695b      	ldr	r3, [r3, #20]
 80a04d6:	4798      	blx	r3
 80a04d8:	f88d 0004 	strb.w	r0, [sp, #4]
        //Convert array to long
        memcpy(&tempLong, temp, sizeof(tempLong));
		
		tempLong &= 0x3FFFF; //Zero out all but 18 bits

        sense.red[sense.head] = tempLong; //Store this reading into the sense array
 80a04dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a04e0:	9a01      	ldr	r2, [sp, #4]
 80a04e2:	3302      	adds	r3, #2
 80a04e4:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a04e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

        if (activeLEDs > 1)
 80a04ec:	7963      	ldrb	r3, [r4, #5]
 80a04ee:	2b01      	cmp	r3, #1
 80a04f0:	d919      	bls.n	80a0526 <_ZN8MAX301055checkEv+0xf0>
        {
          //Burst read three more bytes - IR
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a04f2:	6820      	ldr	r0, [r4, #0]
 80a04f4:	6803      	ldr	r3, [r0, #0]
 80a04f6:	695b      	ldr	r3, [r3, #20]
 80a04f8:	4798      	blx	r3
 80a04fa:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a04fe:	6820      	ldr	r0, [r4, #0]
 80a0500:	6803      	ldr	r3, [r0, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	4798      	blx	r3
 80a0506:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a050a:	6820      	ldr	r0, [r4, #0]
 80a050c:	6803      	ldr	r3, [r0, #0]
 80a050e:	695b      	ldr	r3, [r3, #20]
 80a0510:	4798      	blx	r3
 80a0512:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
          
		  sense.IR[sense.head] = tempLong;
 80a0516:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a051a:	9a01      	ldr	r2, [sp, #4]
 80a051c:	3306      	adds	r3, #6
 80a051e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a0522:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        if (activeLEDs > 2)
 80a0526:	7963      	ldrb	r3, [r4, #5]
 80a0528:	2b02      	cmp	r3, #2
 80a052a:	d919      	bls.n	80a0560 <_ZN8MAX301055checkEv+0x12a>
        {
          //Burst read three more bytes - Green
          temp[3] = 0;
          temp[2] = _i2cPort->read();
 80a052c:	6820      	ldr	r0, [r4, #0]
 80a052e:	6803      	ldr	r3, [r0, #0]
 80a0530:	695b      	ldr	r3, [r3, #20]
 80a0532:	4798      	blx	r3
 80a0534:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
 80a0538:	6820      	ldr	r0, [r4, #0]
 80a053a:	6803      	ldr	r3, [r0, #0]
 80a053c:	695b      	ldr	r3, [r3, #20]
 80a053e:	4798      	blx	r3
 80a0540:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
 80a0544:	6820      	ldr	r0, [r4, #0]
 80a0546:	6803      	ldr	r3, [r0, #0]
 80a0548:	695b      	ldr	r3, [r3, #20]
 80a054a:	4798      	blx	r3
 80a054c:	f88d 0004 	strb.w	r0, [sp, #4]
          //Convert array to long
          memcpy(&tempLong, temp, sizeof(tempLong));

		  tempLong &= 0x3FFFF; //Zero out all but 18 bits

          sense.green[sense.head] = tempLong;
 80a0550:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0554:	9a01      	ldr	r2, [sp, #4]
 80a0556:	330a      	adds	r3, #10
 80a0558:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80a055c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        }

        toGet -= activeLEDs * 3;
 80a0560:	7963      	ldrb	r3, [r4, #5]
 80a0562:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a0566:	441d      	add	r5, r3
      bytesLeftToRead -= toGet;

      //Request toGet number of bytes from sensor
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
      
      while (toGet > 0)
 80a0568:	e79b      	b.n	80a04a2 <_ZN8MAX301055checkEv+0x6c>
  //Until FIFO_RD_PTR = FIFO_WR_PTR

  byte readPointer = getReadPointer();
  byte writePointer = getWritePointer();

  int numberOfSamples = 0;
 80a056a:	2700      	movs	r7, #0
    } //End while (bytesLeftToRead > 0)

  } //End readPtr != writePtr

  return (numberOfSamples); //Let the world know how much new data we found
}
 80a056c:	b2b8      	uxth	r0, r7
 80a056e:	b003      	add	sp, #12
 80a0570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0574 <_ZN8MAX301059safeCheckEh>:

//Check for new data but give up after a certain amount of time
//Returns true if new data was found
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
 80a0574:	b570      	push	{r4, r5, r6, lr}
 80a0576:	4605      	mov	r5, r0
 80a0578:	460e      	mov	r6, r1
 80a057a:	f000 f9b3 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
 80a057e:	4604      	mov	r4, r0
 80a0580:	f000 f9b0 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
  uint32_t markTime = millis();
  
  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a0584:	1b00      	subs	r0, r0, r4
 80a0586:	42b0      	cmp	r0, r6
 80a0588:	d808      	bhi.n	80a059c <_ZN8MAX301059safeCheckEh+0x28>

	if(check() == true) //We found new data!
 80a058a:	4628      	mov	r0, r5
 80a058c:	f7ff ff53 	bl	80a0436 <_ZN8MAX301055checkEv>
 80a0590:	2801      	cmp	r0, #1
 80a0592:	d004      	beq.n	80a059e <_ZN8MAX301059safeCheckEh+0x2a>
	  return(true);

	delay(1);
 80a0594:	2001      	movs	r0, #1
 80a0596:	f000 fc9b 	bl	80a0ed0 <delay>
//Returns false if new data was not found
bool MAX30105::safeCheck(uint8_t maxTimeToCheck)
{
  uint32_t markTime = millis();
  
  while(1)
 80a059a:	e7f1      	b.n	80a0580 <_ZN8MAX301059safeCheckEh+0xc>
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 80a059c:	2000      	movs	r0, #0
	if(check() == true) //We found new data!
	  return(true);

	delay(1);
  }
}
 80a059e:	bd70      	pop	{r4, r5, r6, pc}

080a05a0 <_ZN8MAX301055getIREv>:
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a05a0:	b510      	push	{r4, lr}
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a05a2:	21fa      	movs	r1, #250	; 0xfa
    return(0); //Sensor failed to find new data
}

//Report the most recent IR value
uint32_t MAX30105::getIR(void)
{
 80a05a4:	4604      	mov	r4, r0
  //Check the sensor for new data for 250ms
  if(safeCheck(250))
 80a05a6:	f7ff ffe5 	bl	80a0574 <_ZN8MAX301059safeCheckEh>
 80a05aa:	b120      	cbz	r0, 80a05b6 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
 80a05ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a05b0:	3306      	adds	r3, #6
 80a05b2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  else
    return(0); //Sensor failed to find new data
}
 80a05b6:	bd10      	pop	{r4, pc}

080a05b8 <_ZN8MAX3010510readPartIDEv>:

//
// Device ID and Revision
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
 80a05b8:	22ff      	movs	r2, #255	; 0xff
 80a05ba:	7901      	ldrb	r1, [r0, #4]
 80a05bc:	f7ff bf13 	b.w	80a03e6 <_ZN8MAX3010513readRegister8Ehh>

080a05c0 <_ZN8MAX3010514readRevisionIDEv>:
}

void MAX30105::readRevisionID() {
 80a05c0:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a05c2:	22fe      	movs	r2, #254	; 0xfe
 80a05c4:	7901      	ldrb	r1, [r0, #4]
//
uint8_t MAX30105::readPartID() {
  return readRegister8(_i2caddr, MAX30105_PARTID);
}

void MAX30105::readRevisionID() {
 80a05c6:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
 80a05c8:	f7ff ff0d 	bl	80a03e6 <_ZN8MAX3010513readRegister8Ehh>
 80a05cc:	71a0      	strb	r0, [r4, #6]
 80a05ce:	bd10      	pop	{r4, pc}

080a05d0 <_ZN8MAX301055beginER7TwoWiremh>:

MAX30105::MAX30105() {
  // Constructor
}

boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
 80a05d0:	b570      	push	{r4, r5, r6, lr}
 80a05d2:	4604      	mov	r4, r0
 80a05d4:	4616      	mov	r6, r2
 80a05d6:	461d      	mov	r5, r3
 80a05d8:	4608      	mov	r0, r1

  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a05da:	6021      	str	r1, [r4, #0]

  _i2cPort->begin();
 80a05dc:	f000 fef6 	bl	80a13cc <_ZN7TwoWire5beginEv>

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a05e0:	4631      	mov	r1, r6
 80a05e2:	6820      	ldr	r0, [r4, #0]
 80a05e4:	f000 feee 	bl	80a13c4 <_ZN7TwoWire8setSpeedEm>
  _i2cPort->setClock(i2cSpeed);

  _i2caddr = i2caddr;
 80a05e8:	7125      	strb	r5, [r4, #4]

  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	f7ff ffe4 	bl	80a05b8 <_ZN8MAX3010510readPartIDEv>
 80a05f0:	2815      	cmp	r0, #21
 80a05f2:	d104      	bne.n	80a05fe <_ZN8MAX301055beginER7TwoWiremh+0x2e>
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
  }

  // Populate revision ID
  readRevisionID();
 80a05f4:	4620      	mov	r0, r4
 80a05f6:	f7ff ffe3 	bl	80a05c0 <_ZN8MAX3010514readRevisionIDEv>
  
  return true;
 80a05fa:	2001      	movs	r0, #1
 80a05fc:	bd70      	pop	{r4, r5, r6, pc}
  // Step 1: Initial Communication and Verification
  // Check that a MAX30105 is connected
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
    // Error -- Part ID read from MAX30105 does not match expected part ID.
    // This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
    return false;
 80a05fe:	2000      	movs	r0, #0

  // Populate revision ID
  readRevisionID();
  
  return true;
}
 80a0600:	bd70      	pop	{r4, r5, r6, pc}

080a0602 <_ZN8MAX3010514writeRegister8Ehhh>:

  return (0); //Fail

}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
 80a0602:	b570      	push	{r4, r5, r6, lr}
 80a0604:	4604      	mov	r4, r0
 80a0606:	4616      	mov	r6, r2
 80a0608:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
 80a060a:	6800      	ldr	r0, [r0, #0]
 80a060c:	f000 fef5 	bl	80a13fa <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
 80a0610:	6820      	ldr	r0, [r4, #0]
 80a0612:	4631      	mov	r1, r6
 80a0614:	6803      	ldr	r3, [r0, #0]
 80a0616:	689b      	ldr	r3, [r3, #8]
 80a0618:	4798      	blx	r3
  _i2cPort->write(value);
 80a061a:	6820      	ldr	r0, [r4, #0]
 80a061c:	4629      	mov	r1, r5
 80a061e:	6803      	ldr	r3, [r0, #0]
 80a0620:	689a      	ldr	r2, [r3, #8]
 80a0622:	4790      	blx	r2
  _i2cPort->endTransmission();
 80a0624:	6820      	ldr	r0, [r4, #0]
}
 80a0626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
  _i2cPort->beginTransmission(address);
  _i2cPort->write(reg);
  _i2cPort->write(value);
  _i2cPort->endTransmission();
 80a062a:	f000 bef1 	b.w	80a1410 <_ZN7TwoWire15endTransmissionEv>

080a062e <_ZN8MAX3010520setPulseAmplitudeRedEh>:
}

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
 80a062e:	460b      	mov	r3, r1
 80a0630:	220c      	movs	r2, #12
 80a0632:	7901      	ldrb	r1, [r0, #4]
 80a0634:	f7ff bfe5 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a0638 <_ZN8MAX3010519setPulseAmplitudeIREh>:
}

void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
 80a0638:	460b      	mov	r3, r1
 80a063a:	220d      	movs	r2, #13
 80a063c:	7901      	ldrb	r1, [r0, #4]
 80a063e:	f7ff bfe0 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a0642 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
}

void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
 80a0642:	460b      	mov	r3, r1
 80a0644:	220e      	movs	r2, #14
 80a0646:	7901      	ldrb	r1, [r0, #4]
 80a0648:	f7ff bfdb 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a064c <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
}

void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
 80a064c:	460b      	mov	r3, r1
 80a064e:	2210      	movs	r2, #16
 80a0650:	7901      	ldrb	r1, [r0, #4]
 80a0652:	f7ff bfd6 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a0656 <_ZN8MAX301059clearFIFOEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
}

//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
 80a0656:	b510      	push	{r4, lr}
 80a0658:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80a065a:	7901      	ldrb	r1, [r0, #4]
 80a065c:	2300      	movs	r3, #0
 80a065e:	2204      	movs	r2, #4
 80a0660:	f7ff ffcf 	bl	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80a0664:	7921      	ldrb	r1, [r4, #4]
 80a0666:	4620      	mov	r0, r4
 80a0668:	2300      	movs	r3, #0
 80a066a:	2205      	movs	r2, #5
 80a066c:	f7ff ffc9 	bl	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0670:	7921      	ldrb	r1, [r4, #4]
 80a0672:	4620      	mov	r0, r4
}
 80a0674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//Resets all points to start in a known state
//Page 15 recommends clearing FIFO before beginning a read
void MAX30105::clearFIFO(void) {
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
 80a0678:	2300      	movs	r3, #0
 80a067a:	2206      	movs	r2, #6
 80a067c:	f7ff bfc1 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a0680 <_ZN8MAX301057bitMaskEhhh>:
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a0680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0684:	460e      	mov	r6, r1
 80a0686:	4615      	mov	r5, r2
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a0688:	460a      	mov	r2, r1
 80a068a:	7901      	ldrb	r1, [r0, #4]
  }
}

//Given a register, read it, mask it, and then set the thing
void MAX30105::bitMask(uint8_t reg, uint8_t mask, uint8_t thing)
{
 80a068c:	4604      	mov	r4, r0
 80a068e:	461f      	mov	r7, r3
  // Grab current register context
  uint8_t originalContents = readRegister8(_i2caddr, reg);
 80a0690:	f7ff fea9 	bl	80a03e6 <_ZN8MAX3010513readRegister8Ehh>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a0694:	4028      	ands	r0, r5
 80a0696:	ea47 0300 	orr.w	r3, r7, r0
 80a069a:	4632      	mov	r2, r6
 80a069c:	7921      	ldrb	r1, [r4, #4]
 80a069e:	4620      	mov	r0, r4
}
 80a06a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;

  // Change contents
  writeRegister8(_i2caddr, reg, originalContents | thing);
 80a06a4:	f7ff bfad 	b.w	80a0602 <_ZN8MAX3010514writeRegister8Ehhh>

080a06a8 <_ZN8MAX301059softResetEv>:
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a06a8:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a06aa:	22bf      	movs	r2, #191	; 0xbf
 80a06ac:	2340      	movs	r3, #64	; 0x40
 80a06ae:	2109      	movs	r1, #9
  bitMask(MAX30105_INTENABLE2, MAX30105_INT_DIE_TEMP_RDY_MASK, MAX30105_INT_DIE_TEMP_RDY_DISABLE);
}

//End Interrupt configuration

void MAX30105::softReset(void) {
 80a06b0:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 80a06b2:	f7ff ffe5 	bl	80a0680 <_ZN8MAX301057bitMaskEhhh>
 80a06b6:	f000 f915 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
 80a06ba:	4605      	mov	r5, r0
 80a06bc:	f000 f912 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a06c0:	1b40      	subs	r0, r0, r5
 80a06c2:	2863      	cmp	r0, #99	; 0x63
 80a06c4:	d80a      	bhi.n	80a06dc <_ZN8MAX301059softResetEv+0x34>
  {
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
 80a06c6:	2209      	movs	r2, #9
 80a06c8:	7921      	ldrb	r1, [r4, #4]
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	f7ff fe8b 	bl	80a03e6 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
 80a06d0:	0643      	lsls	r3, r0, #25
 80a06d2:	d503      	bpl.n	80a06dc <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
 80a06d4:	2001      	movs	r0, #1
 80a06d6:	f000 fbfb 	bl	80a0ed0 <delay>
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);

  // Poll for bit to clear, reset is then complete
  // Timeout after 100ms
  unsigned long startTime = millis();
  while (millis() - startTime < 100)
 80a06da:	e7ef      	b.n	80a06bc <_ZN8MAX301059softResetEv+0x14>
 80a06dc:	bd38      	pop	{r3, r4, r5, pc}

080a06de <_ZN8MAX3010510setLEDModeEh>:
}

void MAX30105::setLEDMode(uint8_t mode) {
  // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
  // See datasheet, page 19
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 80a06de:	460b      	mov	r3, r1
 80a06e0:	22f8      	movs	r2, #248	; 0xf8
 80a06e2:	2109      	movs	r1, #9
 80a06e4:	f7ff bfcc 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a06e8 <_ZN8MAX3010511setADCRangeEh>:
}

void MAX30105::setADCRange(uint8_t adcRange) {
  // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 80a06e8:	460b      	mov	r3, r1
 80a06ea:	229f      	movs	r2, #159	; 0x9f
 80a06ec:	210a      	movs	r1, #10
 80a06ee:	f7ff bfc7 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a06f2 <_ZN8MAX3010513setSampleRateEh>:
}

void MAX30105::setSampleRate(uint8_t sampleRate) {
  // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 80a06f2:	460b      	mov	r3, r1
 80a06f4:	22e3      	movs	r2, #227	; 0xe3
 80a06f6:	210a      	movs	r1, #10
 80a06f8:	f7ff bfc2 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a06fc <_ZN8MAX3010513setPulseWidthEh>:
}

void MAX30105::setPulseWidth(uint8_t pulseWidth) {
  // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 80a06fc:	460b      	mov	r3, r1
 80a06fe:	22fc      	movs	r2, #252	; 0xfc
 80a0700:	210a      	movs	r1, #10
 80a0702:	f7ff bfbd 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a0706 <_ZN8MAX3010514setFIFOAverageEh>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
 80a0706:	460b      	mov	r3, r1
 80a0708:	221f      	movs	r2, #31
 80a070a:	2108      	movs	r1, #8
 80a070c:	f7ff bfb8 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a0710 <_ZN8MAX3010518enableFIFORolloverEv>:
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
}

//Enable roll over if FIFO over flows
void MAX30105::enableFIFORollover(void) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80a0710:	2310      	movs	r3, #16
 80a0712:	22ef      	movs	r2, #239	; 0xef
 80a0714:	2108      	movs	r1, #8
 80a0716:	f7ff bfb3 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>

080a071a <_ZN8MAX3010510enableSlotEhh>:
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {

  uint8_t originalContents;

  switch (slotNumber) {
 80a071a:	3901      	subs	r1, #1

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
 80a071c:	4613      	mov	r3, r2

  uint8_t originalContents;

  switch (slotNumber) {
 80a071e:	2903      	cmp	r1, #3
 80a0720:	d814      	bhi.n	80a074c <_ZN8MAX3010510enableSlotEhh+0x32>
 80a0722:	e8df f001 	tbb	[pc, r1]
 80a0726:	0402      	.short	0x0402
 80a0728:	0c0a      	.short	0x0c0a
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80a072a:	22f8      	movs	r2, #248	; 0xf8
 80a072c:	e003      	b.n	80a0736 <_ZN8MAX3010510enableSlotEhh+0x1c>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a072e:	011b      	lsls	r3, r3, #4
 80a0730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a0734:	228f      	movs	r2, #143	; 0x8f
 80a0736:	2111      	movs	r1, #17
 80a0738:	e006      	b.n	80a0748 <_ZN8MAX3010510enableSlotEhh+0x2e>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80a073a:	22f8      	movs	r2, #248	; 0xf8
 80a073c:	e003      	b.n	80a0746 <_ZN8MAX3010510enableSlotEhh+0x2c>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80a073e:	011b      	lsls	r3, r3, #4
 80a0740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a0744:	228f      	movs	r2, #143	; 0x8f
 80a0746:	2112      	movs	r1, #18
 80a0748:	f7ff bf9a 	b.w	80a0680 <_ZN8MAX301057bitMaskEhhh>
 80a074c:	4770      	bx	lr

080a074e <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
 80a074e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0752:	4616      	mov	r6, r2
 80a0754:	ad08      	add	r5, sp, #32
 80a0756:	4604      	mov	r4, r0
 80a0758:	e895 0620 	ldmia.w	r5, {r5, r9, sl}
 80a075c:	4688      	mov	r8, r1
 80a075e:	461f      	mov	r7, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
 80a0760:	f7ff ffa2 	bl	80a06a8 <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80a0764:	2e01      	cmp	r6, #1
 80a0766:	d101      	bne.n	80a076c <_ZN8MAX301055setupEhhhiii+0x1e>
 80a0768:	2100      	movs	r1, #0
 80a076a:	e012      	b.n	80a0792 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
 80a076c:	2e02      	cmp	r6, #2
 80a076e:	d101      	bne.n	80a0774 <_ZN8MAX301055setupEhhhiii+0x26>
 80a0770:	2120      	movs	r1, #32
 80a0772:	e00e      	b.n	80a0792 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
 80a0774:	2e04      	cmp	r6, #4
 80a0776:	d101      	bne.n	80a077c <_ZN8MAX301055setupEhhhiii+0x2e>
 80a0778:	2140      	movs	r1, #64	; 0x40
 80a077a:	e00a      	b.n	80a0792 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
 80a077c:	2e08      	cmp	r6, #8
 80a077e:	d101      	bne.n	80a0784 <_ZN8MAX301055setupEhhhiii+0x36>
 80a0780:	2160      	movs	r1, #96	; 0x60
 80a0782:	e006      	b.n	80a0792 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
 80a0784:	2e10      	cmp	r6, #16
 80a0786:	d101      	bne.n	80a078c <_ZN8MAX301055setupEhhhiii+0x3e>
 80a0788:	2180      	movs	r1, #128	; 0x80
 80a078a:	e002      	b.n	80a0792 <_ZN8MAX301055setupEhhhiii+0x44>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
 80a078c:	2e20      	cmp	r6, #32
 80a078e:	d1f3      	bne.n	80a0778 <_ZN8MAX301055setupEhhhiii+0x2a>
 80a0790:	21a0      	movs	r1, #160	; 0xa0
 80a0792:	4620      	mov	r0, r4
 80a0794:	f7ff ffb7 	bl	80a0706 <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
 80a0798:	4620      	mov	r0, r4
 80a079a:	f7ff ffb9 	bl	80a0710 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
 80a079e:	2f03      	cmp	r7, #3
 80a07a0:	d101      	bne.n	80a07a6 <_ZN8MAX301055setupEhhhiii+0x58>
 80a07a2:	2107      	movs	r1, #7
 80a07a4:	e003      	b.n	80a07ae <_ZN8MAX301055setupEhhhiii+0x60>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
 80a07a6:	2f02      	cmp	r7, #2
 80a07a8:	bf0c      	ite	eq
 80a07aa:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
 80a07ac:	2102      	movne	r1, #2
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	f7ff ff95 	bl	80a06de <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a07b4:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80a07b8:	7167      	strb	r7, [r4, #5]
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80a07ba:	da01      	bge.n	80a07c0 <_ZN8MAX301055setupEhhhiii+0x72>
 80a07bc:	2100      	movs	r1, #0
 80a07be:	e00b      	b.n	80a07d8 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80a07c0:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
 80a07c4:	da01      	bge.n	80a07ca <_ZN8MAX301055setupEhhhiii+0x7c>
 80a07c6:	2120      	movs	r1, #32
 80a07c8:	e006      	b.n	80a07d8 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
 80a07ca:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80a07ce:	da01      	bge.n	80a07d4 <_ZN8MAX301055setupEhhhiii+0x86>
 80a07d0:	2140      	movs	r1, #64	; 0x40
 80a07d2:	e001      	b.n	80a07d8 <_ZN8MAX301055setupEhhhiii+0x8a>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80a07d4:	d1f2      	bne.n	80a07bc <_ZN8MAX301055setupEhhhiii+0x6e>
 80a07d6:	2160      	movs	r1, #96	; 0x60
 80a07d8:	4620      	mov	r0, r4
 80a07da:	f7ff ff85 	bl	80a06e8 <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80a07de:	2d63      	cmp	r5, #99	; 0x63
 80a07e0:	dc01      	bgt.n	80a07e6 <_ZN8MAX301055setupEhhhiii+0x98>
 80a07e2:	2100      	movs	r1, #0
 80a07e4:	e01e      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
 80a07e6:	2dc7      	cmp	r5, #199	; 0xc7
 80a07e8:	dc01      	bgt.n	80a07ee <_ZN8MAX301055setupEhhhiii+0xa0>
 80a07ea:	2104      	movs	r1, #4
 80a07ec:	e01a      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
 80a07ee:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 80a07f2:	da01      	bge.n	80a07f8 <_ZN8MAX301055setupEhhhiii+0xaa>
 80a07f4:	2108      	movs	r1, #8
 80a07f6:	e015      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
 80a07f8:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 80a07fc:	da01      	bge.n	80a0802 <_ZN8MAX301055setupEhhhiii+0xb4>
 80a07fe:	210c      	movs	r1, #12
 80a0800:	e010      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
 80a0802:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80a0806:	da01      	bge.n	80a080c <_ZN8MAX301055setupEhhhiii+0xbe>
 80a0808:	2110      	movs	r1, #16
 80a080a:	e00b      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
 80a080c:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80a0810:	da01      	bge.n	80a0816 <_ZN8MAX301055setupEhhhiii+0xc8>
 80a0812:	2114      	movs	r1, #20
 80a0814:	e006      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
 80a0816:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 80a081a:	da01      	bge.n	80a0820 <_ZN8MAX301055setupEhhhiii+0xd2>
 80a081c:	2118      	movs	r1, #24
 80a081e:	e001      	b.n	80a0824 <_ZN8MAX301055setupEhhhiii+0xd6>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
 80a0820:	d1df      	bne.n	80a07e2 <_ZN8MAX301055setupEhhhiii+0x94>
 80a0822:	211c      	movs	r1, #28
 80a0824:	4620      	mov	r0, r4
 80a0826:	f7ff ff64 	bl	80a06f2 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80a082a:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
 80a082e:	dc01      	bgt.n	80a0834 <_ZN8MAX301055setupEhhhiii+0xe6>
 80a0830:	2100      	movs	r1, #0
 80a0832:	e00e      	b.n	80a0852 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
 80a0834:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
 80a0838:	dc01      	bgt.n	80a083e <_ZN8MAX301055setupEhhhiii+0xf0>
 80a083a:	2101      	movs	r1, #1
 80a083c:	e009      	b.n	80a0852 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
 80a083e:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
 80a0842:	dc01      	bgt.n	80a0848 <_ZN8MAX301055setupEhhhiii+0xfa>
 80a0844:	2102      	movs	r1, #2
 80a0846:	e004      	b.n	80a0852 <_ZN8MAX301055setupEhhhiii+0x104>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
 80a0848:	f240 139b 	movw	r3, #411	; 0x19b
 80a084c:	4599      	cmp	r9, r3
 80a084e:	d1ef      	bne.n	80a0830 <_ZN8MAX301055setupEhhhiii+0xe2>
 80a0850:	2103      	movs	r1, #3
 80a0852:	4620      	mov	r0, r4
 80a0854:	f7ff ff52 	bl	80a06fc <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
 80a0858:	4641      	mov	r1, r8
 80a085a:	4620      	mov	r0, r4
 80a085c:	f7ff fee7 	bl	80a062e <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
 80a0860:	4641      	mov	r1, r8
 80a0862:	4620      	mov	r0, r4
 80a0864:	f7ff fee8 	bl	80a0638 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
 80a0868:	4641      	mov	r1, r8
 80a086a:	4620      	mov	r0, r4
 80a086c:	f7ff fee9 	bl	80a0642 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
 80a0870:	4641      	mov	r1, r8
 80a0872:	4620      	mov	r0, r4
 80a0874:	f7ff feea 	bl	80a064c <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
 80a0878:	2201      	movs	r2, #1
 80a087a:	4611      	mov	r1, r2
 80a087c:	4620      	mov	r0, r4
 80a087e:	f7ff ff4c 	bl	80a071a <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
 80a0882:	2f01      	cmp	r7, #1
 80a0884:	d90c      	bls.n	80a08a0 <_ZN8MAX301055setupEhhhiii+0x152>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80a0886:	2320      	movs	r3, #32
 80a0888:	228f      	movs	r2, #143	; 0x8f
 80a088a:	2111      	movs	r1, #17
 80a088c:	4620      	mov	r0, r4
 80a088e:	f7ff fef7 	bl	80a0680 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
 80a0892:	2f02      	cmp	r7, #2
 80a0894:	d004      	beq.n	80a08a0 <_ZN8MAX301055setupEhhhiii+0x152>
 80a0896:	2203      	movs	r2, #3
 80a0898:	4611      	mov	r1, r2
 80a089a:	4620      	mov	r0, r4
 80a089c:	f7ff ff3d 	bl	80a071a <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a08a0:	4620      	mov	r0, r4
}
 80a08a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
 80a08a6:	f7ff bed6 	b.w	80a0656 <_ZN8MAX301059clearFIFOEv>

080a08aa <_GLOBAL__sub_I__ZN8MAX30105C2Ev>:
 80a08aa:	f000 b803 	b.w	80a08b4 <HAL_Pin_Map>

080a08ae <_GLOBAL__sub_I__Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
 80a08ae:	f000 b801 	b.w	80a08b4 <HAL_Pin_Map>
	...

080a08b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <HAL_Pin_Map+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	681b      	ldr	r3, [r3, #0]
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601b0 	.word	0x080601b0

080a08c4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <HAL_SPI_Init+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	69db      	ldr	r3, [r3, #28]
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601b4 	.word	0x080601b4

080a08d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	685b      	ldr	r3, [r3, #4]
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	0806019c 	.word	0x0806019c

080a08e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	695b      	ldr	r3, [r3, #20]
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	0806019c 	.word	0x0806019c

080a08f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <os_mutex_create+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601d0 	.word	0x080601d0

080a0904 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <HAL_USART_Init+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	699b      	ldr	r3, [r3, #24]
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c4 	.word	0x080601c4

080a0914 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <HAL_USART_Write_Data+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c4 	.word	0x080601c4

080a0924 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <HAL_USART_Available_Data+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c4 	.word	0x080601c4

080a0934 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <HAL_USART_Read_Data+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c4 	.word	0x080601c4

080a0944 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <HAL_USART_Peek_Data+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601c4 	.word	0x080601c4

080a0954 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <HAL_USART_Flush_Data+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601c4 	.word	0x080601c4

080a0964 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c4 	.word	0x080601c4

080a0974 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <HAL_I2C_Set_Speed+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601ac 	.word	0x080601ac

080a0984 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <HAL_I2C_Begin+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601ac 	.word	0x080601ac

080a0994 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <HAL_I2C_Request_Data+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601ac 	.word	0x080601ac

080a09a4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <HAL_I2C_Begin_Transmission+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601ac 	.word	0x080601ac

080a09b4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <HAL_I2C_End_Transmission+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601ac 	.word	0x080601ac

080a09c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <HAL_I2C_Write_Data+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601ac 	.word	0x080601ac

080a09d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <HAL_I2C_Available_Data+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601ac 	.word	0x080601ac

080a09e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <HAL_I2C_Read_Data+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601ac 	.word	0x080601ac

080a09f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <HAL_I2C_Peek_Data+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601ac 	.word	0x080601ac

080a0a04 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <HAL_I2C_Flush_Data+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601ac 	.word	0x080601ac

080a0a14 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b03      	ldr	r3, [pc, #12]	; (80a0a24 <HAL_I2C_Init+0x10>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0a1e:	9301      	str	r3, [sp, #4]
 80a0a20:	bd08      	pop	{r3, pc}
 80a0a22:	0000      	.short	0x0000
 80a0a24:	080601ac 	.word	0x080601ac

080a0a28 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <HAL_USB_USART_Init+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	681b      	ldr	r3, [r3, #0]
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601d8 	.word	0x080601d8

080a0a38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_USB_USART_Begin+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	685b      	ldr	r3, [r3, #4]
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601d8 	.word	0x080601d8

080a0a48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_USB_USART_Available_Data+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	691b      	ldr	r3, [r3, #16]
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601d8 	.word	0x080601d8

080a0a58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	695b      	ldr	r3, [r3, #20]
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601d8 	.word	0x080601d8

080a0a68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	699b      	ldr	r3, [r3, #24]
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601d8 	.word	0x080601d8

080a0a78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <HAL_USB_USART_Send_Data+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	69db      	ldr	r3, [r3, #28]
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601d8 	.word	0x080601d8

080a0a88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6a1b      	ldr	r3, [r3, #32]
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601d8 	.word	0x080601d8

080a0a98 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <inet_gethostbyname+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601c0 	.word	0x080601c0

080a0aa8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <set_system_mode+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	685b      	ldr	r3, [r3, #4]
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601a4 	.word	0x080601a4

080a0ab8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <system_delay_ms+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	695b      	ldr	r3, [r3, #20]
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601a4 	.word	0x080601a4

080a0ac8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b03      	ldr	r3, [pc, #12]	; (80a0ad8 <system_ctrl_set_app_request_handler+0x10>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ad2:	9301      	str	r3, [sp, #4]
 80a0ad4:	bd08      	pop	{r3, pc}
 80a0ad6:	0000      	.short	0x0000
 80a0ad8:	080601a4 	.word	0x080601a4

080a0adc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0adc:	b508      	push	{r3, lr}
 80a0ade:	4b03      	ldr	r3, [pc, #12]	; (80a0aec <system_ctrl_set_result+0x10>)
 80a0ae0:	681b      	ldr	r3, [r3, #0]
 80a0ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ae6:	9301      	str	r3, [sp, #4]
 80a0ae8:	bd08      	pop	{r3, pc}
 80a0aea:	0000      	.short	0x0000
 80a0aec:	080601a4 	.word	0x080601a4

080a0af0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <network_connect+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	685b      	ldr	r3, [r3, #4]
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601c8 	.word	0x080601c8

080a0b00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <network_connecting+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	689b      	ldr	r3, [r3, #8]
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601c8 	.word	0x080601c8

080a0b10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <network_disconnect+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	68db      	ldr	r3, [r3, #12]
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601c8 	.word	0x080601c8

080a0b20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <network_ready+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	691b      	ldr	r3, [r3, #16]
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601c8 	.word	0x080601c8

080a0b30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <network_on+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	695b      	ldr	r3, [r3, #20]
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601c8 	.word	0x080601c8

080a0b40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <network_off+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	699b      	ldr	r3, [r3, #24]
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601c8 	.word	0x080601c8

080a0b50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <network_listen+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	69db      	ldr	r3, [r3, #28]
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601c8 	.word	0x080601c8

080a0b60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <network_listening+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	6a1b      	ldr	r3, [r3, #32]
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601c8 	.word	0x080601c8

080a0b70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <network_set_listen_timeout+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601c8 	.word	0x080601c8

080a0b80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <network_get_listen_timeout+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601c8 	.word	0x080601c8

080a0b90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601cc 	.word	0x080601cc

080a0ba0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <malloc+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	681b      	ldr	r3, [r3, #0]
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601a0 	.word	0x080601a0

080a0bb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <free+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	685b      	ldr	r3, [r3, #4]
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601a0 	.word	0x080601a0

080a0bc0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0bc0:	4770      	bx	lr

080a0bc2 <_ZN8SPIClassD0Ev>:
 80a0bc2:	b510      	push	{r4, lr}
 80a0bc4:	4604      	mov	r4, r0
 80a0bc6:	f7ff fa6a 	bl	80a009e <_ZdlPv>
 80a0bca:	4620      	mov	r0, r4
 80a0bcc:	bd10      	pop	{r4, pc}
	...

080a0bd0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0bd0:	b570      	push	{r4, r5, r6, lr}
 80a0bd2:	4604      	mov	r4, r0
 80a0bd4:	460e      	mov	r6, r1
 80a0bd6:	4b07      	ldr	r3, [pc, #28]	; (80a0bf4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0bd8:	2500      	movs	r5, #0
 80a0bda:	6003      	str	r3, [r0, #0]
 80a0bdc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0be0:	f7ff fe88 	bl	80a08f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0be4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0be6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0be8:	f7ff fe6c 	bl	80a08c4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0bec:	60a5      	str	r5, [r4, #8]
}
 80a0bee:	4620      	mov	r0, r4
 80a0bf0:	bd70      	pop	{r4, r5, r6, pc}
 80a0bf2:	bf00      	nop
 80a0bf4:	080a2590 	.word	0x080a2590

080a0bf8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0bfc:	4b03      	ldr	r3, [pc, #12]	; (80a0c0c <_GLOBAL__sub_I_System+0x14>)
 80a0bfe:	2000      	movs	r0, #0
 80a0c00:	7018      	strb	r0, [r3, #0]
 80a0c02:	8058      	strh	r0, [r3, #2]
 80a0c04:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c06:	f7ff bf4f 	b.w	80a0aa8 <set_system_mode>
 80a0c0a:	bf00      	nop
 80a0c0c:	20000414 	.word	0x20000414

080a0c10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c12:	4606      	mov	r6, r0
 80a0c14:	460d      	mov	r5, r1
 80a0c16:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0c18:	2400      	movs	r4, #0
  while (size--) {
 80a0c1a:	42bd      	cmp	r5, r7
 80a0c1c:	d00c      	beq.n	80a0c38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0c1e:	6833      	ldr	r3, [r6, #0]
 80a0c20:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0c24:	689b      	ldr	r3, [r3, #8]
 80a0c26:	4630      	mov	r0, r6
 80a0c28:	4798      	blx	r3
     if (chunk>=0)
 80a0c2a:	2800      	cmp	r0, #0
 80a0c2c:	db01      	blt.n	80a0c32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0c2e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0c30:	e7f3      	b.n	80a0c1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0c32:	2c00      	cmp	r4, #0
 80a0c34:	bf08      	it	eq
 80a0c36:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0c38:	4620      	mov	r0, r4
 80a0c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c3c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0c3c:	b570      	push	{r4, r5, r6, lr}
 80a0c3e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0c40:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0c42:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0c44:	b149      	cbz	r1, 80a0c5a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0c46:	f001 fc2f 	bl	80a24a8 <strlen>
 80a0c4a:	682b      	ldr	r3, [r5, #0]
 80a0c4c:	4602      	mov	r2, r0
 80a0c4e:	4621      	mov	r1, r4
 80a0c50:	4628      	mov	r0, r5
    }
 80a0c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0c56:	68db      	ldr	r3, [r3, #12]
 80a0c58:	4718      	bx	r3
    }
 80a0c5a:	bd70      	pop	{r4, r5, r6, pc}

080a0c5c <_ZN5Print5printEPKc>:
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	f7ff ffed 	bl	80a0c3c <_ZN5Print5writeEPKc>
 80a0c62:	bd08      	pop	{r3, pc}

080a0c64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0c64:	6803      	ldr	r3, [r0, #0]
 80a0c66:	689b      	ldr	r3, [r3, #8]
 80a0c68:	4718      	bx	r3

080a0c6a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0c6a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0c6c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0c6e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0c70:	f7ff fff8 	bl	80a0c64 <_ZN5Print5printEc>
  n += print('\n');
 80a0c74:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0c76:	4604      	mov	r4, r0
  n += print('\n');
 80a0c78:	4628      	mov	r0, r5
 80a0c7a:	f7ff fff3 	bl	80a0c64 <_ZN5Print5printEc>
  return n;
}
 80a0c7e:	4420      	add	r0, r4
 80a0c80:	bd38      	pop	{r3, r4, r5, pc}

080a0c82 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0c82:	b538      	push	{r3, r4, r5, lr}
 80a0c84:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0c86:	f7ff ffd9 	bl	80a0c3c <_ZN5Print5writeEPKc>
 80a0c8a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0c8c:	4628      	mov	r0, r5
 80a0c8e:	f7ff ffec 	bl	80a0c6a <_ZN5Print7printlnEv>
  return n;
}
 80a0c92:	4420      	add	r0, r4
 80a0c94:	bd38      	pop	{r3, r4, r5, pc}

080a0c96 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0c96:	2a01      	cmp	r2, #1
 80a0c98:	bf98      	it	ls
 80a0c9a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0c9c:	b530      	push	{r4, r5, lr}
 80a0c9e:	460b      	mov	r3, r1
 80a0ca0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0ca2:	2100      	movs	r1, #0
 80a0ca4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0ca8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0cac:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0cb0:	fb05 3312 	mls	r3, r5, r2, r3
 80a0cb4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0cb6:	2b09      	cmp	r3, #9
 80a0cb8:	bf94      	ite	ls
 80a0cba:	3330      	addls	r3, #48	; 0x30
 80a0cbc:	3337      	addhi	r3, #55	; 0x37
 80a0cbe:	b2db      	uxtb	r3, r3
 80a0cc0:	4621      	mov	r1, r4
 80a0cc2:	f804 3901 	strb.w	r3, [r4], #-1
 80a0cc6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0cc8:	2d00      	cmp	r5, #0
 80a0cca:	d1ef      	bne.n	80a0cac <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0ccc:	f7ff ffb6 	bl	80a0c3c <_ZN5Print5writeEPKc>
}
 80a0cd0:	b00b      	add	sp, #44	; 0x2c
 80a0cd2:	bd30      	pop	{r4, r5, pc}

080a0cd4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0cd4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0cd6:	b922      	cbnz	r2, 80a0ce2 <_ZN5Print5printEmi+0xe>
 80a0cd8:	6803      	ldr	r3, [r0, #0]
 80a0cda:	b2c9      	uxtb	r1, r1
 80a0cdc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0cde:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0ce0:	4718      	bx	r3
  else return printNumber(n, base);
 80a0ce2:	b2d2      	uxtb	r2, r2
}
 80a0ce4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0ce6:	f7ff bfd6 	b.w	80a0c96 <_ZN5Print11printNumberEmh>

080a0cea <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0cea:	f7ff bff3 	b.w	80a0cd4 <_ZN5Print5printEmi>

080a0cee <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0cf2:	4607      	mov	r7, r0
 80a0cf4:	460e      	mov	r6, r1
  if (base == 0) {
 80a0cf6:	4615      	mov	r5, r2
 80a0cf8:	b92a      	cbnz	r2, 80a0d06 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0cfe:	6803      	ldr	r3, [r0, #0]
 80a0d00:	b2c9      	uxtb	r1, r1
 80a0d02:	689b      	ldr	r3, [r3, #8]
 80a0d04:	4718      	bx	r3
  } else if (base == 10) {
 80a0d06:	2a0a      	cmp	r2, #10
 80a0d08:	d102      	bne.n	80a0d10 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0d0a:	2900      	cmp	r1, #0
 80a0d0c:	da01      	bge.n	80a0d12 <_ZN5Print5printEli+0x24>
 80a0d0e:	e004      	b.n	80a0d1a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0d10:	b2d2      	uxtb	r2, r2
  }
}
 80a0d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0d16:	f7ff bfbe 	b.w	80a0c96 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0d1a:	212d      	movs	r1, #45	; 0x2d
 80a0d1c:	f7ff ffa2 	bl	80a0c64 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0d20:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0d22:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0d24:	4271      	negs	r1, r6
 80a0d26:	4638      	mov	r0, r7
 80a0d28:	f7ff ffb5 	bl	80a0c96 <_ZN5Print11printNumberEmh>
 80a0d2c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0d32 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0d32:	f7ff bfdc 	b.w	80a0cee <_ZN5Print5printEli>
	...

080a0d38 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0d3c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0d3e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0d40:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0d42:	4617      	mov	r7, r2
 80a0d44:	461e      	mov	r6, r3
 80a0d46:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0d4a:	f001 fa1f 	bl	80a218c <__aeabi_dcmpun>
 80a0d4e:	b108      	cbz	r0, 80a0d54 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0d50:	4947      	ldr	r1, [pc, #284]	; (80a0e70 <_ZN5Print10printFloatEdh+0x138>)
 80a0d52:	e012      	b.n	80a0d7a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0d54:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a0d58:	f04f 32ff 	mov.w	r2, #4294967295
 80a0d5c:	4b45      	ldr	r3, [pc, #276]	; (80a0e74 <_ZN5Print10printFloatEdh+0x13c>)
 80a0d5e:	4638      	mov	r0, r7
 80a0d60:	4621      	mov	r1, r4
 80a0d62:	f001 fa13 	bl	80a218c <__aeabi_dcmpun>
 80a0d66:	b968      	cbnz	r0, 80a0d84 <_ZN5Print10printFloatEdh+0x4c>
 80a0d68:	f04f 32ff 	mov.w	r2, #4294967295
 80a0d6c:	4b41      	ldr	r3, [pc, #260]	; (80a0e74 <_ZN5Print10printFloatEdh+0x13c>)
 80a0d6e:	4638      	mov	r0, r7
 80a0d70:	4621      	mov	r1, r4
 80a0d72:	f001 f9ed 	bl	80a2150 <__aeabi_dcmple>
 80a0d76:	b928      	cbnz	r0, 80a0d84 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0d78:	493f      	ldr	r1, [pc, #252]	; (80a0e78 <_ZN5Print10printFloatEdh+0x140>)
 80a0d7a:	4640      	mov	r0, r8
 80a0d7c:	f7ff ff5e 	bl	80a0c3c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0d84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0d88:	4b3c      	ldr	r3, [pc, #240]	; (80a0e7c <_ZN5Print10printFloatEdh+0x144>)
 80a0d8a:	4638      	mov	r0, r7
 80a0d8c:	4631      	mov	r1, r6
 80a0d8e:	f001 f9f3 	bl	80a2178 <__aeabi_dcmpgt>
 80a0d92:	b108      	cbz	r0, 80a0d98 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0d94:	493a      	ldr	r1, [pc, #232]	; (80a0e80 <_ZN5Print10printFloatEdh+0x148>)
 80a0d96:	e7f0      	b.n	80a0d7a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0d98:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0d9c:	4b39      	ldr	r3, [pc, #228]	; (80a0e84 <_ZN5Print10printFloatEdh+0x14c>)
 80a0d9e:	4638      	mov	r0, r7
 80a0da0:	4631      	mov	r1, r6
 80a0da2:	f001 f9cb 	bl	80a213c <__aeabi_dcmplt>
 80a0da6:	2800      	cmp	r0, #0
 80a0da8:	d1f4      	bne.n	80a0d94 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0daa:	2200      	movs	r2, #0
 80a0dac:	2300      	movs	r3, #0
 80a0dae:	4638      	mov	r0, r7
 80a0db0:	4631      	mov	r1, r6
 80a0db2:	f001 f9c3 	bl	80a213c <__aeabi_dcmplt>
 80a0db6:	b138      	cbz	r0, 80a0dc8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0db8:	212d      	movs	r1, #45	; 0x2d
 80a0dba:	4640      	mov	r0, r8
 80a0dbc:	f7ff ff52 	bl	80a0c64 <_ZN5Print5printEc>
     number = -number;
 80a0dc0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0dc4:	4604      	mov	r4, r0
 80a0dc6:	e000      	b.n	80a0dca <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0dc8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0dca:	492f      	ldr	r1, [pc, #188]	; (80a0e88 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0dcc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0dd0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0dd2:	fa5f f389 	uxtb.w	r3, r9
 80a0dd6:	429d      	cmp	r5, r3
 80a0dd8:	d906      	bls.n	80a0de8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a0dda:	2200      	movs	r2, #0
 80a0ddc:	4b2b      	ldr	r3, [pc, #172]	; (80a0e8c <_ZN5Print10printFloatEdh+0x154>)
 80a0dde:	f001 f865 	bl	80a1eac <__aeabi_ddiv>
 80a0de2:	f109 0901 	add.w	r9, r9, #1
 80a0de6:	e7f4      	b.n	80a0dd2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0de8:	463a      	mov	r2, r7
 80a0dea:	4633      	mov	r3, r6
 80a0dec:	f000 fd82 	bl	80a18f4 <__adddf3>
 80a0df0:	460f      	mov	r7, r1
 80a0df2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0df4:	f001 fa08 	bl	80a2208 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0df8:	220a      	movs	r2, #10
 80a0dfa:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0dfc:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0dfe:	4640      	mov	r0, r8
 80a0e00:	f7ff ff49 	bl	80a0c96 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0e04:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0e06:	b37d      	cbz	r5, 80a0e68 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0e08:	4648      	mov	r0, r9
 80a0e0a:	f000 feaf 	bl	80a1b6c <__aeabi_ui2d>
 80a0e0e:	4602      	mov	r2, r0
 80a0e10:	460b      	mov	r3, r1
 80a0e12:	4630      	mov	r0, r6
 80a0e14:	4639      	mov	r1, r7
 80a0e16:	f000 fd6b 	bl	80a18f0 <__aeabi_dsub>
 80a0e1a:	4606      	mov	r6, r0
 80a0e1c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0e1e:	4640      	mov	r0, r8
 80a0e20:	491b      	ldr	r1, [pc, #108]	; (80a0e90 <_ZN5Print10printFloatEdh+0x158>)
 80a0e22:	f7ff ff0b 	bl	80a0c3c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0e26:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0e28:	4b18      	ldr	r3, [pc, #96]	; (80a0e8c <_ZN5Print10printFloatEdh+0x154>)
 80a0e2a:	2200      	movs	r2, #0
 80a0e2c:	4630      	mov	r0, r6
 80a0e2e:	4639      	mov	r1, r7
 80a0e30:	f000 ff12 	bl	80a1c58 <__aeabi_dmul>
 80a0e34:	460f      	mov	r7, r1
 80a0e36:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a0e38:	f001 f9be 	bl	80a21b8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0e3c:	220a      	movs	r2, #10
 80a0e3e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a0e40:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0e42:	4640      	mov	r0, r8
 80a0e44:	f7ff ff53 	bl	80a0cee <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a0e48:	4404      	add	r4, r0
    remainder -= toPrint;
 80a0e4a:	4648      	mov	r0, r9
 80a0e4c:	f000 fe9e 	bl	80a1b8c <__aeabi_i2d>
 80a0e50:	4602      	mov	r2, r0
 80a0e52:	460b      	mov	r3, r1
 80a0e54:	4630      	mov	r0, r6
 80a0e56:	4639      	mov	r1, r7
 80a0e58:	f000 fd4a 	bl	80a18f0 <__aeabi_dsub>
 80a0e5c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0e5e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a0e62:	4606      	mov	r6, r0
 80a0e64:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0e66:	d1df      	bne.n	80a0e28 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0e6e:	bf00      	nop
 80a0e70:	080a2598 	.word	0x080a2598
 80a0e74:	7fefffff 	.word	0x7fefffff
 80a0e78:	080a25a0 	.word	0x080a25a0
 80a0e7c:	41efffff 	.word	0x41efffff
 80a0e80:	080a259c 	.word	0x080a259c
 80a0e84:	c1efffff 	.word	0xc1efffff
 80a0e88:	3fe00000 	.word	0x3fe00000
 80a0e8c:	40240000 	.word	0x40240000
 80a0e90:	080a24da 	.word	0x080a24da

080a0e94 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0e94:	f89d 1000 	ldrb.w	r1, [sp]
 80a0e98:	9100      	str	r1, [sp, #0]
 80a0e9a:	f7ff bf4d 	b.w	80a0d38 <_ZN5Print10printFloatEdh>

080a0e9e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0e9e:	2300      	movs	r3, #0
 80a0ea0:	461a      	mov	r2, r3
 80a0ea2:	4619      	mov	r1, r3
 80a0ea4:	6840      	ldr	r0, [r0, #4]
 80a0ea6:	f7ff be43 	b.w	80a0b30 <network_on>
	...

080a0eac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0eac:	4a01      	ldr	r2, [pc, #4]	; (80a0eb4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0eae:	4b02      	ldr	r3, [pc, #8]	; (80a0eb8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0eb0:	601a      	str	r2, [r3, #0]
 80a0eb2:	4770      	bx	lr
 80a0eb4:	080a265d 	.word	0x080a265d
 80a0eb8:	2000041c 	.word	0x2000041c

080a0ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0ebc:	4b02      	ldr	r3, [pc, #8]	; (80a0ec8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0ebe:	681a      	ldr	r2, [r3, #0]
 80a0ec0:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0ec2:	601a      	str	r2, [r3, #0]
 80a0ec4:	4770      	bx	lr
 80a0ec6:	bf00      	nop
 80a0ec8:	20000304 	.word	0x20000304
 80a0ecc:	20000420 	.word	0x20000420

080a0ed0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0ed0:	2100      	movs	r1, #0
 80a0ed2:	f7ff bdf1 	b.w	80a0ab8 <system_delay_ms>

080a0ed6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ed6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0ed8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0eda:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0edc:	b113      	cbz	r3, 80a0ee4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ede:	2203      	movs	r2, #3
 80a0ee0:	4601      	mov	r1, r0
 80a0ee2:	4798      	blx	r3
    }
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	bd10      	pop	{r4, pc}

080a0ee8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0ee8:	b510      	push	{r4, lr}
 80a0eea:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0eec:	f7ff fff3 	bl	80a0ed6 <_ZNSt14_Function_baseD1Ev>
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	bd10      	pop	{r4, pc}

080a0ef4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ef4:	4803      	ldr	r0, [pc, #12]	; (80a0f04 <_GLOBAL__sub_I_RGB+0x10>)
 80a0ef6:	2300      	movs	r3, #0
 80a0ef8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0efa:	4a03      	ldr	r2, [pc, #12]	; (80a0f08 <_GLOBAL__sub_I_RGB+0x14>)
 80a0efc:	4903      	ldr	r1, [pc, #12]	; (80a0f0c <_GLOBAL__sub_I_RGB+0x18>)
 80a0efe:	f000 bba5 	b.w	80a164c <__aeabi_atexit>
 80a0f02:	bf00      	nop
 80a0f04:	20000424 	.word	0x20000424
 80a0f08:	2000036c 	.word	0x2000036c
 80a0f0c:	080a0ee9 	.word	0x080a0ee9

080a0f10 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0f10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0f12:	4b14      	ldr	r3, [pc, #80]	; (80a0f64 <serialEventRun+0x54>)
 80a0f14:	b133      	cbz	r3, 80a0f24 <serialEventRun+0x14>
 80a0f16:	f000 f943 	bl	80a11a0 <_Z16_fetch_usbserialv>
 80a0f1a:	6803      	ldr	r3, [r0, #0]
 80a0f1c:	691b      	ldr	r3, [r3, #16]
 80a0f1e:	4798      	blx	r3
 80a0f20:	2800      	cmp	r0, #0
 80a0f22:	dc16      	bgt.n	80a0f52 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0f24:	4b10      	ldr	r3, [pc, #64]	; (80a0f68 <serialEventRun+0x58>)
 80a0f26:	b133      	cbz	r3, 80a0f36 <serialEventRun+0x26>
 80a0f28:	f000 f9ce 	bl	80a12c8 <_Z22__fetch_global_Serial1v>
 80a0f2c:	6803      	ldr	r3, [r0, #0]
 80a0f2e:	691b      	ldr	r3, [r3, #16]
 80a0f30:	4798      	blx	r3
 80a0f32:	2800      	cmp	r0, #0
 80a0f34:	dc10      	bgt.n	80a0f58 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0f36:	4b0d      	ldr	r3, [pc, #52]	; (80a0f6c <serialEventRun+0x5c>)
 80a0f38:	b10b      	cbz	r3, 80a0f3e <serialEventRun+0x2e>
 80a0f3a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0f3e:	4b0c      	ldr	r3, [pc, #48]	; (80a0f70 <serialEventRun+0x60>)
 80a0f40:	b17b      	cbz	r3, 80a0f62 <serialEventRun+0x52>
 80a0f42:	f000 f95b 	bl	80a11fc <_Z17_fetch_usbserial1v>
 80a0f46:	6803      	ldr	r3, [r0, #0]
 80a0f48:	691b      	ldr	r3, [r3, #16]
 80a0f4a:	4798      	blx	r3
 80a0f4c:	2800      	cmp	r0, #0
 80a0f4e:	dc06      	bgt.n	80a0f5e <serialEventRun+0x4e>
 80a0f50:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0f52:	f3af 8000 	nop.w
 80a0f56:	e7e5      	b.n	80a0f24 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0f58:	f3af 8000 	nop.w
 80a0f5c:	e7eb      	b.n	80a0f36 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0f5e:	f3af 8000 	nop.w
 80a0f62:	bd08      	pop	{r3, pc}
	...

080a0f74 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0f74:	b508      	push	{r3, lr}
	serialEventRun();
 80a0f76:	f7ff ffcb 	bl	80a0f10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0f7a:	f7ff fcb3 	bl	80a08e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0f7e:	4b01      	ldr	r3, [pc, #4]	; (80a0f84 <_post_loop+0x10>)
 80a0f80:	6018      	str	r0, [r3, #0]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	200004bc 	.word	0x200004bc

080a0f88 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f88:	4802      	ldr	r0, [pc, #8]	; (80a0f94 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0f8a:	4a03      	ldr	r2, [pc, #12]	; (80a0f98 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0f8c:	4903      	ldr	r1, [pc, #12]	; (80a0f9c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0f8e:	1a12      	subs	r2, r2, r0
 80a0f90:	f001 ba4e 	b.w	80a2430 <memcpy>
 80a0f94:	40024000 	.word	0x40024000
 80a0f98:	40024004 	.word	0x40024004
 80a0f9c:	080a2860 	.word	0x080a2860

080a0fa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0fa0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0fa2:	2300      	movs	r3, #0
 80a0fa4:	9300      	str	r3, [sp, #0]
 80a0fa6:	461a      	mov	r2, r3
 80a0fa8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0fac:	f7ff fd96 	bl	80a0adc <system_ctrl_set_result>
}
 80a0fb0:	b003      	add	sp, #12
 80a0fb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0fb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0fb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0fba:	8843      	ldrh	r3, [r0, #2]
 80a0fbc:	2b0a      	cmp	r3, #10
 80a0fbe:	d008      	beq.n	80a0fd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0fc0:	2b50      	cmp	r3, #80	; 0x50
 80a0fc2:	d109      	bne.n	80a0fd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0fc4:	4b09      	ldr	r3, [pc, #36]	; (80a0fec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0fc6:	681b      	ldr	r3, [r3, #0]
 80a0fc8:	b13b      	cbz	r3, 80a0fda <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0fca:	b003      	add	sp, #12
 80a0fcc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0fd0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0fd2:	f7ff ffe5 	bl	80a0fa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0fd6:	e006      	b.n	80a0fe6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0fd8:	2300      	movs	r3, #0
 80a0fda:	9300      	str	r3, [sp, #0]
 80a0fdc:	461a      	mov	r2, r3
 80a0fde:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0fe2:	f7ff fd7b 	bl	80a0adc <system_ctrl_set_result>
        break;
    }
}
 80a0fe6:	b003      	add	sp, #12
 80a0fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0fec:	20000434 	.word	0x20000434

080a0ff0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0ff0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ff2:	4c10      	ldr	r4, [pc, #64]	; (80a1034 <module_user_init_hook+0x44>)
 80a0ff4:	4d10      	ldr	r5, [pc, #64]	; (80a1038 <module_user_init_hook+0x48>)
 80a0ff6:	6823      	ldr	r3, [r4, #0]
 80a0ff8:	42ab      	cmp	r3, r5
 80a0ffa:	4b10      	ldr	r3, [pc, #64]	; (80a103c <module_user_init_hook+0x4c>)
 80a0ffc:	bf0c      	ite	eq
 80a0ffe:	2201      	moveq	r2, #1
 80a1000:	2200      	movne	r2, #0
 80a1002:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1004:	d002      	beq.n	80a100c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1006:	f7ff ffbf 	bl	80a0f88 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a100a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a100c:	f7ff fc62 	bl	80a08d4 <HAL_RNG_GetRandomNumber>
 80a1010:	4604      	mov	r4, r0
    srand(seed);
 80a1012:	f001 fa21 	bl	80a2458 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1016:	4b0a      	ldr	r3, [pc, #40]	; (80a1040 <module_user_init_hook+0x50>)
 80a1018:	b113      	cbz	r3, 80a1020 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a101a:	4620      	mov	r0, r4
 80a101c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1020:	2100      	movs	r1, #0
 80a1022:	4807      	ldr	r0, [pc, #28]	; (80a1040 <module_user_init_hook+0x50>)
 80a1024:	f7ff fdb4 	bl	80a0b90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a102c:	2100      	movs	r1, #0
 80a102e:	4805      	ldr	r0, [pc, #20]	; (80a1044 <module_user_init_hook+0x54>)
 80a1030:	f7ff bd4a 	b.w	80a0ac8 <system_ctrl_set_app_request_handler>
 80a1034:	40024000 	.word	0x40024000
 80a1038:	9a271c1e 	.word	0x9a271c1e
 80a103c:	20000438 	.word	0x20000438
 80a1040:	00000000 	.word	0x00000000
 80a1044:	080a0fb9 	.word	0x080a0fb9

080a1048 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1048:	4770      	bx	lr

080a104a <_ZN9IPAddressD0Ev>:
 80a104a:	b510      	push	{r4, lr}
 80a104c:	4604      	mov	r4, r0
 80a104e:	f7ff f826 	bl	80a009e <_ZdlPv>
 80a1052:	4620      	mov	r0, r4
 80a1054:	bd10      	pop	{r4, pc}

080a1056 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1058:	460f      	mov	r7, r1
 80a105a:	f100 0608 	add.w	r6, r0, #8
 80a105e:	1d05      	adds	r5, r0, #4
 80a1060:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1062:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1066:	220a      	movs	r2, #10
 80a1068:	4638      	mov	r0, r7
 80a106a:	f7ff fe3e 	bl	80a0cea <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a106e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1070:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1072:	d007      	beq.n	80a1084 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1074:	2c00      	cmp	r4, #0
 80a1076:	d0f4      	beq.n	80a1062 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1078:	212e      	movs	r1, #46	; 0x2e
 80a107a:	4638      	mov	r0, r7
 80a107c:	f7ff fdf2 	bl	80a0c64 <_ZN5Print5printEc>
 80a1080:	4404      	add	r4, r0
 80a1082:	e7ee      	b.n	80a1062 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1084:	4620      	mov	r0, r4
 80a1086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1088 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1088:	b510      	push	{r4, lr}
 80a108a:	4604      	mov	r4, r0
 80a108c:	4b04      	ldr	r3, [pc, #16]	; (80a10a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a108e:	2211      	movs	r2, #17
 80a1090:	f840 3b04 	str.w	r3, [r0], #4
 80a1094:	2100      	movs	r1, #0
 80a1096:	f001 f9d6 	bl	80a2446 <memset>
{
    clear();
}
 80a109a:	4620      	mov	r0, r4
 80a109c:	bd10      	pop	{r4, pc}
 80a109e:	bf00      	nop
 80a10a0:	080a26b8 	.word	0x080a26b8

080a10a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a10a4:	4603      	mov	r3, r0
 80a10a6:	4a07      	ldr	r2, [pc, #28]	; (80a10c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a10a8:	b510      	push	{r4, lr}
 80a10aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a10ae:	f101 0210 	add.w	r2, r1, #16
 80a10b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a10b6:	4291      	cmp	r1, r2
 80a10b8:	f843 4b04 	str.w	r4, [r3], #4
 80a10bc:	d1f9      	bne.n	80a10b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a10be:	780a      	ldrb	r2, [r1, #0]
 80a10c0:	701a      	strb	r2, [r3, #0]
}
 80a10c2:	bd10      	pop	{r4, pc}
 80a10c4:	080a26b8 	.word	0x080a26b8

080a10c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10c8:	4a02      	ldr	r2, [pc, #8]	; (80a10d4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a10ca:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10cc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a10ce:	2204      	movs	r2, #4
 80a10d0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a10d2:	4770      	bx	lr
 80a10d4:	080a26b8 	.word	0x080a26b8

080a10d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a10d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a10da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a10de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a10e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a10e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a10ea:	2304      	movs	r3, #4
 80a10ec:	6041      	str	r1, [r0, #4]
 80a10ee:	7503      	strb	r3, [r0, #20]
 80a10f0:	bd10      	pop	{r4, pc}
	...

080a10f4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a10f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10f6:	4d04      	ldr	r5, [pc, #16]	; (80a1108 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a10f8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a10fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a10fe:	9500      	str	r5, [sp, #0]
 80a1100:	f7ff ffea 	bl	80a10d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1104:	b003      	add	sp, #12
 80a1106:	bd30      	pop	{r4, r5, pc}
 80a1108:	080a26b8 	.word	0x080a26b8

080a110c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a110c:	7441      	strb	r1, [r0, #17]
 80a110e:	4770      	bx	lr

080a1110 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1110:	4770      	bx	lr

080a1112 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1112:	2100      	movs	r1, #0
 80a1114:	7c00      	ldrb	r0, [r0, #16]
 80a1116:	f7ff bca7 	b.w	80a0a68 <HAL_USB_USART_Receive_Data>

080a111a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a111a:	2101      	movs	r1, #1
 80a111c:	7c00      	ldrb	r0, [r0, #16]
 80a111e:	f7ff bca3 	b.w	80a0a68 <HAL_USB_USART_Receive_Data>

080a1122 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1122:	7c00      	ldrb	r0, [r0, #16]
 80a1124:	f7ff bc98 	b.w	80a0a58 <HAL_USB_USART_Available_Data_For_Write>

080a1128 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1128:	7c00      	ldrb	r0, [r0, #16]
 80a112a:	f7ff bc8d 	b.w	80a0a48 <HAL_USB_USART_Available_Data>

080a112e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a112e:	b538      	push	{r3, r4, r5, lr}
 80a1130:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1132:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1134:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1136:	f7ff fc8f 	bl	80a0a58 <HAL_USB_USART_Available_Data_For_Write>
 80a113a:	2800      	cmp	r0, #0
 80a113c:	dc01      	bgt.n	80a1142 <_ZN9USBSerial5writeEh+0x14>
 80a113e:	7c60      	ldrb	r0, [r4, #17]
 80a1140:	b120      	cbz	r0, 80a114c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1142:	4629      	mov	r1, r5
 80a1144:	7c20      	ldrb	r0, [r4, #16]
 80a1146:	f7ff fc97 	bl	80a0a78 <HAL_USB_USART_Send_Data>
    return 1;
 80a114a:	2001      	movs	r0, #1
  }
  return 0;
}
 80a114c:	bd38      	pop	{r3, r4, r5, pc}

080a114e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a114e:	7c00      	ldrb	r0, [r0, #16]
 80a1150:	f7ff bc9a 	b.w	80a0a88 <HAL_USB_USART_Flush_Data>

080a1154 <_ZN9USBSerialD0Ev>:
 80a1154:	b510      	push	{r4, lr}
 80a1156:	4604      	mov	r4, r0
 80a1158:	f7fe ffa1 	bl	80a009e <_ZdlPv>
 80a115c:	4620      	mov	r0, r4
 80a115e:	bd10      	pop	{r4, pc}

080a1160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1160:	b510      	push	{r4, lr}
 80a1162:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1164:	2300      	movs	r3, #0
 80a1166:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a116c:	60a3      	str	r3, [r4, #8]
 80a116e:	4b05      	ldr	r3, [pc, #20]	; (80a1184 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1170:	4608      	mov	r0, r1
 80a1172:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1174:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1176:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1178:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a117a:	4611      	mov	r1, r2
 80a117c:	f7ff fc54 	bl	80a0a28 <HAL_USB_USART_Init>
}
 80a1180:	4620      	mov	r0, r4
 80a1182:	bd10      	pop	{r4, pc}
 80a1184:	080a26cc 	.word	0x080a26cc

080a1188 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1188:	2200      	movs	r2, #0
 80a118a:	7c00      	ldrb	r0, [r0, #16]
 80a118c:	f7ff bc54 	b.w	80a0a38 <HAL_USB_USART_Begin>

080a1190 <_Z19acquireSerialBufferv>:
 80a1190:	b510      	push	{r4, lr}
 80a1192:	4604      	mov	r4, r0
 80a1194:	2214      	movs	r2, #20
 80a1196:	2100      	movs	r1, #0
 80a1198:	f001 f955 	bl	80a2446 <memset>
 80a119c:	4620      	mov	r0, r4
 80a119e:	bd10      	pop	{r4, pc}

080a11a0 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a11a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11a2:	4d0e      	ldr	r5, [pc, #56]	; (80a11dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a11a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a11a6:	a801      	add	r0, sp, #4
 80a11a8:	f7ff fff2 	bl	80a1190 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11ac:	6829      	ldr	r1, [r5, #0]
 80a11ae:	f011 0401 	ands.w	r4, r1, #1
 80a11b2:	d110      	bne.n	80a11d6 <_Z16_fetch_usbserialv+0x36>
 80a11b4:	4628      	mov	r0, r5
 80a11b6:	f7fe ff74 	bl	80a00a2 <__cxa_guard_acquire>
 80a11ba:	b160      	cbz	r0, 80a11d6 <_Z16_fetch_usbserialv+0x36>
 80a11bc:	aa01      	add	r2, sp, #4
 80a11be:	4621      	mov	r1, r4
 80a11c0:	4807      	ldr	r0, [pc, #28]	; (80a11e0 <_Z16_fetch_usbserialv+0x40>)
 80a11c2:	f7ff ffcd 	bl	80a1160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11c6:	4628      	mov	r0, r5
 80a11c8:	f7fe ff70 	bl	80a00ac <__cxa_guard_release>
 80a11cc:	4a05      	ldr	r2, [pc, #20]	; (80a11e4 <_Z16_fetch_usbserialv+0x44>)
 80a11ce:	4906      	ldr	r1, [pc, #24]	; (80a11e8 <_Z16_fetch_usbserialv+0x48>)
 80a11d0:	4803      	ldr	r0, [pc, #12]	; (80a11e0 <_Z16_fetch_usbserialv+0x40>)
 80a11d2:	f000 fa3b 	bl	80a164c <__aeabi_atexit>
	return _usbserial;
}
 80a11d6:	4802      	ldr	r0, [pc, #8]	; (80a11e0 <_Z16_fetch_usbserialv+0x40>)
 80a11d8:	b007      	add	sp, #28
 80a11da:	bd30      	pop	{r4, r5, pc}
 80a11dc:	2000043c 	.word	0x2000043c
 80a11e0:	20000444 	.word	0x20000444
 80a11e4:	2000036c 	.word	0x2000036c
 80a11e8:	080a1111 	.word	0x080a1111

080a11ec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a11ec:	b510      	push	{r4, lr}
 80a11ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11f0:	2214      	movs	r2, #20
 80a11f2:	2100      	movs	r1, #0
 80a11f4:	f001 f927 	bl	80a2446 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11f8:	4620      	mov	r0, r4
 80a11fa:	bd10      	pop	{r4, pc}

080a11fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a11fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a11fe:	4c0e      	ldr	r4, [pc, #56]	; (80a1238 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1200:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1202:	a801      	add	r0, sp, #4
 80a1204:	f7ff fff2 	bl	80a11ec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1208:	6823      	ldr	r3, [r4, #0]
 80a120a:	07db      	lsls	r3, r3, #31
 80a120c:	d410      	bmi.n	80a1230 <_Z17_fetch_usbserial1v+0x34>
 80a120e:	4620      	mov	r0, r4
 80a1210:	f7fe ff47 	bl	80a00a2 <__cxa_guard_acquire>
 80a1214:	b160      	cbz	r0, 80a1230 <_Z17_fetch_usbserial1v+0x34>
 80a1216:	aa01      	add	r2, sp, #4
 80a1218:	2101      	movs	r1, #1
 80a121a:	4808      	ldr	r0, [pc, #32]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a121c:	f7ff ffa0 	bl	80a1160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1220:	4620      	mov	r0, r4
 80a1222:	f7fe ff43 	bl	80a00ac <__cxa_guard_release>
 80a1226:	4a06      	ldr	r2, [pc, #24]	; (80a1240 <_Z17_fetch_usbserial1v+0x44>)
 80a1228:	4906      	ldr	r1, [pc, #24]	; (80a1244 <_Z17_fetch_usbserial1v+0x48>)
 80a122a:	4804      	ldr	r0, [pc, #16]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a122c:	f000 fa0e 	bl	80a164c <__aeabi_atexit>
  return _usbserial1;
}
 80a1230:	4802      	ldr	r0, [pc, #8]	; (80a123c <_Z17_fetch_usbserial1v+0x40>)
 80a1232:	b006      	add	sp, #24
 80a1234:	bd10      	pop	{r4, pc}
 80a1236:	bf00      	nop
 80a1238:	20000440 	.word	0x20000440
 80a123c:	20000458 	.word	0x20000458
 80a1240:	2000036c 	.word	0x2000036c
 80a1244:	080a1111 	.word	0x080a1111

080a1248 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1248:	4770      	bx	lr

080a124a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a124a:	7441      	strb	r1, [r0, #17]
 80a124c:	4770      	bx	lr

080a124e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a124e:	7c00      	ldrb	r0, [r0, #16]
 80a1250:	f7ff bb88 	b.w	80a0964 <HAL_USART_Available_Data_For_Write>

080a1254 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1254:	7c00      	ldrb	r0, [r0, #16]
 80a1256:	f7ff bb65 	b.w	80a0924 <HAL_USART_Available_Data>

080a125a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a125a:	7c00      	ldrb	r0, [r0, #16]
 80a125c:	f7ff bb72 	b.w	80a0944 <HAL_USART_Peek_Data>

080a1260 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1260:	7c00      	ldrb	r0, [r0, #16]
 80a1262:	f7ff bb67 	b.w	80a0934 <HAL_USART_Read_Data>

080a1266 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1266:	7c00      	ldrb	r0, [r0, #16]
 80a1268:	f7ff bb74 	b.w	80a0954 <HAL_USART_Flush_Data>

080a126c <_ZN11USARTSerialD0Ev>:
 80a126c:	b510      	push	{r4, lr}
 80a126e:	4604      	mov	r4, r0
 80a1270:	f7fe ff15 	bl	80a009e <_ZdlPv>
 80a1274:	4620      	mov	r0, r4
 80a1276:	bd10      	pop	{r4, pc}

080a1278 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1278:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a127a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a127c:	4604      	mov	r4, r0
 80a127e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1280:	b925      	cbnz	r5, 80a128c <_ZN11USARTSerial5writeEh+0x14>
 80a1282:	7c00      	ldrb	r0, [r0, #16]
 80a1284:	f7ff fb6e 	bl	80a0964 <HAL_USART_Available_Data_For_Write>
 80a1288:	2800      	cmp	r0, #0
 80a128a:	dd05      	ble.n	80a1298 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a128c:	4631      	mov	r1, r6
 80a128e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1294:	f7ff bb3e 	b.w	80a0914 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1298:	4628      	mov	r0, r5
 80a129a:	bd70      	pop	{r4, r5, r6, pc}

080a129c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a129c:	b510      	push	{r4, lr}
 80a129e:	4604      	mov	r4, r0
 80a12a0:	4608      	mov	r0, r1
 80a12a2:	4611      	mov	r1, r2
 80a12a4:	2200      	movs	r2, #0
 80a12a6:	6062      	str	r2, [r4, #4]
 80a12a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a12ac:	60a2      	str	r2, [r4, #8]
 80a12ae:	4a05      	ldr	r2, [pc, #20]	; (80a12c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a12b0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a12b2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a12b4:	2201      	movs	r2, #1
 80a12b6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a12b8:	461a      	mov	r2, r3
 80a12ba:	f7ff fb23 	bl	80a0904 <HAL_USART_Init>
}
 80a12be:	4620      	mov	r0, r4
 80a12c0:	bd10      	pop	{r4, pc}
 80a12c2:	bf00      	nop
 80a12c4:	080a26fc 	.word	0x080a26fc

080a12c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a12c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a12ca:	4c19      	ldr	r4, [pc, #100]	; (80a1330 <_Z22__fetch_global_Serial1v+0x68>)
 80a12cc:	6825      	ldr	r5, [r4, #0]
 80a12ce:	b94d      	cbnz	r5, 80a12e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a12d0:	2084      	movs	r0, #132	; 0x84
 80a12d2:	f7fe fee2 	bl	80a009a <_Znwj>
 80a12d6:	4606      	mov	r6, r0
 80a12d8:	b118      	cbz	r0, 80a12e2 <_Z22__fetch_global_Serial1v+0x1a>
 80a12da:	2284      	movs	r2, #132	; 0x84
 80a12dc:	4629      	mov	r1, r5
 80a12de:	f001 f8b2 	bl	80a2446 <memset>
 80a12e2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a12e4:	4d13      	ldr	r5, [pc, #76]	; (80a1334 <_Z22__fetch_global_Serial1v+0x6c>)
 80a12e6:	682e      	ldr	r6, [r5, #0]
 80a12e8:	b94e      	cbnz	r6, 80a12fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a12ea:	2084      	movs	r0, #132	; 0x84
 80a12ec:	f7fe fed5 	bl	80a009a <_Znwj>
 80a12f0:	4607      	mov	r7, r0
 80a12f2:	b118      	cbz	r0, 80a12fc <_Z22__fetch_global_Serial1v+0x34>
 80a12f4:	2284      	movs	r2, #132	; 0x84
 80a12f6:	4631      	mov	r1, r6
 80a12f8:	f001 f8a5 	bl	80a2446 <memset>
 80a12fc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a12fe:	4f0e      	ldr	r7, [pc, #56]	; (80a1338 <_Z22__fetch_global_Serial1v+0x70>)
 80a1300:	6839      	ldr	r1, [r7, #0]
 80a1302:	f011 0601 	ands.w	r6, r1, #1
 80a1306:	d111      	bne.n	80a132c <_Z22__fetch_global_Serial1v+0x64>
 80a1308:	4638      	mov	r0, r7
 80a130a:	f7fe feca 	bl	80a00a2 <__cxa_guard_acquire>
 80a130e:	b168      	cbz	r0, 80a132c <_Z22__fetch_global_Serial1v+0x64>
 80a1310:	6822      	ldr	r2, [r4, #0]
 80a1312:	4631      	mov	r1, r6
 80a1314:	682b      	ldr	r3, [r5, #0]
 80a1316:	4809      	ldr	r0, [pc, #36]	; (80a133c <_Z22__fetch_global_Serial1v+0x74>)
 80a1318:	f7ff ffc0 	bl	80a129c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a131c:	4638      	mov	r0, r7
 80a131e:	f7fe fec5 	bl	80a00ac <__cxa_guard_release>
 80a1322:	4a07      	ldr	r2, [pc, #28]	; (80a1340 <_Z22__fetch_global_Serial1v+0x78>)
 80a1324:	4907      	ldr	r1, [pc, #28]	; (80a1344 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1326:	4805      	ldr	r0, [pc, #20]	; (80a133c <_Z22__fetch_global_Serial1v+0x74>)
 80a1328:	f000 f990 	bl	80a164c <__aeabi_atexit>
#endif
	return serial1;
}
 80a132c:	4803      	ldr	r0, [pc, #12]	; (80a133c <_Z22__fetch_global_Serial1v+0x74>)
 80a132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1330:	20000488 	.word	0x20000488
 80a1334:	20000480 	.word	0x20000480
 80a1338:	20000484 	.word	0x20000484
 80a133c:	2000046c 	.word	0x2000046c
 80a1340:	2000036c 	.word	0x2000036c
 80a1344:	080a1249 	.word	0x080a1249

080a1348 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1348:	4770      	bx	lr

080a134a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a134a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a134c:	4606      	mov	r6, r0
 80a134e:	4615      	mov	r5, r2
 80a1350:	460c      	mov	r4, r1
 80a1352:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1354:	42bc      	cmp	r4, r7
 80a1356:	d006      	beq.n	80a1366 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1358:	6833      	ldr	r3, [r6, #0]
 80a135a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a135e:	689b      	ldr	r3, [r3, #8]
 80a1360:	4630      	mov	r0, r6
 80a1362:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1364:	e7f6      	b.n	80a1354 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1366:	4628      	mov	r0, r5
 80a1368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a136a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a136a:	2200      	movs	r2, #0
 80a136c:	7c00      	ldrb	r0, [r0, #16]
 80a136e:	f7ff bb29 	b.w	80a09c4 <HAL_I2C_Write_Data>

080a1372 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1372:	2100      	movs	r1, #0
 80a1374:	7c00      	ldrb	r0, [r0, #16]
 80a1376:	f7ff bb2d 	b.w	80a09d4 <HAL_I2C_Available_Data>

080a137a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a137a:	2100      	movs	r1, #0
 80a137c:	7c00      	ldrb	r0, [r0, #16]
 80a137e:	f7ff bb31 	b.w	80a09e4 <HAL_I2C_Read_Data>

080a1382 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1382:	2100      	movs	r1, #0
 80a1384:	7c00      	ldrb	r0, [r0, #16]
 80a1386:	f7ff bb35 	b.w	80a09f4 <HAL_I2C_Peek_Data>

080a138a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a138a:	2100      	movs	r1, #0
 80a138c:	7c00      	ldrb	r0, [r0, #16]
 80a138e:	f7ff bb39 	b.w	80a0a04 <HAL_I2C_Flush_Data>

080a1392 <_ZN7TwoWireD0Ev>:
 80a1392:	b510      	push	{r4, lr}
 80a1394:	4604      	mov	r4, r0
 80a1396:	f7fe fe82 	bl	80a009e <_ZdlPv>
 80a139a:	4620      	mov	r0, r4
 80a139c:	bd10      	pop	{r4, pc}
	...

080a13a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a13a0:	b510      	push	{r4, lr}
 80a13a2:	4604      	mov	r4, r0
 80a13a4:	4608      	mov	r0, r1
 80a13a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13aa:	60a3      	str	r3, [r4, #8]
 80a13ac:	4b04      	ldr	r3, [pc, #16]	; (80a13c0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a13ae:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a13b0:	7420      	strb	r0, [r4, #16]
 80a13b2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a13b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a13b6:	f7ff fb2d 	bl	80a0a14 <HAL_I2C_Init>

}
 80a13ba:	4620      	mov	r0, r4
 80a13bc:	bd10      	pop	{r4, pc}
 80a13be:	bf00      	nop
 80a13c0:	080a272c 	.word	0x080a272c

080a13c4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a13c4:	2200      	movs	r2, #0
 80a13c6:	7c00      	ldrb	r0, [r0, #16]
 80a13c8:	f7ff bad4 	b.w	80a0974 <HAL_I2C_Set_Speed>

080a13cc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a13cc:	2300      	movs	r3, #0
 80a13ce:	461a      	mov	r2, r3
 80a13d0:	4619      	mov	r1, r3
 80a13d2:	7c00      	ldrb	r0, [r0, #16]
 80a13d4:	f7ff bad6 	b.w	80a0984 <HAL_I2C_Begin>

080a13d8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a13d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a13da:	2400      	movs	r4, #0
 80a13dc:	7c00      	ldrb	r0, [r0, #16]
 80a13de:	9400      	str	r4, [sp, #0]
 80a13e0:	f7ff fad8 	bl	80a0994 <HAL_I2C_Request_Data>
  return result;
}
 80a13e4:	b2c0      	uxtb	r0, r0
 80a13e6:	b002      	add	sp, #8
 80a13e8:	bd10      	pop	{r4, pc}

080a13ea <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a13ea:	2301      	movs	r3, #1
 80a13ec:	f7ff bff4 	b.w	80a13d8 <_ZN7TwoWire11requestFromEhhh>

080a13f0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a13f0:	2301      	movs	r3, #1
 80a13f2:	b2d2      	uxtb	r2, r2
 80a13f4:	b2c9      	uxtb	r1, r1
 80a13f6:	f7ff bfef 	b.w	80a13d8 <_ZN7TwoWire11requestFromEhhh>

080a13fa <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a13fa:	2200      	movs	r2, #0
 80a13fc:	7c00      	ldrb	r0, [r0, #16]
 80a13fe:	f7ff bad1 	b.w	80a09a4 <HAL_I2C_Begin_Transmission>

080a1402 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1402:	b2c9      	uxtb	r1, r1
 80a1404:	f7ff bff9 	b.w	80a13fa <_ZN7TwoWire17beginTransmissionEh>

080a1408 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1408:	2200      	movs	r2, #0
 80a140a:	7c00      	ldrb	r0, [r0, #16]
 80a140c:	f7ff bad2 	b.w	80a09b4 <HAL_I2C_End_Transmission>

080a1410 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1410:	2101      	movs	r1, #1
 80a1412:	f7ff bff9 	b.w	80a1408 <_ZN7TwoWire15endTransmissionEh>

080a1416 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1416:	2200      	movs	r2, #0
 80a1418:	4611      	mov	r1, r2
 80a141a:	6840      	ldr	r0, [r0, #4]
 80a141c:	f7ff bb80 	b.w	80a0b20 <network_ready>

080a1420 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1420:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1422:	4616      	mov	r6, r2
 80a1424:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1426:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1428:	460f      	mov	r7, r1
 80a142a:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a142c:	2100      	movs	r1, #0
 80a142e:	a803      	add	r0, sp, #12
 80a1430:	f001 f809 	bl	80a2446 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1434:	4630      	mov	r0, r6
 80a1436:	f001 f837 	bl	80a24a8 <strlen>
 80a143a:	2500      	movs	r5, #0
 80a143c:	9500      	str	r5, [sp, #0]
 80a143e:	b281      	uxth	r1, r0
 80a1440:	687b      	ldr	r3, [r7, #4]
 80a1442:	aa03      	add	r2, sp, #12
 80a1444:	4630      	mov	r0, r6
 80a1446:	f7ff fb27 	bl	80a0a98 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a144a:	b120      	cbz	r0, 80a1456 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a144c:	4629      	mov	r1, r5
 80a144e:	4620      	mov	r0, r4
 80a1450:	f7ff fe3a 	bl	80a10c8 <_ZN9IPAddressC1Em>
 80a1454:	e003      	b.n	80a145e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1456:	a903      	add	r1, sp, #12
 80a1458:	4620      	mov	r0, r4
 80a145a:	f7ff fe23 	bl	80a10a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a145e:	4620      	mov	r0, r4
 80a1460:	b009      	add	sp, #36	; 0x24
 80a1462:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1464 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1464:	2200      	movs	r2, #0
 80a1466:	4611      	mov	r1, r2
 80a1468:	6840      	ldr	r0, [r0, #4]
 80a146a:	f7ff bb79 	b.w	80a0b60 <network_listening>

080a146e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a146e:	2200      	movs	r2, #0
 80a1470:	4611      	mov	r1, r2
 80a1472:	6840      	ldr	r0, [r0, #4]
 80a1474:	f7ff bb84 	b.w	80a0b80 <network_get_listen_timeout>

080a1478 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1478:	2200      	movs	r2, #0
 80a147a:	6840      	ldr	r0, [r0, #4]
 80a147c:	f7ff bb78 	b.w	80a0b70 <network_set_listen_timeout>

080a1480 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1480:	2200      	movs	r2, #0
 80a1482:	f081 0101 	eor.w	r1, r1, #1
 80a1486:	6840      	ldr	r0, [r0, #4]
 80a1488:	f7ff bb62 	b.w	80a0b50 <network_listen>

080a148c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a148c:	2300      	movs	r3, #0
 80a148e:	461a      	mov	r2, r3
 80a1490:	4619      	mov	r1, r3
 80a1492:	6840      	ldr	r0, [r0, #4]
 80a1494:	f7ff bb54 	b.w	80a0b40 <network_off>

080a1498 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1498:	2200      	movs	r2, #0
 80a149a:	4611      	mov	r1, r2
 80a149c:	6840      	ldr	r0, [r0, #4]
 80a149e:	f7ff bb2f 	b.w	80a0b00 <network_connecting>

080a14a2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a14a2:	2200      	movs	r2, #0
 80a14a4:	2102      	movs	r1, #2
 80a14a6:	6840      	ldr	r0, [r0, #4]
 80a14a8:	f7ff bb32 	b.w	80a0b10 <network_disconnect>

080a14ac <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a14ac:	2300      	movs	r3, #0
 80a14ae:	461a      	mov	r2, r3
 80a14b0:	6840      	ldr	r0, [r0, #4]
 80a14b2:	f7ff bb1d 	b.w	80a0af0 <network_connect>
	...

080a14b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a14b8:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a14ba:	2204      	movs	r2, #4
 80a14bc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a14be:	4a02      	ldr	r2, [pc, #8]	; (80a14c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a14c0:	601a      	str	r2, [r3, #0]
 80a14c2:	4770      	bx	lr
 80a14c4:	2000048c 	.word	0x2000048c
 80a14c8:	080a2754 	.word	0x080a2754

080a14cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a14cc:	2300      	movs	r3, #0
 80a14ce:	461a      	mov	r2, r3
 80a14d0:	6840      	ldr	r0, [r0, #4]
 80a14d2:	f7ff bb0d 	b.w	80a0af0 <network_connect>

080a14d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a14d6:	2200      	movs	r2, #0
 80a14d8:	2102      	movs	r1, #2
 80a14da:	6840      	ldr	r0, [r0, #4]
 80a14dc:	f7ff bb18 	b.w	80a0b10 <network_disconnect>

080a14e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	4611      	mov	r1, r2
 80a14e4:	6840      	ldr	r0, [r0, #4]
 80a14e6:	f7ff bb0b 	b.w	80a0b00 <network_connecting>

080a14ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a14ea:	2200      	movs	r2, #0
 80a14ec:	4611      	mov	r1, r2
 80a14ee:	6840      	ldr	r0, [r0, #4]
 80a14f0:	f7ff bb16 	b.w	80a0b20 <network_ready>

080a14f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a14f4:	2300      	movs	r3, #0
 80a14f6:	461a      	mov	r2, r3
 80a14f8:	4619      	mov	r1, r3
 80a14fa:	6840      	ldr	r0, [r0, #4]
 80a14fc:	f7ff bb18 	b.w	80a0b30 <network_on>

080a1500 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1500:	2300      	movs	r3, #0
 80a1502:	461a      	mov	r2, r3
 80a1504:	4619      	mov	r1, r3
 80a1506:	6840      	ldr	r0, [r0, #4]
 80a1508:	f7ff bb1a 	b.w	80a0b40 <network_off>

080a150c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a150c:	2200      	movs	r2, #0
 80a150e:	f081 0101 	eor.w	r1, r1, #1
 80a1512:	6840      	ldr	r0, [r0, #4]
 80a1514:	f7ff bb1c 	b.w	80a0b50 <network_listen>

080a1518 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1518:	2200      	movs	r2, #0
 80a151a:	6840      	ldr	r0, [r0, #4]
 80a151c:	f7ff bb28 	b.w	80a0b70 <network_set_listen_timeout>

080a1520 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1520:	2200      	movs	r2, #0
 80a1522:	4611      	mov	r1, r2
 80a1524:	6840      	ldr	r0, [r0, #4]
 80a1526:	f7ff bb2b 	b.w	80a0b80 <network_get_listen_timeout>

080a152a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a152a:	2200      	movs	r2, #0
 80a152c:	4611      	mov	r1, r2
 80a152e:	6840      	ldr	r0, [r0, #4]
 80a1530:	f7ff bb16 	b.w	80a0b60 <network_listening>

080a1534 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1534:	b570      	push	{r4, r5, r6, lr}
 80a1536:	4616      	mov	r6, r2
 80a1538:	b08e      	sub	sp, #56	; 0x38
 80a153a:	4604      	mov	r4, r0
    IPAddress addr;
 80a153c:	a808      	add	r0, sp, #32
 80a153e:	f7ff fda3 	bl	80a1088 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1542:	2211      	movs	r2, #17
 80a1544:	2100      	movs	r1, #0
 80a1546:	a803      	add	r0, sp, #12
 80a1548:	f000 ff7d 	bl	80a2446 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a154c:	4630      	mov	r0, r6
 80a154e:	f000 ffab 	bl	80a24a8 <strlen>
 80a1552:	2500      	movs	r5, #0
 80a1554:	4b0a      	ldr	r3, [pc, #40]	; (80a1580 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1556:	9500      	str	r5, [sp, #0]
 80a1558:	b281      	uxth	r1, r0
 80a155a:	685b      	ldr	r3, [r3, #4]
 80a155c:	aa03      	add	r2, sp, #12
 80a155e:	4630      	mov	r0, r6
 80a1560:	f7ff fa9a 	bl	80a0a98 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1564:	b120      	cbz	r0, 80a1570 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1566:	4629      	mov	r1, r5
 80a1568:	4620      	mov	r0, r4
 80a156a:	f7ff fdad 	bl	80a10c8 <_ZN9IPAddressC1Em>
 80a156e:	e003      	b.n	80a1578 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1570:	a903      	add	r1, sp, #12
 80a1572:	4620      	mov	r0, r4
 80a1574:	f7ff fd96 	bl	80a10a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1578:	4620      	mov	r0, r4
 80a157a:	b00e      	add	sp, #56	; 0x38
 80a157c:	bd70      	pop	{r4, r5, r6, pc}
 80a157e:	bf00      	nop
 80a1580:	2000048c 	.word	0x2000048c

080a1584 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1584:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1586:	4a03      	ldr	r2, [pc, #12]	; (80a1594 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1588:	601a      	str	r2, [r3, #0]
 80a158a:	2200      	movs	r2, #0
 80a158c:	605a      	str	r2, [r3, #4]
 80a158e:	4770      	bx	lr
 80a1590:	20000494 	.word	0x20000494
 80a1594:	080a2788 	.word	0x080a2788

080a1598 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1598:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a159a:	4c0c      	ldr	r4, [pc, #48]	; (80a15cc <_GLOBAL__sub_I_SPI+0x34>)
 80a159c:	4e0c      	ldr	r6, [pc, #48]	; (80a15d0 <_GLOBAL__sub_I_SPI+0x38>)
 80a159e:	4d0d      	ldr	r5, [pc, #52]	; (80a15d4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a15a0:	2100      	movs	r1, #0
 80a15a2:	4620      	mov	r0, r4
 80a15a4:	f7ff fb14 	bl	80a0bd0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15aa:	4c0b      	ldr	r4, [pc, #44]	; (80a15d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a15ac:	4632      	mov	r2, r6
 80a15ae:	4629      	mov	r1, r5
 80a15b0:	f000 f84c 	bl	80a164c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15b4:	2101      	movs	r1, #1
 80a15b6:	4620      	mov	r0, r4
 80a15b8:	f7ff fb0a 	bl	80a0bd0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a15bc:	4632      	mov	r2, r6
 80a15be:	4629      	mov	r1, r5
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a15c6:	f000 b841 	b.w	80a164c <__aeabi_atexit>
 80a15ca:	bf00      	nop
 80a15cc:	2000049c 	.word	0x2000049c
 80a15d0:	2000036c 	.word	0x2000036c
 80a15d4:	080a0bc1 	.word	0x080a0bc1
 80a15d8:	200004ac 	.word	0x200004ac

080a15dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a15dc:	b513      	push	{r0, r1, r4, lr}
 80a15de:	4c08      	ldr	r4, [pc, #32]	; (80a1600 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a15e0:	2300      	movs	r3, #0
 80a15e2:	461a      	mov	r2, r3
 80a15e4:	4619      	mov	r1, r3
 80a15e6:	9300      	str	r3, [sp, #0]
 80a15e8:	4620      	mov	r0, r4
 80a15ea:	f7ff fd83 	bl	80a10f4 <_ZN9IPAddressC1Ehhhh>
 80a15ee:	4620      	mov	r0, r4
 80a15f0:	4a04      	ldr	r2, [pc, #16]	; (80a1604 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a15f2:	4905      	ldr	r1, [pc, #20]	; (80a1608 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a15f4:	b002      	add	sp, #8
 80a15f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a15fa:	f000 b827 	b.w	80a164c <__aeabi_atexit>
 80a15fe:	bf00      	nop
 80a1600:	200004c0 	.word	0x200004c0
 80a1604:	2000036c 	.word	0x2000036c
 80a1608:	080a1049 	.word	0x080a1049

080a160c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a160c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a160e:	4d0b      	ldr	r5, [pc, #44]	; (80a163c <_Z19__fetch_global_Wirev+0x30>)
 80a1610:	6829      	ldr	r1, [r5, #0]
 80a1612:	f011 0401 	ands.w	r4, r1, #1
 80a1616:	d10f      	bne.n	80a1638 <_Z19__fetch_global_Wirev+0x2c>
 80a1618:	4628      	mov	r0, r5
 80a161a:	f7fe fd42 	bl	80a00a2 <__cxa_guard_acquire>
 80a161e:	b158      	cbz	r0, 80a1638 <_Z19__fetch_global_Wirev+0x2c>
 80a1620:	4621      	mov	r1, r4
 80a1622:	4807      	ldr	r0, [pc, #28]	; (80a1640 <_Z19__fetch_global_Wirev+0x34>)
 80a1624:	f7ff febc 	bl	80a13a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1628:	4628      	mov	r0, r5
 80a162a:	f7fe fd3f 	bl	80a00ac <__cxa_guard_release>
 80a162e:	4a05      	ldr	r2, [pc, #20]	; (80a1644 <_Z19__fetch_global_Wirev+0x38>)
 80a1630:	4905      	ldr	r1, [pc, #20]	; (80a1648 <_Z19__fetch_global_Wirev+0x3c>)
 80a1632:	4803      	ldr	r0, [pc, #12]	; (80a1640 <_Z19__fetch_global_Wirev+0x34>)
 80a1634:	f000 f80a 	bl	80a164c <__aeabi_atexit>
	return wire;
}
 80a1638:	4801      	ldr	r0, [pc, #4]	; (80a1640 <_Z19__fetch_global_Wirev+0x34>)
 80a163a:	bd38      	pop	{r3, r4, r5, pc}
 80a163c:	200004d8 	.word	0x200004d8
 80a1640:	200004dc 	.word	0x200004dc
 80a1644:	2000036c 	.word	0x2000036c
 80a1648:	080a1349 	.word	0x080a1349

080a164c <__aeabi_atexit>:
 80a164c:	460b      	mov	r3, r1
 80a164e:	4601      	mov	r1, r0
 80a1650:	4618      	mov	r0, r3
 80a1652:	f000 bedf 	b.w	80a2414 <__cxa_atexit>
	...

080a1658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1658:	4b18      	ldr	r3, [pc, #96]	; (80a16bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a165a:	681a      	ldr	r2, [r3, #0]
 80a165c:	07d1      	lsls	r1, r2, #31
 80a165e:	bf5c      	itt	pl
 80a1660:	2201      	movpl	r2, #1
 80a1662:	601a      	strpl	r2, [r3, #0]
 80a1664:	4b16      	ldr	r3, [pc, #88]	; (80a16c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1666:	681a      	ldr	r2, [r3, #0]
 80a1668:	07d2      	lsls	r2, r2, #31
 80a166a:	bf5c      	itt	pl
 80a166c:	2201      	movpl	r2, #1
 80a166e:	601a      	strpl	r2, [r3, #0]
 80a1670:	4b14      	ldr	r3, [pc, #80]	; (80a16c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1672:	681a      	ldr	r2, [r3, #0]
 80a1674:	07d0      	lsls	r0, r2, #31
 80a1676:	bf5c      	itt	pl
 80a1678:	2201      	movpl	r2, #1
 80a167a:	601a      	strpl	r2, [r3, #0]
 80a167c:	4b12      	ldr	r3, [pc, #72]	; (80a16c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a167e:	681a      	ldr	r2, [r3, #0]
 80a1680:	07d1      	lsls	r1, r2, #31
 80a1682:	bf5c      	itt	pl
 80a1684:	2201      	movpl	r2, #1
 80a1686:	601a      	strpl	r2, [r3, #0]
 80a1688:	4b10      	ldr	r3, [pc, #64]	; (80a16cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a168a:	681a      	ldr	r2, [r3, #0]
 80a168c:	07d2      	lsls	r2, r2, #31
 80a168e:	bf5c      	itt	pl
 80a1690:	2201      	movpl	r2, #1
 80a1692:	601a      	strpl	r2, [r3, #0]
 80a1694:	4b0e      	ldr	r3, [pc, #56]	; (80a16d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1696:	681a      	ldr	r2, [r3, #0]
 80a1698:	07d0      	lsls	r0, r2, #31
 80a169a:	bf5c      	itt	pl
 80a169c:	2201      	movpl	r2, #1
 80a169e:	601a      	strpl	r2, [r3, #0]
 80a16a0:	4b0c      	ldr	r3, [pc, #48]	; (80a16d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a16a2:	681a      	ldr	r2, [r3, #0]
 80a16a4:	07d1      	lsls	r1, r2, #31
 80a16a6:	bf5c      	itt	pl
 80a16a8:	2201      	movpl	r2, #1
 80a16aa:	601a      	strpl	r2, [r3, #0]
 80a16ac:	4b0a      	ldr	r3, [pc, #40]	; (80a16d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a16ae:	681a      	ldr	r2, [r3, #0]
 80a16b0:	07d2      	lsls	r2, r2, #31
 80a16b2:	bf5c      	itt	pl
 80a16b4:	2201      	movpl	r2, #1
 80a16b6:	601a      	strpl	r2, [r3, #0]
 80a16b8:	4770      	bx	lr
 80a16ba:	bf00      	nop
 80a16bc:	2000050c 	.word	0x2000050c
 80a16c0:	20000508 	.word	0x20000508
 80a16c4:	20000504 	.word	0x20000504
 80a16c8:	20000500 	.word	0x20000500
 80a16cc:	200004fc 	.word	0x200004fc
 80a16d0:	200004f8 	.word	0x200004f8
 80a16d4:	200004f4 	.word	0x200004f4
 80a16d8:	200004f0 	.word	0x200004f0

080a16dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a16dc:	4b24      	ldr	r3, [pc, #144]	; (80a1770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a16de:	681a      	ldr	r2, [r3, #0]
 80a16e0:	07d0      	lsls	r0, r2, #31
 80a16e2:	bf5c      	itt	pl
 80a16e4:	2201      	movpl	r2, #1
 80a16e6:	601a      	strpl	r2, [r3, #0]
 80a16e8:	4b22      	ldr	r3, [pc, #136]	; (80a1774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a16ea:	681a      	ldr	r2, [r3, #0]
 80a16ec:	07d1      	lsls	r1, r2, #31
 80a16ee:	bf5c      	itt	pl
 80a16f0:	2201      	movpl	r2, #1
 80a16f2:	601a      	strpl	r2, [r3, #0]
 80a16f4:	4b20      	ldr	r3, [pc, #128]	; (80a1778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a16f6:	681a      	ldr	r2, [r3, #0]
 80a16f8:	07d2      	lsls	r2, r2, #31
 80a16fa:	bf5c      	itt	pl
 80a16fc:	2201      	movpl	r2, #1
 80a16fe:	601a      	strpl	r2, [r3, #0]
 80a1700:	4b1e      	ldr	r3, [pc, #120]	; (80a177c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1702:	681a      	ldr	r2, [r3, #0]
 80a1704:	07d0      	lsls	r0, r2, #31
 80a1706:	bf5c      	itt	pl
 80a1708:	2201      	movpl	r2, #1
 80a170a:	601a      	strpl	r2, [r3, #0]
 80a170c:	4b1c      	ldr	r3, [pc, #112]	; (80a1780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a170e:	681a      	ldr	r2, [r3, #0]
 80a1710:	07d1      	lsls	r1, r2, #31
 80a1712:	bf5c      	itt	pl
 80a1714:	2201      	movpl	r2, #1
 80a1716:	601a      	strpl	r2, [r3, #0]
 80a1718:	4b1a      	ldr	r3, [pc, #104]	; (80a1784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a171a:	681a      	ldr	r2, [r3, #0]
 80a171c:	07d2      	lsls	r2, r2, #31
 80a171e:	bf5c      	itt	pl
 80a1720:	2201      	movpl	r2, #1
 80a1722:	601a      	strpl	r2, [r3, #0]
 80a1724:	4b18      	ldr	r3, [pc, #96]	; (80a1788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1726:	681a      	ldr	r2, [r3, #0]
 80a1728:	07d0      	lsls	r0, r2, #31
 80a172a:	bf5c      	itt	pl
 80a172c:	2201      	movpl	r2, #1
 80a172e:	601a      	strpl	r2, [r3, #0]
 80a1730:	4b16      	ldr	r3, [pc, #88]	; (80a178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1732:	681a      	ldr	r2, [r3, #0]
 80a1734:	07d1      	lsls	r1, r2, #31
 80a1736:	bf5c      	itt	pl
 80a1738:	2201      	movpl	r2, #1
 80a173a:	601a      	strpl	r2, [r3, #0]
 80a173c:	4b14      	ldr	r3, [pc, #80]	; (80a1790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a173e:	681a      	ldr	r2, [r3, #0]
 80a1740:	07d2      	lsls	r2, r2, #31
 80a1742:	bf5c      	itt	pl
 80a1744:	2201      	movpl	r2, #1
 80a1746:	601a      	strpl	r2, [r3, #0]
 80a1748:	4b12      	ldr	r3, [pc, #72]	; (80a1794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a174a:	681a      	ldr	r2, [r3, #0]
 80a174c:	07d0      	lsls	r0, r2, #31
 80a174e:	bf5c      	itt	pl
 80a1750:	2201      	movpl	r2, #1
 80a1752:	601a      	strpl	r2, [r3, #0]
 80a1754:	4b10      	ldr	r3, [pc, #64]	; (80a1798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	07d1      	lsls	r1, r2, #31
 80a175a:	bf5c      	itt	pl
 80a175c:	2201      	movpl	r2, #1
 80a175e:	601a      	strpl	r2, [r3, #0]
 80a1760:	4b0e      	ldr	r3, [pc, #56]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1762:	681a      	ldr	r2, [r3, #0]
 80a1764:	07d2      	lsls	r2, r2, #31
 80a1766:	bf5c      	itt	pl
 80a1768:	2201      	movpl	r2, #1
 80a176a:	601a      	strpl	r2, [r3, #0]
 80a176c:	4770      	bx	lr
 80a176e:	bf00      	nop
 80a1770:	2000053c 	.word	0x2000053c
 80a1774:	20000538 	.word	0x20000538
 80a1778:	20000534 	.word	0x20000534
 80a177c:	20000530 	.word	0x20000530
 80a1780:	2000052c 	.word	0x2000052c
 80a1784:	20000528 	.word	0x20000528
 80a1788:	20000524 	.word	0x20000524
 80a178c:	20000520 	.word	0x20000520
 80a1790:	2000051c 	.word	0x2000051c
 80a1794:	20000518 	.word	0x20000518
 80a1798:	20000514 	.word	0x20000514
 80a179c:	20000510 	.word	0x20000510

080a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a17a0:	4b24      	ldr	r3, [pc, #144]	; (80a1834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a17a2:	681a      	ldr	r2, [r3, #0]
 80a17a4:	07d0      	lsls	r0, r2, #31
 80a17a6:	bf5c      	itt	pl
 80a17a8:	2201      	movpl	r2, #1
 80a17aa:	601a      	strpl	r2, [r3, #0]
 80a17ac:	4b22      	ldr	r3, [pc, #136]	; (80a1838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a17ae:	681a      	ldr	r2, [r3, #0]
 80a17b0:	07d1      	lsls	r1, r2, #31
 80a17b2:	bf5c      	itt	pl
 80a17b4:	2201      	movpl	r2, #1
 80a17b6:	601a      	strpl	r2, [r3, #0]
 80a17b8:	4b20      	ldr	r3, [pc, #128]	; (80a183c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a17ba:	681a      	ldr	r2, [r3, #0]
 80a17bc:	07d2      	lsls	r2, r2, #31
 80a17be:	bf5c      	itt	pl
 80a17c0:	2201      	movpl	r2, #1
 80a17c2:	601a      	strpl	r2, [r3, #0]
 80a17c4:	4b1e      	ldr	r3, [pc, #120]	; (80a1840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a17c6:	681a      	ldr	r2, [r3, #0]
 80a17c8:	07d0      	lsls	r0, r2, #31
 80a17ca:	bf5c      	itt	pl
 80a17cc:	2201      	movpl	r2, #1
 80a17ce:	601a      	strpl	r2, [r3, #0]
 80a17d0:	4b1c      	ldr	r3, [pc, #112]	; (80a1844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a17d2:	681a      	ldr	r2, [r3, #0]
 80a17d4:	07d1      	lsls	r1, r2, #31
 80a17d6:	bf5c      	itt	pl
 80a17d8:	2201      	movpl	r2, #1
 80a17da:	601a      	strpl	r2, [r3, #0]
 80a17dc:	4b1a      	ldr	r3, [pc, #104]	; (80a1848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a17de:	681a      	ldr	r2, [r3, #0]
 80a17e0:	07d2      	lsls	r2, r2, #31
 80a17e2:	bf5c      	itt	pl
 80a17e4:	2201      	movpl	r2, #1
 80a17e6:	601a      	strpl	r2, [r3, #0]
 80a17e8:	4b18      	ldr	r3, [pc, #96]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a17ea:	681a      	ldr	r2, [r3, #0]
 80a17ec:	07d0      	lsls	r0, r2, #31
 80a17ee:	bf5c      	itt	pl
 80a17f0:	2201      	movpl	r2, #1
 80a17f2:	601a      	strpl	r2, [r3, #0]
 80a17f4:	4b16      	ldr	r3, [pc, #88]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a17f6:	681a      	ldr	r2, [r3, #0]
 80a17f8:	07d1      	lsls	r1, r2, #31
 80a17fa:	bf5c      	itt	pl
 80a17fc:	2201      	movpl	r2, #1
 80a17fe:	601a      	strpl	r2, [r3, #0]
 80a1800:	4b14      	ldr	r3, [pc, #80]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1802:	681a      	ldr	r2, [r3, #0]
 80a1804:	07d2      	lsls	r2, r2, #31
 80a1806:	bf5c      	itt	pl
 80a1808:	2201      	movpl	r2, #1
 80a180a:	601a      	strpl	r2, [r3, #0]
 80a180c:	4b12      	ldr	r3, [pc, #72]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a180e:	681a      	ldr	r2, [r3, #0]
 80a1810:	07d0      	lsls	r0, r2, #31
 80a1812:	bf5c      	itt	pl
 80a1814:	2201      	movpl	r2, #1
 80a1816:	601a      	strpl	r2, [r3, #0]
 80a1818:	4b10      	ldr	r3, [pc, #64]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a181a:	681a      	ldr	r2, [r3, #0]
 80a181c:	07d1      	lsls	r1, r2, #31
 80a181e:	bf5c      	itt	pl
 80a1820:	2201      	movpl	r2, #1
 80a1822:	601a      	strpl	r2, [r3, #0]
 80a1824:	4b0e      	ldr	r3, [pc, #56]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1826:	681a      	ldr	r2, [r3, #0]
 80a1828:	07d2      	lsls	r2, r2, #31
 80a182a:	bf5c      	itt	pl
 80a182c:	2201      	movpl	r2, #1
 80a182e:	601a      	strpl	r2, [r3, #0]
 80a1830:	4770      	bx	lr
 80a1832:	bf00      	nop
 80a1834:	2000056c 	.word	0x2000056c
 80a1838:	20000568 	.word	0x20000568
 80a183c:	20000564 	.word	0x20000564
 80a1840:	20000560 	.word	0x20000560
 80a1844:	2000055c 	.word	0x2000055c
 80a1848:	20000558 	.word	0x20000558
 80a184c:	20000554 	.word	0x20000554
 80a1850:	20000550 	.word	0x20000550
 80a1854:	2000054c 	.word	0x2000054c
 80a1858:	20000548 	.word	0x20000548
 80a185c:	20000544 	.word	0x20000544
 80a1860:	20000540 	.word	0x20000540

080a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1864:	4b18      	ldr	r3, [pc, #96]	; (80a18c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d1      	lsls	r1, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b16      	ldr	r3, [pc, #88]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d2      	lsls	r2, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b14      	ldr	r3, [pc, #80]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d0      	lsls	r0, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b12      	ldr	r3, [pc, #72]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d1      	lsls	r1, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4b10      	ldr	r3, [pc, #64]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1896:	681a      	ldr	r2, [r3, #0]
 80a1898:	07d2      	lsls	r2, r2, #31
 80a189a:	bf5c      	itt	pl
 80a189c:	2201      	movpl	r2, #1
 80a189e:	601a      	strpl	r2, [r3, #0]
 80a18a0:	4b0e      	ldr	r3, [pc, #56]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a18a2:	681a      	ldr	r2, [r3, #0]
 80a18a4:	07d0      	lsls	r0, r2, #31
 80a18a6:	bf5c      	itt	pl
 80a18a8:	2201      	movpl	r2, #1
 80a18aa:	601a      	strpl	r2, [r3, #0]
 80a18ac:	4b0c      	ldr	r3, [pc, #48]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a18ae:	681a      	ldr	r2, [r3, #0]
 80a18b0:	07d1      	lsls	r1, r2, #31
 80a18b2:	bf5c      	itt	pl
 80a18b4:	2201      	movpl	r2, #1
 80a18b6:	601a      	strpl	r2, [r3, #0]
 80a18b8:	4b0a      	ldr	r3, [pc, #40]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d2      	lsls	r2, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4770      	bx	lr
 80a18c6:	bf00      	nop
 80a18c8:	2000058c 	.word	0x2000058c
 80a18cc:	20000588 	.word	0x20000588
 80a18d0:	20000584 	.word	0x20000584
 80a18d4:	20000580 	.word	0x20000580
 80a18d8:	2000057c 	.word	0x2000057c
 80a18dc:	20000578 	.word	0x20000578
 80a18e0:	20000574 	.word	0x20000574
 80a18e4:	20000570 	.word	0x20000570

080a18e8 <__aeabi_drsub>:
 80a18e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a18ec:	e002      	b.n	80a18f4 <__adddf3>
 80a18ee:	bf00      	nop

080a18f0 <__aeabi_dsub>:
 80a18f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a18f4 <__adddf3>:
 80a18f4:	b530      	push	{r4, r5, lr}
 80a18f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a18fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a18fe:	ea94 0f05 	teq	r4, r5
 80a1902:	bf08      	it	eq
 80a1904:	ea90 0f02 	teqeq	r0, r2
 80a1908:	bf1f      	itttt	ne
 80a190a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a190e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1912:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1916:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a191a:	f000 80e2 	beq.w	80a1ae2 <__adddf3+0x1ee>
 80a191e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1922:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1926:	bfb8      	it	lt
 80a1928:	426d      	neglt	r5, r5
 80a192a:	dd0c      	ble.n	80a1946 <__adddf3+0x52>
 80a192c:	442c      	add	r4, r5
 80a192e:	ea80 0202 	eor.w	r2, r0, r2
 80a1932:	ea81 0303 	eor.w	r3, r1, r3
 80a1936:	ea82 0000 	eor.w	r0, r2, r0
 80a193a:	ea83 0101 	eor.w	r1, r3, r1
 80a193e:	ea80 0202 	eor.w	r2, r0, r2
 80a1942:	ea81 0303 	eor.w	r3, r1, r3
 80a1946:	2d36      	cmp	r5, #54	; 0x36
 80a1948:	bf88      	it	hi
 80a194a:	bd30      	pophi	{r4, r5, pc}
 80a194c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1950:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1954:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1958:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a195c:	d002      	beq.n	80a1964 <__adddf3+0x70>
 80a195e:	4240      	negs	r0, r0
 80a1960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1964:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1968:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a196c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1970:	d002      	beq.n	80a1978 <__adddf3+0x84>
 80a1972:	4252      	negs	r2, r2
 80a1974:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1978:	ea94 0f05 	teq	r4, r5
 80a197c:	f000 80a7 	beq.w	80a1ace <__adddf3+0x1da>
 80a1980:	f1a4 0401 	sub.w	r4, r4, #1
 80a1984:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1988:	db0d      	blt.n	80a19a6 <__adddf3+0xb2>
 80a198a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a198e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1992:	1880      	adds	r0, r0, r2
 80a1994:	f141 0100 	adc.w	r1, r1, #0
 80a1998:	fa03 f20e 	lsl.w	r2, r3, lr
 80a199c:	1880      	adds	r0, r0, r2
 80a199e:	fa43 f305 	asr.w	r3, r3, r5
 80a19a2:	4159      	adcs	r1, r3
 80a19a4:	e00e      	b.n	80a19c4 <__adddf3+0xd0>
 80a19a6:	f1a5 0520 	sub.w	r5, r5, #32
 80a19aa:	f10e 0e20 	add.w	lr, lr, #32
 80a19ae:	2a01      	cmp	r2, #1
 80a19b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a19b4:	bf28      	it	cs
 80a19b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a19ba:	fa43 f305 	asr.w	r3, r3, r5
 80a19be:	18c0      	adds	r0, r0, r3
 80a19c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a19c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a19c8:	d507      	bpl.n	80a19da <__adddf3+0xe6>
 80a19ca:	f04f 0e00 	mov.w	lr, #0
 80a19ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80a19d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a19d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a19da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a19de:	d31b      	bcc.n	80a1a18 <__adddf3+0x124>
 80a19e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a19e4:	d30c      	bcc.n	80a1a00 <__adddf3+0x10c>
 80a19e6:	0849      	lsrs	r1, r1, #1
 80a19e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a19ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a19f0:	f104 0401 	add.w	r4, r4, #1
 80a19f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a19f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a19fc:	f080 809a 	bcs.w	80a1b34 <__adddf3+0x240>
 80a1a00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1a04:	bf08      	it	eq
 80a1a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1a0a:	f150 0000 	adcs.w	r0, r0, #0
 80a1a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1a12:	ea41 0105 	orr.w	r1, r1, r5
 80a1a16:	bd30      	pop	{r4, r5, pc}
 80a1a18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1a1c:	4140      	adcs	r0, r0
 80a1a1e:	eb41 0101 	adc.w	r1, r1, r1
 80a1a22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1a26:	f1a4 0401 	sub.w	r4, r4, #1
 80a1a2a:	d1e9      	bne.n	80a1a00 <__adddf3+0x10c>
 80a1a2c:	f091 0f00 	teq	r1, #0
 80a1a30:	bf04      	itt	eq
 80a1a32:	4601      	moveq	r1, r0
 80a1a34:	2000      	moveq	r0, #0
 80a1a36:	fab1 f381 	clz	r3, r1
 80a1a3a:	bf08      	it	eq
 80a1a3c:	3320      	addeq	r3, #32
 80a1a3e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1a42:	f1b3 0220 	subs.w	r2, r3, #32
 80a1a46:	da0c      	bge.n	80a1a62 <__adddf3+0x16e>
 80a1a48:	320c      	adds	r2, #12
 80a1a4a:	dd08      	ble.n	80a1a5e <__adddf3+0x16a>
 80a1a4c:	f102 0c14 	add.w	ip, r2, #20
 80a1a50:	f1c2 020c 	rsb	r2, r2, #12
 80a1a54:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1a58:	fa21 f102 	lsr.w	r1, r1, r2
 80a1a5c:	e00c      	b.n	80a1a78 <__adddf3+0x184>
 80a1a5e:	f102 0214 	add.w	r2, r2, #20
 80a1a62:	bfd8      	it	le
 80a1a64:	f1c2 0c20 	rsble	ip, r2, #32
 80a1a68:	fa01 f102 	lsl.w	r1, r1, r2
 80a1a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1a70:	bfdc      	itt	le
 80a1a72:	ea41 010c 	orrle.w	r1, r1, ip
 80a1a76:	4090      	lslle	r0, r2
 80a1a78:	1ae4      	subs	r4, r4, r3
 80a1a7a:	bfa2      	ittt	ge
 80a1a7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1a80:	4329      	orrge	r1, r5
 80a1a82:	bd30      	popge	{r4, r5, pc}
 80a1a84:	ea6f 0404 	mvn.w	r4, r4
 80a1a88:	3c1f      	subs	r4, #31
 80a1a8a:	da1c      	bge.n	80a1ac6 <__adddf3+0x1d2>
 80a1a8c:	340c      	adds	r4, #12
 80a1a8e:	dc0e      	bgt.n	80a1aae <__adddf3+0x1ba>
 80a1a90:	f104 0414 	add.w	r4, r4, #20
 80a1a94:	f1c4 0220 	rsb	r2, r4, #32
 80a1a98:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a9c:	fa01 f302 	lsl.w	r3, r1, r2
 80a1aa0:	ea40 0003 	orr.w	r0, r0, r3
 80a1aa4:	fa21 f304 	lsr.w	r3, r1, r4
 80a1aa8:	ea45 0103 	orr.w	r1, r5, r3
 80a1aac:	bd30      	pop	{r4, r5, pc}
 80a1aae:	f1c4 040c 	rsb	r4, r4, #12
 80a1ab2:	f1c4 0220 	rsb	r2, r4, #32
 80a1ab6:	fa20 f002 	lsr.w	r0, r0, r2
 80a1aba:	fa01 f304 	lsl.w	r3, r1, r4
 80a1abe:	ea40 0003 	orr.w	r0, r0, r3
 80a1ac2:	4629      	mov	r1, r5
 80a1ac4:	bd30      	pop	{r4, r5, pc}
 80a1ac6:	fa21 f004 	lsr.w	r0, r1, r4
 80a1aca:	4629      	mov	r1, r5
 80a1acc:	bd30      	pop	{r4, r5, pc}
 80a1ace:	f094 0f00 	teq	r4, #0
 80a1ad2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1ad6:	bf06      	itte	eq
 80a1ad8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1adc:	3401      	addeq	r4, #1
 80a1ade:	3d01      	subne	r5, #1
 80a1ae0:	e74e      	b.n	80a1980 <__adddf3+0x8c>
 80a1ae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1ae6:	bf18      	it	ne
 80a1ae8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1aec:	d029      	beq.n	80a1b42 <__adddf3+0x24e>
 80a1aee:	ea94 0f05 	teq	r4, r5
 80a1af2:	bf08      	it	eq
 80a1af4:	ea90 0f02 	teqeq	r0, r2
 80a1af8:	d005      	beq.n	80a1b06 <__adddf3+0x212>
 80a1afa:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1afe:	bf04      	itt	eq
 80a1b00:	4619      	moveq	r1, r3
 80a1b02:	4610      	moveq	r0, r2
 80a1b04:	bd30      	pop	{r4, r5, pc}
 80a1b06:	ea91 0f03 	teq	r1, r3
 80a1b0a:	bf1e      	ittt	ne
 80a1b0c:	2100      	movne	r1, #0
 80a1b0e:	2000      	movne	r0, #0
 80a1b10:	bd30      	popne	{r4, r5, pc}
 80a1b12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1b16:	d105      	bne.n	80a1b24 <__adddf3+0x230>
 80a1b18:	0040      	lsls	r0, r0, #1
 80a1b1a:	4149      	adcs	r1, r1
 80a1b1c:	bf28      	it	cs
 80a1b1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1b22:	bd30      	pop	{r4, r5, pc}
 80a1b24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1b28:	bf3c      	itt	cc
 80a1b2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1b2e:	bd30      	popcc	{r4, r5, pc}
 80a1b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1b34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1b38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1b3c:	f04f 0000 	mov.w	r0, #0
 80a1b40:	bd30      	pop	{r4, r5, pc}
 80a1b42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1b46:	bf1a      	itte	ne
 80a1b48:	4619      	movne	r1, r3
 80a1b4a:	4610      	movne	r0, r2
 80a1b4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1b50:	bf1c      	itt	ne
 80a1b52:	460b      	movne	r3, r1
 80a1b54:	4602      	movne	r2, r0
 80a1b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1b5a:	bf06      	itte	eq
 80a1b5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1b60:	ea91 0f03 	teqeq	r1, r3
 80a1b64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1b68:	bd30      	pop	{r4, r5, pc}
 80a1b6a:	bf00      	nop

080a1b6c <__aeabi_ui2d>:
 80a1b6c:	f090 0f00 	teq	r0, #0
 80a1b70:	bf04      	itt	eq
 80a1b72:	2100      	moveq	r1, #0
 80a1b74:	4770      	bxeq	lr
 80a1b76:	b530      	push	{r4, r5, lr}
 80a1b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1b80:	f04f 0500 	mov.w	r5, #0
 80a1b84:	f04f 0100 	mov.w	r1, #0
 80a1b88:	e750      	b.n	80a1a2c <__adddf3+0x138>
 80a1b8a:	bf00      	nop

080a1b8c <__aeabi_i2d>:
 80a1b8c:	f090 0f00 	teq	r0, #0
 80a1b90:	bf04      	itt	eq
 80a1b92:	2100      	moveq	r1, #0
 80a1b94:	4770      	bxeq	lr
 80a1b96:	b530      	push	{r4, r5, lr}
 80a1b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ba0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1ba4:	bf48      	it	mi
 80a1ba6:	4240      	negmi	r0, r0
 80a1ba8:	f04f 0100 	mov.w	r1, #0
 80a1bac:	e73e      	b.n	80a1a2c <__adddf3+0x138>
 80a1bae:	bf00      	nop

080a1bb0 <__aeabi_f2d>:
 80a1bb0:	0042      	lsls	r2, r0, #1
 80a1bb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1bba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1bbe:	bf1f      	itttt	ne
 80a1bc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1bc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1bc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1bcc:	4770      	bxne	lr
 80a1bce:	f092 0f00 	teq	r2, #0
 80a1bd2:	bf14      	ite	ne
 80a1bd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1bd8:	4770      	bxeq	lr
 80a1bda:	b530      	push	{r4, r5, lr}
 80a1bdc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1be8:	e720      	b.n	80a1a2c <__adddf3+0x138>
 80a1bea:	bf00      	nop

080a1bec <__aeabi_ul2d>:
 80a1bec:	ea50 0201 	orrs.w	r2, r0, r1
 80a1bf0:	bf08      	it	eq
 80a1bf2:	4770      	bxeq	lr
 80a1bf4:	b530      	push	{r4, r5, lr}
 80a1bf6:	f04f 0500 	mov.w	r5, #0
 80a1bfa:	e00a      	b.n	80a1c12 <__aeabi_l2d+0x16>

080a1bfc <__aeabi_l2d>:
 80a1bfc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1c00:	bf08      	it	eq
 80a1c02:	4770      	bxeq	lr
 80a1c04:	b530      	push	{r4, r5, lr}
 80a1c06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1c0a:	d502      	bpl.n	80a1c12 <__aeabi_l2d+0x16>
 80a1c0c:	4240      	negs	r0, r0
 80a1c0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1c12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1c1e:	f43f aedc 	beq.w	80a19da <__adddf3+0xe6>
 80a1c22:	f04f 0203 	mov.w	r2, #3
 80a1c26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1c2a:	bf18      	it	ne
 80a1c2c:	3203      	addne	r2, #3
 80a1c2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1c32:	bf18      	it	ne
 80a1c34:	3203      	addne	r2, #3
 80a1c36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1c3a:	f1c2 0320 	rsb	r3, r2, #32
 80a1c3e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1c42:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c46:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1c4a:	ea40 000e 	orr.w	r0, r0, lr
 80a1c4e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c52:	4414      	add	r4, r2
 80a1c54:	e6c1      	b.n	80a19da <__adddf3+0xe6>
 80a1c56:	bf00      	nop

080a1c58 <__aeabi_dmul>:
 80a1c58:	b570      	push	{r4, r5, r6, lr}
 80a1c5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1c5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1c62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1c66:	bf1d      	ittte	ne
 80a1c68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1c6c:	ea94 0f0c 	teqne	r4, ip
 80a1c70:	ea95 0f0c 	teqne	r5, ip
 80a1c74:	f000 f8de 	bleq	80a1e34 <__aeabi_dmul+0x1dc>
 80a1c78:	442c      	add	r4, r5
 80a1c7a:	ea81 0603 	eor.w	r6, r1, r3
 80a1c7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1c82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1c86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1c8a:	bf18      	it	ne
 80a1c8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1c90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1c98:	d038      	beq.n	80a1d0c <__aeabi_dmul+0xb4>
 80a1c9a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1c9e:	f04f 0500 	mov.w	r5, #0
 80a1ca2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1ca6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1caa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1cae:	f04f 0600 	mov.w	r6, #0
 80a1cb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1cb6:	f09c 0f00 	teq	ip, #0
 80a1cba:	bf18      	it	ne
 80a1cbc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1cc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1cc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1cc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1ccc:	d204      	bcs.n	80a1cd8 <__aeabi_dmul+0x80>
 80a1cce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1cd2:	416d      	adcs	r5, r5
 80a1cd4:	eb46 0606 	adc.w	r6, r6, r6
 80a1cd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1cdc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1ce0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1ce4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1ce8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1cec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1cf0:	bf88      	it	hi
 80a1cf2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1cf6:	d81e      	bhi.n	80a1d36 <__aeabi_dmul+0xde>
 80a1cf8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1cfc:	bf08      	it	eq
 80a1cfe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1d02:	f150 0000 	adcs.w	r0, r0, #0
 80a1d06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1d0a:	bd70      	pop	{r4, r5, r6, pc}
 80a1d0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1d10:	ea46 0101 	orr.w	r1, r6, r1
 80a1d14:	ea40 0002 	orr.w	r0, r0, r2
 80a1d18:	ea81 0103 	eor.w	r1, r1, r3
 80a1d1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1d20:	bfc2      	ittt	gt
 80a1d22:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1d26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1d2a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1d30:	f04f 0e00 	mov.w	lr, #0
 80a1d34:	3c01      	subs	r4, #1
 80a1d36:	f300 80ab 	bgt.w	80a1e90 <__aeabi_dmul+0x238>
 80a1d3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1d3e:	bfde      	ittt	le
 80a1d40:	2000      	movle	r0, #0
 80a1d42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1d46:	bd70      	pople	{r4, r5, r6, pc}
 80a1d48:	f1c4 0400 	rsb	r4, r4, #0
 80a1d4c:	3c20      	subs	r4, #32
 80a1d4e:	da35      	bge.n	80a1dbc <__aeabi_dmul+0x164>
 80a1d50:	340c      	adds	r4, #12
 80a1d52:	dc1b      	bgt.n	80a1d8c <__aeabi_dmul+0x134>
 80a1d54:	f104 0414 	add.w	r4, r4, #20
 80a1d58:	f1c4 0520 	rsb	r5, r4, #32
 80a1d5c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1d60:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d64:	fa01 f205 	lsl.w	r2, r1, r5
 80a1d68:	ea40 0002 	orr.w	r0, r0, r2
 80a1d6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1d70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1d74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1d78:	fa21 f604 	lsr.w	r6, r1, r4
 80a1d7c:	eb42 0106 	adc.w	r1, r2, r6
 80a1d80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1d84:	bf08      	it	eq
 80a1d86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1d8a:	bd70      	pop	{r4, r5, r6, pc}
 80a1d8c:	f1c4 040c 	rsb	r4, r4, #12
 80a1d90:	f1c4 0520 	rsb	r5, r4, #32
 80a1d94:	fa00 f304 	lsl.w	r3, r0, r4
 80a1d98:	fa20 f005 	lsr.w	r0, r0, r5
 80a1d9c:	fa01 f204 	lsl.w	r2, r1, r4
 80a1da0:	ea40 0002 	orr.w	r0, r0, r2
 80a1da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1da8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1dac:	f141 0100 	adc.w	r1, r1, #0
 80a1db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1db4:	bf08      	it	eq
 80a1db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1dba:	bd70      	pop	{r4, r5, r6, pc}
 80a1dbc:	f1c4 0520 	rsb	r5, r4, #32
 80a1dc0:	fa00 f205 	lsl.w	r2, r0, r5
 80a1dc4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1dc8:	fa20 f304 	lsr.w	r3, r0, r4
 80a1dcc:	fa01 f205 	lsl.w	r2, r1, r5
 80a1dd0:	ea43 0302 	orr.w	r3, r3, r2
 80a1dd4:	fa21 f004 	lsr.w	r0, r1, r4
 80a1dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ddc:	fa21 f204 	lsr.w	r2, r1, r4
 80a1de0:	ea20 0002 	bic.w	r0, r0, r2
 80a1de4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1de8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1dec:	bf08      	it	eq
 80a1dee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1df2:	bd70      	pop	{r4, r5, r6, pc}
 80a1df4:	f094 0f00 	teq	r4, #0
 80a1df8:	d10f      	bne.n	80a1e1a <__aeabi_dmul+0x1c2>
 80a1dfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1dfe:	0040      	lsls	r0, r0, #1
 80a1e00:	eb41 0101 	adc.w	r1, r1, r1
 80a1e04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1e08:	bf08      	it	eq
 80a1e0a:	3c01      	subeq	r4, #1
 80a1e0c:	d0f7      	beq.n	80a1dfe <__aeabi_dmul+0x1a6>
 80a1e0e:	ea41 0106 	orr.w	r1, r1, r6
 80a1e12:	f095 0f00 	teq	r5, #0
 80a1e16:	bf18      	it	ne
 80a1e18:	4770      	bxne	lr
 80a1e1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1e1e:	0052      	lsls	r2, r2, #1
 80a1e20:	eb43 0303 	adc.w	r3, r3, r3
 80a1e24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1e28:	bf08      	it	eq
 80a1e2a:	3d01      	subeq	r5, #1
 80a1e2c:	d0f7      	beq.n	80a1e1e <__aeabi_dmul+0x1c6>
 80a1e2e:	ea43 0306 	orr.w	r3, r3, r6
 80a1e32:	4770      	bx	lr
 80a1e34:	ea94 0f0c 	teq	r4, ip
 80a1e38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1e3c:	bf18      	it	ne
 80a1e3e:	ea95 0f0c 	teqne	r5, ip
 80a1e42:	d00c      	beq.n	80a1e5e <__aeabi_dmul+0x206>
 80a1e44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1e48:	bf18      	it	ne
 80a1e4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1e4e:	d1d1      	bne.n	80a1df4 <__aeabi_dmul+0x19c>
 80a1e50:	ea81 0103 	eor.w	r1, r1, r3
 80a1e54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1e58:	f04f 0000 	mov.w	r0, #0
 80a1e5c:	bd70      	pop	{r4, r5, r6, pc}
 80a1e5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1e62:	bf06      	itte	eq
 80a1e64:	4610      	moveq	r0, r2
 80a1e66:	4619      	moveq	r1, r3
 80a1e68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1e6c:	d019      	beq.n	80a1ea2 <__aeabi_dmul+0x24a>
 80a1e6e:	ea94 0f0c 	teq	r4, ip
 80a1e72:	d102      	bne.n	80a1e7a <__aeabi_dmul+0x222>
 80a1e74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1e78:	d113      	bne.n	80a1ea2 <__aeabi_dmul+0x24a>
 80a1e7a:	ea95 0f0c 	teq	r5, ip
 80a1e7e:	d105      	bne.n	80a1e8c <__aeabi_dmul+0x234>
 80a1e80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1e84:	bf1c      	itt	ne
 80a1e86:	4610      	movne	r0, r2
 80a1e88:	4619      	movne	r1, r3
 80a1e8a:	d10a      	bne.n	80a1ea2 <__aeabi_dmul+0x24a>
 80a1e8c:	ea81 0103 	eor.w	r1, r1, r3
 80a1e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1e94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1e98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e9c:	f04f 0000 	mov.w	r0, #0
 80a1ea0:	bd70      	pop	{r4, r5, r6, pc}
 80a1ea2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1ea6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1eaa:	bd70      	pop	{r4, r5, r6, pc}

080a1eac <__aeabi_ddiv>:
 80a1eac:	b570      	push	{r4, r5, r6, lr}
 80a1eae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1eb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1eb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1eba:	bf1d      	ittte	ne
 80a1ebc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ec0:	ea94 0f0c 	teqne	r4, ip
 80a1ec4:	ea95 0f0c 	teqne	r5, ip
 80a1ec8:	f000 f8a7 	bleq	80a201a <__aeabi_ddiv+0x16e>
 80a1ecc:	eba4 0405 	sub.w	r4, r4, r5
 80a1ed0:	ea81 0e03 	eor.w	lr, r1, r3
 80a1ed4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1ed8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1edc:	f000 8088 	beq.w	80a1ff0 <__aeabi_ddiv+0x144>
 80a1ee0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ee4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1ee8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1eec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1ef0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1ef4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1ef8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1efc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1f00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1f04:	429d      	cmp	r5, r3
 80a1f06:	bf08      	it	eq
 80a1f08:	4296      	cmpeq	r6, r2
 80a1f0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1f0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1f12:	d202      	bcs.n	80a1f1a <__aeabi_ddiv+0x6e>
 80a1f14:	085b      	lsrs	r3, r3, #1
 80a1f16:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f1a:	1ab6      	subs	r6, r6, r2
 80a1f1c:	eb65 0503 	sbc.w	r5, r5, r3
 80a1f20:	085b      	lsrs	r3, r3, #1
 80a1f22:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1f2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1f2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f36:	bf22      	ittt	cs
 80a1f38:	1ab6      	subcs	r6, r6, r2
 80a1f3a:	4675      	movcs	r5, lr
 80a1f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1f40:	085b      	lsrs	r3, r3, #1
 80a1f42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f4e:	bf22      	ittt	cs
 80a1f50:	1ab6      	subcs	r6, r6, r2
 80a1f52:	4675      	movcs	r5, lr
 80a1f54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1f58:	085b      	lsrs	r3, r3, #1
 80a1f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f66:	bf22      	ittt	cs
 80a1f68:	1ab6      	subcs	r6, r6, r2
 80a1f6a:	4675      	movcs	r5, lr
 80a1f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1f70:	085b      	lsrs	r3, r3, #1
 80a1f72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f7e:	bf22      	ittt	cs
 80a1f80:	1ab6      	subcs	r6, r6, r2
 80a1f82:	4675      	movcs	r5, lr
 80a1f84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1f88:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1f8c:	d018      	beq.n	80a1fc0 <__aeabi_ddiv+0x114>
 80a1f8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1f92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1f96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1f9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1f9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1fa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1fa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1faa:	d1c0      	bne.n	80a1f2e <__aeabi_ddiv+0x82>
 80a1fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1fb0:	d10b      	bne.n	80a1fca <__aeabi_ddiv+0x11e>
 80a1fb2:	ea41 0100 	orr.w	r1, r1, r0
 80a1fb6:	f04f 0000 	mov.w	r0, #0
 80a1fba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1fbe:	e7b6      	b.n	80a1f2e <__aeabi_ddiv+0x82>
 80a1fc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1fc4:	bf04      	itt	eq
 80a1fc6:	4301      	orreq	r1, r0
 80a1fc8:	2000      	moveq	r0, #0
 80a1fca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1fce:	bf88      	it	hi
 80a1fd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1fd4:	f63f aeaf 	bhi.w	80a1d36 <__aeabi_dmul+0xde>
 80a1fd8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1fdc:	bf04      	itt	eq
 80a1fde:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1fe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1fe6:	f150 0000 	adcs.w	r0, r0, #0
 80a1fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fee:	bd70      	pop	{r4, r5, r6, pc}
 80a1ff0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1ff4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1ff8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1ffc:	bfc2      	ittt	gt
 80a1ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2006:	bd70      	popgt	{r4, r5, r6, pc}
 80a2008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a200c:	f04f 0e00 	mov.w	lr, #0
 80a2010:	3c01      	subs	r4, #1
 80a2012:	e690      	b.n	80a1d36 <__aeabi_dmul+0xde>
 80a2014:	ea45 0e06 	orr.w	lr, r5, r6
 80a2018:	e68d      	b.n	80a1d36 <__aeabi_dmul+0xde>
 80a201a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a201e:	ea94 0f0c 	teq	r4, ip
 80a2022:	bf08      	it	eq
 80a2024:	ea95 0f0c 	teqeq	r5, ip
 80a2028:	f43f af3b 	beq.w	80a1ea2 <__aeabi_dmul+0x24a>
 80a202c:	ea94 0f0c 	teq	r4, ip
 80a2030:	d10a      	bne.n	80a2048 <__aeabi_ddiv+0x19c>
 80a2032:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2036:	f47f af34 	bne.w	80a1ea2 <__aeabi_dmul+0x24a>
 80a203a:	ea95 0f0c 	teq	r5, ip
 80a203e:	f47f af25 	bne.w	80a1e8c <__aeabi_dmul+0x234>
 80a2042:	4610      	mov	r0, r2
 80a2044:	4619      	mov	r1, r3
 80a2046:	e72c      	b.n	80a1ea2 <__aeabi_dmul+0x24a>
 80a2048:	ea95 0f0c 	teq	r5, ip
 80a204c:	d106      	bne.n	80a205c <__aeabi_ddiv+0x1b0>
 80a204e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2052:	f43f aefd 	beq.w	80a1e50 <__aeabi_dmul+0x1f8>
 80a2056:	4610      	mov	r0, r2
 80a2058:	4619      	mov	r1, r3
 80a205a:	e722      	b.n	80a1ea2 <__aeabi_dmul+0x24a>
 80a205c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2060:	bf18      	it	ne
 80a2062:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2066:	f47f aec5 	bne.w	80a1df4 <__aeabi_dmul+0x19c>
 80a206a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a206e:	f47f af0d 	bne.w	80a1e8c <__aeabi_dmul+0x234>
 80a2072:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2076:	f47f aeeb 	bne.w	80a1e50 <__aeabi_dmul+0x1f8>
 80a207a:	e712      	b.n	80a1ea2 <__aeabi_dmul+0x24a>

080a207c <__gedf2>:
 80a207c:	f04f 3cff 	mov.w	ip, #4294967295
 80a2080:	e006      	b.n	80a2090 <__cmpdf2+0x4>
 80a2082:	bf00      	nop

080a2084 <__ledf2>:
 80a2084:	f04f 0c01 	mov.w	ip, #1
 80a2088:	e002      	b.n	80a2090 <__cmpdf2+0x4>
 80a208a:	bf00      	nop

080a208c <__cmpdf2>:
 80a208c:	f04f 0c01 	mov.w	ip, #1
 80a2090:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2094:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a209c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a20a0:	bf18      	it	ne
 80a20a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a20a6:	d01b      	beq.n	80a20e0 <__cmpdf2+0x54>
 80a20a8:	b001      	add	sp, #4
 80a20aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a20ae:	bf0c      	ite	eq
 80a20b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a20b4:	ea91 0f03 	teqne	r1, r3
 80a20b8:	bf02      	ittt	eq
 80a20ba:	ea90 0f02 	teqeq	r0, r2
 80a20be:	2000      	moveq	r0, #0
 80a20c0:	4770      	bxeq	lr
 80a20c2:	f110 0f00 	cmn.w	r0, #0
 80a20c6:	ea91 0f03 	teq	r1, r3
 80a20ca:	bf58      	it	pl
 80a20cc:	4299      	cmppl	r1, r3
 80a20ce:	bf08      	it	eq
 80a20d0:	4290      	cmpeq	r0, r2
 80a20d2:	bf2c      	ite	cs
 80a20d4:	17d8      	asrcs	r0, r3, #31
 80a20d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a20da:	f040 0001 	orr.w	r0, r0, #1
 80a20de:	4770      	bx	lr
 80a20e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a20e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a20e8:	d102      	bne.n	80a20f0 <__cmpdf2+0x64>
 80a20ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a20ee:	d107      	bne.n	80a2100 <__cmpdf2+0x74>
 80a20f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a20f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a20f8:	d1d6      	bne.n	80a20a8 <__cmpdf2+0x1c>
 80a20fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a20fe:	d0d3      	beq.n	80a20a8 <__cmpdf2+0x1c>
 80a2100:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2104:	4770      	bx	lr
 80a2106:	bf00      	nop

080a2108 <__aeabi_cdrcmple>:
 80a2108:	4684      	mov	ip, r0
 80a210a:	4610      	mov	r0, r2
 80a210c:	4662      	mov	r2, ip
 80a210e:	468c      	mov	ip, r1
 80a2110:	4619      	mov	r1, r3
 80a2112:	4663      	mov	r3, ip
 80a2114:	e000      	b.n	80a2118 <__aeabi_cdcmpeq>
 80a2116:	bf00      	nop

080a2118 <__aeabi_cdcmpeq>:
 80a2118:	b501      	push	{r0, lr}
 80a211a:	f7ff ffb7 	bl	80a208c <__cmpdf2>
 80a211e:	2800      	cmp	r0, #0
 80a2120:	bf48      	it	mi
 80a2122:	f110 0f00 	cmnmi.w	r0, #0
 80a2126:	bd01      	pop	{r0, pc}

080a2128 <__aeabi_dcmpeq>:
 80a2128:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a212c:	f7ff fff4 	bl	80a2118 <__aeabi_cdcmpeq>
 80a2130:	bf0c      	ite	eq
 80a2132:	2001      	moveq	r0, #1
 80a2134:	2000      	movne	r0, #0
 80a2136:	f85d fb08 	ldr.w	pc, [sp], #8
 80a213a:	bf00      	nop

080a213c <__aeabi_dcmplt>:
 80a213c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2140:	f7ff ffea 	bl	80a2118 <__aeabi_cdcmpeq>
 80a2144:	bf34      	ite	cc
 80a2146:	2001      	movcc	r0, #1
 80a2148:	2000      	movcs	r0, #0
 80a214a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a214e:	bf00      	nop

080a2150 <__aeabi_dcmple>:
 80a2150:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2154:	f7ff ffe0 	bl	80a2118 <__aeabi_cdcmpeq>
 80a2158:	bf94      	ite	ls
 80a215a:	2001      	movls	r0, #1
 80a215c:	2000      	movhi	r0, #0
 80a215e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2162:	bf00      	nop

080a2164 <__aeabi_dcmpge>:
 80a2164:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2168:	f7ff ffce 	bl	80a2108 <__aeabi_cdrcmple>
 80a216c:	bf94      	ite	ls
 80a216e:	2001      	movls	r0, #1
 80a2170:	2000      	movhi	r0, #0
 80a2172:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2176:	bf00      	nop

080a2178 <__aeabi_dcmpgt>:
 80a2178:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a217c:	f7ff ffc4 	bl	80a2108 <__aeabi_cdrcmple>
 80a2180:	bf34      	ite	cc
 80a2182:	2001      	movcc	r0, #1
 80a2184:	2000      	movcs	r0, #0
 80a2186:	f85d fb08 	ldr.w	pc, [sp], #8
 80a218a:	bf00      	nop

080a218c <__aeabi_dcmpun>:
 80a218c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2190:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2194:	d102      	bne.n	80a219c <__aeabi_dcmpun+0x10>
 80a2196:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a219a:	d10a      	bne.n	80a21b2 <__aeabi_dcmpun+0x26>
 80a219c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a21a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a21a4:	d102      	bne.n	80a21ac <__aeabi_dcmpun+0x20>
 80a21a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a21aa:	d102      	bne.n	80a21b2 <__aeabi_dcmpun+0x26>
 80a21ac:	f04f 0000 	mov.w	r0, #0
 80a21b0:	4770      	bx	lr
 80a21b2:	f04f 0001 	mov.w	r0, #1
 80a21b6:	4770      	bx	lr

080a21b8 <__aeabi_d2iz>:
 80a21b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a21bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a21c0:	d215      	bcs.n	80a21ee <__aeabi_d2iz+0x36>
 80a21c2:	d511      	bpl.n	80a21e8 <__aeabi_d2iz+0x30>
 80a21c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a21c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a21cc:	d912      	bls.n	80a21f4 <__aeabi_d2iz+0x3c>
 80a21ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a21d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a21d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a21da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a21de:	fa23 f002 	lsr.w	r0, r3, r2
 80a21e2:	bf18      	it	ne
 80a21e4:	4240      	negne	r0, r0
 80a21e6:	4770      	bx	lr
 80a21e8:	f04f 0000 	mov.w	r0, #0
 80a21ec:	4770      	bx	lr
 80a21ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a21f2:	d105      	bne.n	80a2200 <__aeabi_d2iz+0x48>
 80a21f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a21f8:	bf08      	it	eq
 80a21fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a21fe:	4770      	bx	lr
 80a2200:	f04f 0000 	mov.w	r0, #0
 80a2204:	4770      	bx	lr
 80a2206:	bf00      	nop

080a2208 <__aeabi_d2uiz>:
 80a2208:	004a      	lsls	r2, r1, #1
 80a220a:	d211      	bcs.n	80a2230 <__aeabi_d2uiz+0x28>
 80a220c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2210:	d211      	bcs.n	80a2236 <__aeabi_d2uiz+0x2e>
 80a2212:	d50d      	bpl.n	80a2230 <__aeabi_d2uiz+0x28>
 80a2214:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2218:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a221c:	d40e      	bmi.n	80a223c <__aeabi_d2uiz+0x34>
 80a221e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2226:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a222a:	fa23 f002 	lsr.w	r0, r3, r2
 80a222e:	4770      	bx	lr
 80a2230:	f04f 0000 	mov.w	r0, #0
 80a2234:	4770      	bx	lr
 80a2236:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a223a:	d102      	bne.n	80a2242 <__aeabi_d2uiz+0x3a>
 80a223c:	f04f 30ff 	mov.w	r0, #4294967295
 80a2240:	4770      	bx	lr
 80a2242:	f04f 0000 	mov.w	r0, #0
 80a2246:	4770      	bx	lr

080a2248 <__aeabi_d2f>:
 80a2248:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a224c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2250:	bf24      	itt	cs
 80a2252:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2256:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a225a:	d90d      	bls.n	80a2278 <__aeabi_d2f+0x30>
 80a225c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2260:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2264:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2268:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a226c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2270:	bf08      	it	eq
 80a2272:	f020 0001 	biceq.w	r0, r0, #1
 80a2276:	4770      	bx	lr
 80a2278:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a227c:	d121      	bne.n	80a22c2 <__aeabi_d2f+0x7a>
 80a227e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2282:	bfbc      	itt	lt
 80a2284:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2288:	4770      	bxlt	lr
 80a228a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a228e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2292:	f1c2 0218 	rsb	r2, r2, #24
 80a2296:	f1c2 0c20 	rsb	ip, r2, #32
 80a229a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a229e:	fa20 f002 	lsr.w	r0, r0, r2
 80a22a2:	bf18      	it	ne
 80a22a4:	f040 0001 	orrne.w	r0, r0, #1
 80a22a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a22ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a22b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a22b4:	ea40 000c 	orr.w	r0, r0, ip
 80a22b8:	fa23 f302 	lsr.w	r3, r3, r2
 80a22bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a22c0:	e7cc      	b.n	80a225c <__aeabi_d2f+0x14>
 80a22c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a22c6:	d107      	bne.n	80a22d8 <__aeabi_d2f+0x90>
 80a22c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a22cc:	bf1e      	ittt	ne
 80a22ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a22d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a22d6:	4770      	bxne	lr
 80a22d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a22dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a22e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a22e4:	4770      	bx	lr
 80a22e6:	bf00      	nop

080a22e8 <__gesf2>:
 80a22e8:	f04f 3cff 	mov.w	ip, #4294967295
 80a22ec:	e006      	b.n	80a22fc <__cmpsf2+0x4>
 80a22ee:	bf00      	nop

080a22f0 <__lesf2>:
 80a22f0:	f04f 0c01 	mov.w	ip, #1
 80a22f4:	e002      	b.n	80a22fc <__cmpsf2+0x4>
 80a22f6:	bf00      	nop

080a22f8 <__cmpsf2>:
 80a22f8:	f04f 0c01 	mov.w	ip, #1
 80a22fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2300:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2304:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2308:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a230c:	bf18      	it	ne
 80a230e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2312:	d011      	beq.n	80a2338 <__cmpsf2+0x40>
 80a2314:	b001      	add	sp, #4
 80a2316:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a231a:	bf18      	it	ne
 80a231c:	ea90 0f01 	teqne	r0, r1
 80a2320:	bf58      	it	pl
 80a2322:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2326:	bf88      	it	hi
 80a2328:	17c8      	asrhi	r0, r1, #31
 80a232a:	bf38      	it	cc
 80a232c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2330:	bf18      	it	ne
 80a2332:	f040 0001 	orrne.w	r0, r0, #1
 80a2336:	4770      	bx	lr
 80a2338:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a233c:	d102      	bne.n	80a2344 <__cmpsf2+0x4c>
 80a233e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2342:	d105      	bne.n	80a2350 <__cmpsf2+0x58>
 80a2344:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2348:	d1e4      	bne.n	80a2314 <__cmpsf2+0x1c>
 80a234a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a234e:	d0e1      	beq.n	80a2314 <__cmpsf2+0x1c>
 80a2350:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2354:	4770      	bx	lr
 80a2356:	bf00      	nop

080a2358 <__aeabi_cfrcmple>:
 80a2358:	4684      	mov	ip, r0
 80a235a:	4608      	mov	r0, r1
 80a235c:	4661      	mov	r1, ip
 80a235e:	e7ff      	b.n	80a2360 <__aeabi_cfcmpeq>

080a2360 <__aeabi_cfcmpeq>:
 80a2360:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2362:	f7ff ffc9 	bl	80a22f8 <__cmpsf2>
 80a2366:	2800      	cmp	r0, #0
 80a2368:	bf48      	it	mi
 80a236a:	f110 0f00 	cmnmi.w	r0, #0
 80a236e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2370 <__aeabi_fcmpeq>:
 80a2370:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2374:	f7ff fff4 	bl	80a2360 <__aeabi_cfcmpeq>
 80a2378:	bf0c      	ite	eq
 80a237a:	2001      	moveq	r0, #1
 80a237c:	2000      	movne	r0, #0
 80a237e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2382:	bf00      	nop

080a2384 <__aeabi_fcmplt>:
 80a2384:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2388:	f7ff ffea 	bl	80a2360 <__aeabi_cfcmpeq>
 80a238c:	bf34      	ite	cc
 80a238e:	2001      	movcc	r0, #1
 80a2390:	2000      	movcs	r0, #0
 80a2392:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2396:	bf00      	nop

080a2398 <__aeabi_fcmple>:
 80a2398:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a239c:	f7ff ffe0 	bl	80a2360 <__aeabi_cfcmpeq>
 80a23a0:	bf94      	ite	ls
 80a23a2:	2001      	movls	r0, #1
 80a23a4:	2000      	movhi	r0, #0
 80a23a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23aa:	bf00      	nop

080a23ac <__aeabi_fcmpge>:
 80a23ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a23b0:	f7ff ffd2 	bl	80a2358 <__aeabi_cfrcmple>
 80a23b4:	bf94      	ite	ls
 80a23b6:	2001      	movls	r0, #1
 80a23b8:	2000      	movhi	r0, #0
 80a23ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23be:	bf00      	nop

080a23c0 <__aeabi_fcmpgt>:
 80a23c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a23c4:	f7ff ffc8 	bl	80a2358 <__aeabi_cfrcmple>
 80a23c8:	bf34      	ite	cc
 80a23ca:	2001      	movcc	r0, #1
 80a23cc:	2000      	movcs	r0, #0
 80a23ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23d2:	bf00      	nop

080a23d4 <__aeabi_f2uiz>:
 80a23d4:	0042      	lsls	r2, r0, #1
 80a23d6:	d20e      	bcs.n	80a23f6 <__aeabi_f2uiz+0x22>
 80a23d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a23dc:	d30b      	bcc.n	80a23f6 <__aeabi_f2uiz+0x22>
 80a23de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a23e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a23e6:	d409      	bmi.n	80a23fc <__aeabi_f2uiz+0x28>
 80a23e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a23ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a23f0:	fa23 f002 	lsr.w	r0, r3, r2
 80a23f4:	4770      	bx	lr
 80a23f6:	f04f 0000 	mov.w	r0, #0
 80a23fa:	4770      	bx	lr
 80a23fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2400:	d101      	bne.n	80a2406 <__aeabi_f2uiz+0x32>
 80a2402:	0242      	lsls	r2, r0, #9
 80a2404:	d102      	bne.n	80a240c <__aeabi_f2uiz+0x38>
 80a2406:	f04f 30ff 	mov.w	r0, #4294967295
 80a240a:	4770      	bx	lr
 80a240c:	f04f 0000 	mov.w	r0, #0
 80a2410:	4770      	bx	lr
 80a2412:	bf00      	nop

080a2414 <__cxa_atexit>:
 80a2414:	b510      	push	{r4, lr}
 80a2416:	4c05      	ldr	r4, [pc, #20]	; (80a242c <__cxa_atexit+0x18>)
 80a2418:	4613      	mov	r3, r2
 80a241a:	b12c      	cbz	r4, 80a2428 <__cxa_atexit+0x14>
 80a241c:	460a      	mov	r2, r1
 80a241e:	4601      	mov	r1, r0
 80a2420:	2002      	movs	r0, #2
 80a2422:	f3af 8000 	nop.w
 80a2426:	bd10      	pop	{r4, pc}
 80a2428:	4620      	mov	r0, r4
 80a242a:	bd10      	pop	{r4, pc}
 80a242c:	00000000 	.word	0x00000000

080a2430 <memcpy>:
 80a2430:	b510      	push	{r4, lr}
 80a2432:	1e43      	subs	r3, r0, #1
 80a2434:	440a      	add	r2, r1
 80a2436:	4291      	cmp	r1, r2
 80a2438:	d004      	beq.n	80a2444 <memcpy+0x14>
 80a243a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a243e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2442:	e7f8      	b.n	80a2436 <memcpy+0x6>
 80a2444:	bd10      	pop	{r4, pc}

080a2446 <memset>:
 80a2446:	4603      	mov	r3, r0
 80a2448:	4402      	add	r2, r0
 80a244a:	4293      	cmp	r3, r2
 80a244c:	d002      	beq.n	80a2454 <memset+0xe>
 80a244e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2452:	e7fa      	b.n	80a244a <memset+0x4>
 80a2454:	4770      	bx	lr
	...

080a2458 <srand>:
 80a2458:	b538      	push	{r3, r4, r5, lr}
 80a245a:	4b12      	ldr	r3, [pc, #72]	; (80a24a4 <srand+0x4c>)
 80a245c:	4605      	mov	r5, r0
 80a245e:	681c      	ldr	r4, [r3, #0]
 80a2460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2462:	b9d3      	cbnz	r3, 80a249a <srand+0x42>
 80a2464:	2018      	movs	r0, #24
 80a2466:	f7fe fb9b 	bl	80a0ba0 <malloc>
 80a246a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a246e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2470:	8003      	strh	r3, [r0, #0]
 80a2472:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2476:	8043      	strh	r3, [r0, #2]
 80a2478:	f241 2334 	movw	r3, #4660	; 0x1234
 80a247c:	8083      	strh	r3, [r0, #4]
 80a247e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2482:	80c3      	strh	r3, [r0, #6]
 80a2484:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2488:	8103      	strh	r3, [r0, #8]
 80a248a:	2305      	movs	r3, #5
 80a248c:	8143      	strh	r3, [r0, #10]
 80a248e:	230b      	movs	r3, #11
 80a2490:	8183      	strh	r3, [r0, #12]
 80a2492:	2201      	movs	r2, #1
 80a2494:	2300      	movs	r3, #0
 80a2496:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a249a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a249c:	2200      	movs	r2, #0
 80a249e:	611d      	str	r5, [r3, #16]
 80a24a0:	615a      	str	r2, [r3, #20]
 80a24a2:	bd38      	pop	{r3, r4, r5, pc}
 80a24a4:	20000368 	.word	0x20000368

080a24a8 <strlen>:
 80a24a8:	4603      	mov	r3, r0
 80a24aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a24ae:	2a00      	cmp	r2, #0
 80a24b0:	d1fb      	bne.n	80a24aa <strlen+0x2>
 80a24b2:	1a18      	subs	r0, r3, r0
 80a24b4:	3801      	subs	r0, #1
 80a24b6:	4770      	bx	lr

080a24b8 <dynalib_user>:
 80a24b8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a24c8:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
 80a24d8:	2e2e 002e 414d 3358 3130 3530 7720 7361     ....MAX30105 was
 80a24e8:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
 80a24f8:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
 80a2508:	6f70 6577 2e72 0020 6c50 6361 2065 6f79     power. .Place yo
 80a2518:	7275 6920 646e 7865 6620 6e69 6567 2072     ur index finger 
 80a2528:	6e6f 7420 6568 7320 6e65 6f73 2072 6977     on the sensor wi
 80a2538:	6874 7320 6574 6461 2079 7270 7365 7573     th steady pressu
 80a2548:	6572 002e 5249 003d 202c 5042 3d4d 2c00     re..IR=., BPM=.,
 80a2558:	4120 6776 4220 4d50 003d 4e20 206f 6966      Avg BPM=. No fi
 80a2568:	676e 7265 003f                              nger?.

080a256e <_ZL9FIRCoeffs>:
 80a256e:	00ac 0141 0243 039f 0550 0742 0956 0b64     ..A.C...P.B.V.d.
 80a257e:	0d3f 0eb8 0fac 1000 0000                    ?.........

080a2588 <_ZTV8SPIClass>:
	...
 80a2590:	0bc1 080a 0bc3 080a 616e 006e 766f 0066     ........nan.ovf.
 80a25a0:	6e69 0066 6e6c 6600 006e 6f63 6564 6400     inf.ln.fn.code.d
 80a25b0:	7465 6961 006c 0a0d 2500 3130 7530 0020     etail....%010u .
 80a25c0:	205d 2500 0064 202c 2800 3a29 0020 5b20     ] .%d., .(): . [
 80a25d0:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
 80a25e0:	6c69 2073 203d 6200 7561 0064 6553 6972     ils = .baud.Seri
 80a25f0:	6c61 5500 4253 6553 6972 6c61 0031 7974     al.USBSerial1.ty
 80a2600:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
 80a2610:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
 80a2620:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
 80a2630:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
 80a2640:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
 80a2650:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
 80a2660:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
 80a2670:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
 80a2680:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
 80a2690:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a26a0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a26b0 <_ZTV9IPAddress>:
	...
 80a26b8:	1057 080a 1049 080a 104b 080a               W...I...K...

080a26c4 <_ZTV9USBSerial>:
	...
 80a26cc:	1111 080a 1155 080a 112f 080a 0c11 080a     ....U.../.......
 80a26dc:	1129 080a 1113 080a 111b 080a 114f 080a     )...........O...
 80a26ec:	1123 080a 110d 080a                         #.......

080a26f4 <_ZTV11USARTSerial>:
	...
 80a26fc:	1249 080a 126d 080a 1279 080a 0c11 080a     I...m...y.......
 80a270c:	1255 080a 1261 080a 125b 080a 1267 080a     U...a...[...g...
 80a271c:	124b 080a 124f 080a                         K...O...

080a2724 <_ZTV7TwoWire>:
	...
 80a272c:	1349 080a 1393 080a 136b 080a 134b 080a     I.......k...K...
 80a273c:	1373 080a 137b 080a 1383 080a 138b 080a     s...{...........

080a274c <_ZTVN5spark9WiFiClassE>:
	...
 80a2754:	14ad 080a 14a3 080a 1499 080a 1417 080a     ................
 80a2764:	0e9f 080a 148d 080a 1481 080a 1479 080a     ............y...
 80a2774:	146f 080a 1465 080a 1421 080a               o...e...!...

080a2780 <_ZTVN5spark12NetworkClassE>:
	...
 80a2788:	14cd 080a 14d7 080a 14e1 080a 14eb 080a     ................
 80a2798:	14f5 080a 1501 080a 150d 080a 1519 080a     ................
 80a27a8:	1521 080a 152b 080a 1535 080a               !...+...5...

080a27b4 <__sf_fake_stdin>:
	...

080a27d4 <__sf_fake_stdout>:
	...

080a27f4 <__sf_fake_stderr>:
	...
 80a2814:	0043                                        C.

080a2816 <link_const_variable_data_end>:
	...

080a2818 <link_constructors_location>:
 80a2818:	080a0281 	.word	0x080a0281
 80a281c:	080a03e1 	.word	0x080a03e1
 80a2820:	080a08ab 	.word	0x080a08ab
 80a2824:	080a08af 	.word	0x080a08af
 80a2828:	080a0bf9 	.word	0x080a0bf9
 80a282c:	080a0ead 	.word	0x080a0ead
 80a2830:	080a0ebd 	.word	0x080a0ebd
 80a2834:	080a0ef5 	.word	0x080a0ef5
 80a2838:	080a14b9 	.word	0x080a14b9
 80a283c:	080a1585 	.word	0x080a1585
 80a2840:	080a1599 	.word	0x080a1599
 80a2844:	080a15dd 	.word	0x080a15dd
 80a2848:	080a1659 	.word	0x080a1659
 80a284c:	080a16dd 	.word	0x080a16dd
 80a2850:	080a17a1 	.word	0x080a17a1
 80a2854:	080a1865 	.word	0x080a1865

080a2858 <link_constructors_end>:
	...
